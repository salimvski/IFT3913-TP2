Found a 182 line (998 tokens) duplication in the following files: 
Starting at line 1050 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/main/java/org/jfree/chart/renderer/category/BarRenderer.java
Starting at line 881 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/main/java/org/jfree/chart/renderer/xy/XYBarRenderer.java

            position = getNegativeItemLabelPosition(row, column);
        }

        // work out the label anchor point...
        Point2D anchorPoint = calculateLabelAnchorPoint(
                position.getItemLabelAnchor(), bar, plot.getOrientation());

        if (isInternalAnchor(position.getItemLabelAnchor())) {
            Shape bounds = TextUtils.calculateRotatedStringBounds(label,
                    g2, (float) anchorPoint.getX(), (float) anchorPoint.getY(),
                    position.getTextAnchor(), position.getAngle(),
                    position.getRotationAnchor());

            if (bounds != null) {
                if (!bar.contains(bounds.getBounds2D())) {
                    if (!negative) {
                        position = getPositiveItemLabelPositionFallback();
                    }
                    else {
                        position = getNegativeItemLabelPositionFallback();
                    }
                    if (position != null) {
                        anchorPoint = calculateLabelAnchorPoint(
                                position.getItemLabelAnchor(), bar,
                                plot.getOrientation());
                    }
                }
            }

        }

        if (position != null) {
            TextUtils.drawRotatedString(label, g2,
                    (float) anchorPoint.getX(), (float) anchorPoint.getY(),
                    position.getTextAnchor(), position.getAngle(),
                    position.getRotationAnchor());
        }
    }

    /**
     * Calculates the item label anchor point.
     *
     * @param anchor  the anchor.
     * @param bar  the bar.
     * @param orientation  the plot orientation.
     *
     * @return The anchor point.
     */
    private Point2D calculateLabelAnchorPoint(ItemLabelAnchor anchor,
                                              Rectangle2D bar,
                                              PlotOrientation orientation) {

        Point2D result = null;
        double offset = getItemLabelAnchorOffset();
        double x0 = bar.getX() - offset;
        double x1 = bar.getX();
        double x2 = bar.getX() + offset;
        double x3 = bar.getCenterX();
        double x4 = bar.getMaxX() - offset;
        double x5 = bar.getMaxX();
        double x6 = bar.getMaxX() + offset;

        double y0 = bar.getMaxY() + offset;
        double y1 = bar.getMaxY();
        double y2 = bar.getMaxY() - offset;
        double y3 = bar.getCenterY();
        double y4 = bar.getMinY() + offset;
        double y5 = bar.getMinY();
        double y6 = bar.getMinY() - offset;

        if (anchor == ItemLabelAnchor.CENTER) {
            result = new Point2D.Double(x3, y3);
        }
        else if (anchor == ItemLabelAnchor.INSIDE1) {
            result = new Point2D.Double(x4, y4);
        }
        else if (anchor == ItemLabelAnchor.INSIDE2) {
            result = new Point2D.Double(x4, y4);
        }
        else if (anchor == ItemLabelAnchor.INSIDE3) {
            result = new Point2D.Double(x4, y3);
        }
        else if (anchor == ItemLabelAnchor.INSIDE4) {
            result = new Point2D.Double(x4, y2);
        }
        else if (anchor == ItemLabelAnchor.INSIDE5) {
            result = new Point2D.Double(x4, y2);
        }
        else if (anchor == ItemLabelAnchor.INSIDE6) {
            result = new Point2D.Double(x3, y2);
        }
        else if (anchor == ItemLabelAnchor.INSIDE7) {
            result = new Point2D.Double(x2, y2);
        }
        else if (anchor == ItemLabelAnchor.INSIDE8) {
            result = new Point2D.Double(x2, y2);
        }
        else if (anchor == ItemLabelAnchor.INSIDE9) {
            result = new Point2D.Double(x2, y3);
        }
        else if (anchor == ItemLabelAnchor.INSIDE10) {
            result = new Point2D.Double(x2, y4);
        }
        else if (anchor == ItemLabelAnchor.INSIDE11) {
            result = new Point2D.Double(x2, y4);
        }
        else if (anchor == ItemLabelAnchor.INSIDE12) {
            result = new Point2D.Double(x3, y4);
        }
        else if (anchor == ItemLabelAnchor.OUTSIDE1) {
            result = new Point2D.Double(x5, y6);
        }
        else if (anchor == ItemLabelAnchor.OUTSIDE2) {
            result = new Point2D.Double(x6, y5);
        }
        else if (anchor == ItemLabelAnchor.OUTSIDE3) {
            result = new Point2D.Double(x6, y3);
        }
        else if (anchor == ItemLabelAnchor.OUTSIDE4) {
            result = new Point2D.Double(x6, y1);
        }
        else if (anchor == ItemLabelAnchor.OUTSIDE5) {
            result = new Point2D.Double(x5, y0);
        }
        else if (anchor == ItemLabelAnchor.OUTSIDE6) {
            result = new Point2D.Double(x3, y0);
        }
        else if (anchor == ItemLabelAnchor.OUTSIDE7) {
            result = new Point2D.Double(x1, y0);
        }
        else if (anchor == ItemLabelAnchor.OUTSIDE8) {
            result = new Point2D.Double(x0, y1);
        }
        else if (anchor == ItemLabelAnchor.OUTSIDE9) {
            result = new Point2D.Double(x0, y3);
        }
        else if (anchor == ItemLabelAnchor.OUTSIDE10) {
            result = new Point2D.Double(x0, y5);
        }
        else if (anchor == ItemLabelAnchor.OUTSIDE11) {
            result = new Point2D.Double(x1, y6);
        }
        else if (anchor == ItemLabelAnchor.OUTSIDE12) {
            result = new Point2D.Double(x3, y6);
        }

        return result;

    }

    /**
     * Returns {@code true} if the specified anchor point is inside a bar.
     *
     * @param anchor  the anchor point.
     *
     * @return A boolean.
     */
    private boolean isInternalAnchor(ItemLabelAnchor anchor) {
        return anchor == ItemLabelAnchor.CENTER
               || anchor == ItemLabelAnchor.INSIDE1
               || anchor == ItemLabelAnchor.INSIDE2
               || anchor == ItemLabelAnchor.INSIDE3
               || anchor == ItemLabelAnchor.INSIDE4
               || anchor == ItemLabelAnchor.INSIDE5
               || anchor == ItemLabelAnchor.INSIDE6
               || anchor == ItemLabelAnchor.INSIDE7
               || anchor == ItemLabelAnchor.INSIDE8
               || anchor == ItemLabelAnchor.INSIDE9
               || anchor == ItemLabelAnchor.INSIDE10
               || anchor == ItemLabelAnchor.INSIDE11
               || anchor == ItemLabelAnchor.INSIDE12;
    }

    /**
     * Tests this instance for equality with an arbitrary object.
     *
     * @param obj  the object ({@code null} permitted).
     *
     * @return A boolean.
     */
    @Override
    public boolean equals(Object obj) {
=====================================================================
Found a 128 line (662 tokens) duplication in the following files: 
Starting at line 216 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/main/java/org/jfree/chart/renderer/category/GradientBarPainter.java
Starting at line 215 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/main/java/org/jfree/chart/renderer/xy/GradientXYBarPainter.java

        g2.setPaint(renderer.getShadowPaint());
        g2.fill(shadow);

    }

    /**
     * Creates a shadow for the bar.
     *
     * @param bar  the bar shape.
     * @param xOffset  the x-offset for the shadow.
     * @param yOffset  the y-offset for the shadow.
     * @param base  the edge that is the base of the bar.
     * @param pegShadow  peg the shadow to the base?
     *
     * @return A rectangle for the shadow.
     */
    private Rectangle2D createShadow(RectangularShape bar, double xOffset,
            double yOffset, RectangleEdge base, boolean pegShadow) {
        double x0 = bar.getMinX();
        double x1 = bar.getMaxX();
        double y0 = bar.getMinY();
        double y1 = bar.getMaxY();
        if (base == RectangleEdge.TOP) {
            x0 += xOffset;
            x1 += xOffset;
            if (!pegShadow) {
                y0 += yOffset;
            }
            y1 += yOffset;
        }
        else if (base == RectangleEdge.BOTTOM) {
            x0 += xOffset;
            x1 += xOffset;
            y0 += yOffset;
            if (!pegShadow) {
                y1 += yOffset;
            }
        }
        else if (base == RectangleEdge.LEFT) {
            if (!pegShadow) {
                x0 += xOffset;
            }
            x1 += xOffset;
            y0 += yOffset;
            y1 += yOffset;
        }
        else if (base == RectangleEdge.RIGHT) {
            x0 += xOffset;
            if (!pegShadow) {
                x1 += xOffset;
            }
            y0 += yOffset;
            y1 += yOffset;
        }
        return new Rectangle2D.Double(x0, y0, (x1 - x0), (y1 - y0));
    }

    /**
     * Splits a bar into subregions (elsewhere, these subregions will have
     * different gradients applied to them).
     *
     * @param bar  the bar shape.
     * @param a  the first division.
     * @param b  the second division.
     * @param c  the third division.
     *
     * @return An array containing four subregions.
     */
    private Rectangle2D[] splitVerticalBar(RectangularShape bar, double a,
            double b, double c) {
        Rectangle2D[] result = new Rectangle2D[4];
        double x0 = bar.getMinX();
        double x1 = Math.rint(x0 + (bar.getWidth() * a));
        double x2 = Math.rint(x0 + (bar.getWidth() * b));
        double x3 = Math.rint(x0 + (bar.getWidth() * c));
        result[0] = new Rectangle2D.Double(bar.getMinX(), bar.getMinY(),
                x1 - x0, bar.getHeight());
        result[1] = new Rectangle2D.Double(x1, bar.getMinY(), x2 - x1,
                bar.getHeight());
        result[2] = new Rectangle2D.Double(x2, bar.getMinY(), x3 - x2,
                bar.getHeight());
        result[3] = new Rectangle2D.Double(x3, bar.getMinY(),
                bar.getMaxX() - x3, bar.getHeight());
        return result;
    }

    /**
     * Splits a bar into subregions (elsewhere, these subregions will have
     * different gradients applied to them).
     *
     * @param bar  the bar shape.
     * @param a  the first division.
     * @param b  the second division.
     * @param c  the third division.
     *
     * @return An array containing four subregions.
     */
    private Rectangle2D[] splitHorizontalBar(RectangularShape bar, double a,
            double b, double c) {
        Rectangle2D[] result = new Rectangle2D[4];
        double y0 = bar.getMinY();
        double y1 = Math.rint(y0 + (bar.getHeight() * a));
        double y2 = Math.rint(y0 + (bar.getHeight() * b));
        double y3 = Math.rint(y0 + (bar.getHeight() * c));
        result[0] = new Rectangle2D.Double(bar.getMinX(), bar.getMinY(),
                bar.getWidth(), y1 - y0);
        result[1] = new Rectangle2D.Double(bar.getMinX(), y1, bar.getWidth(),
                y2 - y1);
        result[2] = new Rectangle2D.Double(bar.getMinX(), y2, bar.getWidth(),
                y3 - y2);
        result[3] = new Rectangle2D.Double(bar.getMinX(), y3, bar.getWidth(),
                bar.getMaxY() - y3);
        return result;
    }

    /**
     * Tests this instance for equality with an arbitrary object.
     *
     * @param obj  the obj ({@code null} permitted).
     *
     * @return A boolean.
     */
    @Override
    public boolean equals(Object obj) {
        if (obj == this) {
            return true;
        }
        if (!(obj instanceof GradientBarPainter)) {
=====================================================================
Found a 110 line (564 tokens) duplication in the following files: 
Starting at line 137 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/test/java/org/jfree/chart/plot/CombinedDomainCategoryPlotTest.java
Starting at line 137 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/test/java/org/jfree/chart/plot/CombinedRangeCategoryPlotTest.java

        CategoryPlot<String, String> subplot1 = plot.getSubplots().get(0);
        NumberAxis yAxis = (NumberAxis) subplot1.getRangeAxis();
        yAxis.setAutoRangeIncludesZero(!yAxis.getAutoRangeIncludesZero());
        assertEquals(1, this.events.size());

        // a redraw should NOT trigger another change event
        BufferedImage image = new BufferedImage(200, 100,
                BufferedImage.TYPE_INT_RGB);
        Graphics2D g2 = image.createGraphics();
        this.events.clear();
        chart.draw(g2, new Rectangle2D.Double(0.0, 0.0, 200.0, 100.0));
        assertTrue(this.events.isEmpty());
    }

    /**
     * Creates a dataset.
     *
     * @return A dataset.
     */
    public CategoryDataset<String, String> createDataset1() {

        DefaultCategoryDataset<String, String> result = new DefaultCategoryDataset<>();

        // row keys...
        String series1 = "First";
        String series2 = "Second";

        // column keys...
        String type1 = "Type 1";
        String type2 = "Type 2";
        String type3 = "Type 3";
        String type4 = "Type 4";
        String type5 = "Type 5";
        String type6 = "Type 6";
        String type7 = "Type 7";
        String type8 = "Type 8";

        result.addValue(1.0, series1, type1);
        result.addValue(4.0, series1, type2);
        result.addValue(3.0, series1, type3);
        result.addValue(5.0, series1, type4);
        result.addValue(5.0, series1, type5);
        result.addValue(7.0, series1, type6);
        result.addValue(7.0, series1, type7);
        result.addValue(8.0, series1, type8);

        result.addValue(5.0, series2, type1);
        result.addValue(7.0, series2, type2);
        result.addValue(6.0, series2, type3);
        result.addValue(8.0, series2, type4);
        result.addValue(4.0, series2, type5);
        result.addValue(4.0, series2, type6);
        result.addValue(2.0, series2, type7);
        result.addValue(1.0, series2, type8);

        return result;

    }

    /**
     * Creates a dataset.
     *
     * @return A dataset.
     */
    public CategoryDataset<String, String> createDataset2() {

        DefaultCategoryDataset<String, String> result = new DefaultCategoryDataset<>();

        // row keys...
        String series1 = "Third";
        String series2 = "Fourth";

        // column keys...
        String type1 = "Type 1";
        String type2 = "Type 2";
        String type3 = "Type 3";
        String type4 = "Type 4";
        String type5 = "Type 5";
        String type6 = "Type 6";
        String type7 = "Type 7";
        String type8 = "Type 8";

        result.addValue(11.0, series1, type1);
        result.addValue(14.0, series1, type2);
        result.addValue(13.0, series1, type3);
        result.addValue(15.0, series1, type4);
        result.addValue(15.0, series1, type5);
        result.addValue(17.0, series1, type6);
        result.addValue(17.0, series1, type7);
        result.addValue(18.0, series1, type8);

        result.addValue(15.0, series2, type1);
        result.addValue(17.0, series2, type2);
        result.addValue(16.0, series2, type3);
        result.addValue(18.0, series2, type4);
        result.addValue(14.0, series2, type5);
        result.addValue(14.0, series2, type6);
        result.addValue(12.0, series2, type7);
        result.addValue(11.0, series2, type8);

        return result;

    }

    /**
     * Creates a sample plot.
     *
     * @return A sample plot.
     */
    private CombinedDomainCategoryPlot createPlot() {
=====================================================================
Found a 105 line (523 tokens) duplication in the following files: 
Starting at line 128 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/main/java/org/jfree/chart/labels/IntervalXYItemLabelGenerator.java
Starting at line 125 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/main/java/org/jfree/chart/labels/IntervalXYToolTipGenerator.java

    public IntervalXYItemLabelGenerator(String formatString,
            DateFormat xFormat, DateFormat yFormat) {

        super(formatString, xFormat, yFormat);
    }

    /**
     * Creates the array of items that can be passed to the
     * {@link MessageFormat} class for creating labels.
     *
     * @param dataset  the dataset ({@code null} not permitted).
     * @param series  the series (zero-based index).
     * @param item  the item (zero-based index).
     *
     * @return An array of seven items from the dataset formatted as
     *         {@code String} objects (never {@code null}).
     */
    @Override
    protected Object[] createItemArray(XYDataset dataset, int series,
                                       int item) {

        IntervalXYDataset intervalDataset = null;
        if (dataset instanceof IntervalXYDataset) {
            intervalDataset = (IntervalXYDataset) dataset;
        }
        Object[] result = new Object[7];
        result[0] = dataset.getSeriesKey(series).toString();

        double x = dataset.getXValue(series, item);
        double xs = x;
        double xe = x;
        double y = dataset.getYValue(series, item);
        double ys = y;
        double ye = y;
        if (intervalDataset != null) {
            xs = intervalDataset.getStartXValue(series, item);
            xe = intervalDataset.getEndXValue(series, item);
            ys = intervalDataset.getStartYValue(series, item);
            ye = intervalDataset.getEndYValue(series, item);
        }

        DateFormat xdf = getXDateFormat();
        if (xdf != null) {
            result[1] = xdf.format(new Date((long) x));
            result[2] = xdf.format(new Date((long) xs));
            result[3] = xdf.format(new Date((long) xe));
        }
        else {
            NumberFormat xnf = getXFormat();
            result[1] = xnf.format(x);
            result[2] = xnf.format(xs);
            result[3] = xnf.format(xe);
        }

        NumberFormat ynf = getYFormat();
        DateFormat ydf = getYDateFormat();
        if (Double.isNaN(y) && dataset.getY(series, item) == null) {
            result[4] = getNullYString();
        }
        else {
            if (ydf != null) {
                result[4] = ydf.format(new Date((long) y));
            }
            else {
                result[4] = ynf.format(y);
            }
        }
        if (Double.isNaN(ys) && intervalDataset != null
                && intervalDataset.getStartY(series, item) == null) {
            result[5] = getNullYString();
        }
        else {
            if (ydf != null) {
                result[5] = ydf.format(new Date((long) ys));
            }
            else {
                result[5] = ynf.format(ys);
            }
        }
        if (Double.isNaN(ye) && intervalDataset != null
                && intervalDataset.getEndY(series, item) == null) {
            result[6] = getNullYString();
        }
        else {
            if (ydf != null) {
                result[6] = ydf.format(new Date((long) ye));
            }
            else {
                result[6] = ynf.format(ye);
            }
        }
        return result;
    }

    /**
     * Generates the item label text for an item in a dataset.
     *
     * @param dataset  the dataset ({@code null} not permitted).
     * @param series  the series index (zero-based).
     * @param item  the item index (zero-based).
     *
     * @return The label text (possibly {@code null}).
     */
    @Override
    public String generateLabel(XYDataset dataset, int series, int item) {
=====================================================================
Found a 95 line (523 tokens) duplication in the following files: 
Starting at line 151 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/test/java/org/jfree/chart/plot/CombinedDomainXYPlotTest.java
Starting at line 142 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/test/java/org/jfree/chart/plot/CombinedRangeXYPlotTest.java

        yAxis.setAutoRangeIncludesZero(!yAxis.getAutoRangeIncludesZero());
        assertEquals(1, this.events.size());

        // a redraw should NOT trigger another change event
        BufferedImage image = new BufferedImage(200, 100,
                BufferedImage.TYPE_INT_RGB);
        Graphics2D g2 = image.createGraphics();
        this.events.clear();
        chart.draw(g2, new Rectangle2D.Double(0.0, 0.0, 200.0, 100.0));
        assertTrue(this.events.isEmpty());
    }

    /**
     * Creates a sample dataset.
     *
     * @return Series 1.
     */
    private XYDataset<String> createDataset1() {

        // create dataset 1...
        XYSeries<String> series1 = new XYSeries<>("Series 1");
        series1.add(10.0, 12353.3);
        series1.add(20.0, 13734.4);
        series1.add(30.0, 14525.3);
        series1.add(40.0, 13984.3);
        series1.add(50.0, 12999.4);
        series1.add(60.0, 14274.3);
        series1.add(70.0, 15943.5);
        series1.add(80.0, 14845.3);
        series1.add(90.0, 14645.4);
        series1.add(100.0, 16234.6);
        series1.add(110.0, 17232.3);
        series1.add(120.0, 14232.2);
        series1.add(130.0, 13102.2);
        series1.add(140.0, 14230.2);
        series1.add(150.0, 11235.2);

        XYSeries<String> series2 = new XYSeries<>("Series 2");
        series2.add(10.0, 15000.3);
        series2.add(20.0, 11000.4);
        series2.add(30.0, 17000.3);
        series2.add(40.0, 15000.3);
        series2.add(50.0, 14000.4);
        series2.add(60.0, 12000.3);
        series2.add(70.0, 11000.5);
        series2.add(80.0, 12000.3);
        series2.add(90.0, 13000.4);
        series2.add(100.0, 12000.6);
        series2.add(110.0, 13000.3);
        series2.add(120.0, 17000.2);
        series2.add(130.0, 18000.2);
        series2.add(140.0, 16000.2);
        series2.add(150.0, 17000.2);

        XYSeriesCollection<String> collection = new XYSeriesCollection<>();
        collection.addSeries(series1);
        collection.addSeries(series2);
        return collection;

    }

    /**
     * Creates a sample dataset.
     *
     * @return Series 2.
     */
    private XYDataset<String> createDataset2() {

        XYSeries<String> series2 = new XYSeries<>("Series 3");

        series2.add(10.0, 16853.2);
        series2.add(20.0, 19642.3);
        series2.add(30.0, 18253.5);
        series2.add(40.0, 15352.3);
        series2.add(50.0, 13532.0);
        series2.add(100.0, 12635.3);
        series2.add(110.0, 13998.2);
        series2.add(120.0, 11943.2);
        series2.add(130.0, 16943.9);
        series2.add(140.0, 17843.2);
        series2.add(150.0, 16495.3);
        series2.add(160.0, 17943.6);
        series2.add(170.0, 18500.7);
        series2.add(180.0, 19595.9);

        return new XYSeriesCollection<>(series2);

    }

    /**
     * Creates a sample plot.
     *
     * @return A sample plot.
     */
    private CombinedDomainXYPlot<String> createPlot() {
=====================================================================
Found a 67 line (471 tokens) duplication in the following files: 
Starting at line 1019 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/main/java/org/jfree/chart/renderer/category/AbstractCategoryItemRenderer.java
Starting at line 1251 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/main/java/org/jfree/chart/renderer/xy/AbstractXYItemRenderer.java

            Paint p = marker.getPaint();
            if (p instanceof GradientPaint) {
                GradientPaint gp = (GradientPaint) p;
                GradientPaintTransformer t = im.getGradientPaintTransformer();
                if (t != null) {
                    gp = t.transform(gp, rect);
                }
                g2.setPaint(gp);
            }
            else {
                g2.setPaint(p);
            }
            g2.fill(rect);

            // now draw the outlines, if visible...
            if (im.getOutlinePaint() != null && im.getOutlineStroke() != null) {
                if (orientation == PlotOrientation.VERTICAL) {
                    Line2D line = new Line2D.Double();
                    double x0 = dataArea.getMinX();
                    double x1 = dataArea.getMaxX();
                    g2.setPaint(im.getOutlinePaint());
                    g2.setStroke(im.getOutlineStroke());
                    if (range.contains(start)) {
                        line.setLine(x0, start2d, x1, start2d);
                        g2.draw(line);
                    }
                    if (range.contains(end)) {
                        line.setLine(x0, end2d, x1, end2d);
                        g2.draw(line);
                    }
                } else { // PlotOrientation.HORIZONTAL
                    Line2D line = new Line2D.Double();
                    double y0 = dataArea.getMinY();
                    double y1 = dataArea.getMaxY();
                    g2.setPaint(im.getOutlinePaint());
                    g2.setStroke(im.getOutlineStroke());
                    if (range.contains(start)) {
                        line.setLine(start2d, y0, start2d, y1);
                        g2.draw(line);
                    }
                    if (range.contains(end)) {
                        line.setLine(end2d, y0, end2d, y1);
                        g2.draw(line);
                    }
                }
            }

            String label = marker.getLabel();
            RectangleAnchor anchor = marker.getLabelAnchor();
            if (label != null) {
                Font labelFont = marker.getLabelFont();
                g2.setFont(labelFont);
                Point2D coords = calculateRangeMarkerTextAnchorPoint(
                        g2, orientation, dataArea, rect,
                        marker.getLabelOffset(), marker.getLabelOffsetType(),
                        anchor);
                Rectangle2D r = TextUtils.calcAlignedStringBounds(label, 
                        g2, (float) coords.getX(), (float) coords.getY(), 
                        marker.getLabelTextAnchor());
                g2.setPaint(marker.getLabelBackgroundColor());
                g2.fill(r);
                g2.setPaint(marker.getLabelPaint());
                TextUtils.drawAlignedString(label, g2,
                        (float) coords.getX(), (float) coords.getY(),
                        marker.getLabelTextAnchor());
            }
            g2.setComposite(savedComposite);
=====================================================================
Found a 61 line (460 tokens) duplication in the following files: 
Starting at line 304 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/test/java/org/jfree/chart/axis/DateAxisTest.java
Starting at line 452 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/test/java/org/jfree/chart/axis/DateAxisTest.java
Starting at line 600 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/test/java/org/jfree/chart/axis/DateAxisTest.java
Starting at line 748 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/test/java/org/jfree/chart/axis/DateAxisTest.java
Starting at line 896 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/test/java/org/jfree/chart/axis/DateAxisTest.java

        DateTickUnit unit = new DateTickUnit(DateTickUnitType.YEAR, 1);
        axis.setTickUnit(unit);

        // START: check d0 and d1
        axis.setTickMarkPosition(DateTickMarkPosition.START);

        axis.setRange(d0, end);
        Date psd = axis.previousStandardDate(d0, unit);
        Date nsd = unit.addToDate(psd, TimeZone.getDefault());
        assertTrue(psd.getTime() < d0.getTime());
        assertTrue(nsd.getTime() >= d0.getTime());

        axis.setRange(d1, end);
        psd = axis.previousStandardDate(d1, unit);
        nsd = unit.addToDate(psd, TimeZone.getDefault());
        assertTrue(psd.getTime() < d1.getTime());
        assertTrue(nsd.getTime() >= d1.getTime());

        // MIDDLE: check d1, d2 and d3
        axis.setTickMarkPosition(DateTickMarkPosition.MIDDLE);

        axis.setRange(d1, end);
        psd = axis.previousStandardDate(d1, unit);
        nsd = unit.addToDate(psd, TimeZone.getDefault());
        assertTrue(psd.getTime() < d1.getTime());
        assertTrue(nsd.getTime() >= d1.getTime());

        axis.setRange(d2, end);
        psd = axis.previousStandardDate(d2, unit);
        nsd = unit.addToDate(psd, TimeZone.getDefault());
        assertTrue(psd.getTime() < d2.getTime());
        assertTrue(nsd.getTime() >= d2.getTime());

        axis.setRange(d3, end);
        psd = axis.previousStandardDate(d3, unit);
        nsd = unit.addToDate(psd, TimeZone.getDefault());
        assertTrue(psd.getTime() < d3.getTime());
        assertTrue(nsd.getTime() >= d3.getTime());

        // END: check d3 and d4
        axis.setTickMarkPosition(DateTickMarkPosition.END);

        axis.setRange(d3, end);
        psd = axis.previousStandardDate(d3, unit);
        nsd = unit.addToDate(psd, TimeZone.getDefault());
        assertTrue(psd.getTime() < d3.getTime());
        assertTrue(nsd.getTime() >= d3.getTime());

        axis.setRange(d4, end);
        psd = axis.previousStandardDate(d4, unit);
        nsd = unit.addToDate(psd, TimeZone.getDefault());
        assertTrue(psd.getTime() < d4.getTime());
        assertTrue(nsd.getTime() >= d4.getTime());
    }

    /**
     * A basic check for the testPreviousStandardDate() method when the
     * tick unit is 10 years (just for the sake of having a multiple).
     */
    @Test
    public void testPreviousStandardDateYearB() {
=====================================================================
Found a 61 line (458 tokens) duplication in the following files: 
Starting at line 304 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/test/java/org/jfree/chart/axis/DateAxisTest.java
Starting at line 378 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/test/java/org/jfree/chart/axis/DateAxisTest.java
Starting at line 452 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/test/java/org/jfree/chart/axis/DateAxisTest.java
Starting at line 526 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/test/java/org/jfree/chart/axis/DateAxisTest.java
Starting at line 600 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/test/java/org/jfree/chart/axis/DateAxisTest.java
Starting at line 674 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/test/java/org/jfree/chart/axis/DateAxisTest.java
Starting at line 748 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/test/java/org/jfree/chart/axis/DateAxisTest.java
Starting at line 822 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/test/java/org/jfree/chart/axis/DateAxisTest.java
Starting at line 896 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/test/java/org/jfree/chart/axis/DateAxisTest.java
Starting at line 970 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/test/java/org/jfree/chart/axis/DateAxisTest.java

        DateTickUnit unit = new DateTickUnit(DateTickUnitType.YEAR, 1);
        axis.setTickUnit(unit);

        // START: check d0 and d1
        axis.setTickMarkPosition(DateTickMarkPosition.START);

        axis.setRange(d0, end);
        Date psd = axis.previousStandardDate(d0, unit);
        Date nsd = unit.addToDate(psd, TimeZone.getDefault());
        assertTrue(psd.getTime() < d0.getTime());
        assertTrue(nsd.getTime() >= d0.getTime());

        axis.setRange(d1, end);
        psd = axis.previousStandardDate(d1, unit);
        nsd = unit.addToDate(psd, TimeZone.getDefault());
        assertTrue(psd.getTime() < d1.getTime());
        assertTrue(nsd.getTime() >= d1.getTime());

        // MIDDLE: check d1, d2 and d3
        axis.setTickMarkPosition(DateTickMarkPosition.MIDDLE);

        axis.setRange(d1, end);
        psd = axis.previousStandardDate(d1, unit);
        nsd = unit.addToDate(psd, TimeZone.getDefault());
        assertTrue(psd.getTime() < d1.getTime());
        assertTrue(nsd.getTime() >= d1.getTime());

        axis.setRange(d2, end);
        psd = axis.previousStandardDate(d2, unit);
        nsd = unit.addToDate(psd, TimeZone.getDefault());
        assertTrue(psd.getTime() < d2.getTime());
        assertTrue(nsd.getTime() >= d2.getTime());

        axis.setRange(d3, end);
        psd = axis.previousStandardDate(d3, unit);
        nsd = unit.addToDate(psd, TimeZone.getDefault());
        assertTrue(psd.getTime() < d3.getTime());
        assertTrue(nsd.getTime() >= d3.getTime());

        // END: check d3 and d4
        axis.setTickMarkPosition(DateTickMarkPosition.END);

        axis.setRange(d3, end);
        psd = axis.previousStandardDate(d3, unit);
        nsd = unit.addToDate(psd, TimeZone.getDefault());
        assertTrue(psd.getTime() < d3.getTime());
        assertTrue(nsd.getTime() >= d3.getTime());

        axis.setRange(d4, end);
        psd = axis.previousStandardDate(d4, unit);
        nsd = unit.addToDate(psd, TimeZone.getDefault());
        assertTrue(psd.getTime() < d4.getTime());
        assertTrue(nsd.getTime() >= d4.getTime());
    }

    /**
     * A basic check for the testPreviousStandardDate() method when the
     * tick unit is 10 years (just for the sake of having a multiple).
     */
    @Test
    public void testPreviousStandardDateYearB() {
=====================================================================
Found a 92 line (458 tokens) duplication in the following files: 
Starting at line 64 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/test/java/org/jfree/chart/StackedAreaChartTest.java
Starting at line 63 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/test/java/org/jfree/chart/StackedBarChartTest.java

public class StackedAreaChartTest {

    /** A chart. */
    private JFreeChart chart;

    /**
     * Common test setup.
     */
    @BeforeEach
    public void setUp() {
        this.chart = createChart();
    }

    /**
     * Draws the chart with a null info object to make sure that no exceptions
     * are thrown (a problem that was occurring at one point).
     */
    @Test
    public void testDrawWithNullInfo() {
        try {
            BufferedImage image = new BufferedImage(200 , 100,
                    BufferedImage.TYPE_INT_RGB);
            Graphics2D g2 = image.createGraphics();
            this.chart.draw(g2, new Rectangle2D.Double(0, 0, 200, 100), null,
                    null);
            g2.dispose();
        }
        catch (Exception e) {
          fail("There should be no exception.");
        }
    }

    /**
     * Replaces the dataset and checks that it has changed as expected.
     */
    @Test
    public void testReplaceDataset() {
        Number[][] data = new Integer[][] {{-30, -20}, {-10, 10}, {20, 30}};
        CategoryDataset<String, String> newData = DatasetUtils.createCategoryDataset("S", "C", data);
        LocalListener l = new LocalListener();
        this.chart.addChangeListener(l);
        @SuppressWarnings("unchecked")
        CategoryPlot<String, String> plot = (CategoryPlot) this.chart.getPlot();
        plot.setDataset(newData);
        assertTrue(l.flag);
        ValueAxis axis = plot.getRangeAxis();
        Range range = axis.getRange();
        assertTrue(range.getLowerBound() <= -30, 
                "Expecting the lower bound of the range to be around -30: " + range.getLowerBound());
        assertTrue(range.getUpperBound() >= 30, 
                "Expecting the upper bound of the range to be around 30: " + range.getUpperBound());
    }

    /**
     * Check that setting a tool tip generator for a series does override the
     * default generator.
     */
    @Test
    public void testSetSeriesToolTipGenerator() {
        CategoryPlot<?, ?> plot = (CategoryPlot) this.chart.getPlot();
        CategoryItemRenderer renderer = plot.getRenderer();
        StandardCategoryToolTipGenerator tt
            = new StandardCategoryToolTipGenerator();
        renderer.setSeriesToolTipGenerator(0, tt);
        CategoryToolTipGenerator tt2 = renderer.getToolTipGenerator(0, 0);
        assertSame(tt2, tt);
    }

    /**
     * Check that setting a URL generator for a series does override the
     * default generator.
     */
    @Test
    public void testSetSeriesURLGenerator() {
        CategoryPlot<?, ?> plot = (CategoryPlot) this.chart.getPlot();
        CategoryItemRenderer renderer = plot.getRenderer();
        StandardCategoryURLGenerator url1 = new StandardCategoryURLGenerator();
        renderer.setSeriesItemURLGenerator(0, url1);
        CategoryURLGenerator url2 = renderer.getItemURLGenerator(0, 0);
        assertSame(url2, url1);
    }

    /**
     * Create a stacked bar chart with sample data in the range -3 to +3.
     *
     * @return The chart.
     */
    private static JFreeChart createChart() {
        Number[][] data = new Integer[][] {{-3, -2}, {-1, 1}, {2, 3}};

        CategoryDataset<String, String> dataset = DatasetUtils.createCategoryDataset("S", "C", data);
        return ChartFactory.createStackedAreaChart("Stacked Area Chart", "Domain", "Range",
=====================================================================
Found a 55 line (430 tokens) duplication in the following files: 
Starting at line 98 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/main/java/org/jfree/chart/renderer/category/GradientBarPainter.java
Starting at line 98 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/main/java/org/jfree/chart/renderer/xy/GradientXYBarPainter.java

    public void paintBar(Graphics2D g2, BarRenderer renderer, int row,
            int column, RectangularShape bar, RectangleEdge base) {

        Paint itemPaint = renderer.getItemPaint(row, column);

        Color c0, c1;
        if (itemPaint instanceof Color) {
            c0 = (Color) itemPaint;
            c1 = c0.brighter();
        }
        else if (itemPaint instanceof GradientPaint) {
            GradientPaint gp = (GradientPaint) itemPaint;
            c0 = gp.getColor1();
            c1 = gp.getColor2();
        }
        else {
            c0 = Color.BLUE;
            c1 = Color.BLUE.brighter();
        }

        // as a special case, if the bar colour has alpha == 0, we draw
        // nothing.
        if (c0.getAlpha() == 0) {
            return;
        }

        if (base == RectangleEdge.TOP || base == RectangleEdge.BOTTOM) {
            Rectangle2D[] regions = splitVerticalBar(bar, this.g1, this.g2,
                    this.g3);
            GradientPaint gp = new GradientPaint((float) regions[0].getMinX(),
                    0.0f, c0, (float) regions[0].getMaxX(), 0.0f, Color.WHITE);
            g2.setPaint(gp);
            g2.fill(regions[0]);

            gp = new GradientPaint((float) regions[1].getMinX(), 0.0f,
                    Color.WHITE, (float) regions[1].getMaxX(), 0.0f, c0);
            g2.setPaint(gp);
            g2.fill(regions[1]);

            gp = new GradientPaint((float) regions[2].getMinX(), 0.0f, c0,
                    (float) regions[2].getMaxX(), 0.0f, c1);
            g2.setPaint(gp);
            g2.fill(regions[2]);

            gp = new GradientPaint((float) regions[3].getMinX(), 0.0f, c1,
                     (float) regions[3].getMaxX(), 0.0f, c0);
            g2.setPaint(gp);
            g2.fill(regions[3]);
        }
        else if (base == RectangleEdge.LEFT || base == RectangleEdge.RIGHT) {
            Rectangle2D[] regions = splitHorizontalBar(bar, this.g1, this.g2,
                    this.g3);
            GradientPaint gp = new GradientPaint(0.0f,
                    (float) regions[0].getMinY(), c0, 0.0f,
                    (float) regions[0].getMaxY(), Color.WHITE);
=====================================================================
Found a 60 line (418 tokens) duplication in the following files: 
Starting at line 295 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/main/java/org/jfree/chart/renderer/xy/DeviationRenderer.java
Starting at line 161 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/main/java/org/jfree/chart/renderer/xy/DeviationStepRenderer.java

            if (item == (dataset.getItemCount(series) - 1)) {
                // last item in series, draw the lot...
                // set up the alpha-transparency...
                Composite originalComposite = g2.getComposite();
                g2.setComposite(AlphaComposite.getInstance(
                        AlphaComposite.SRC_OVER, this.alpha));
                g2.setPaint(getItemFillPaint(series, item));
                GeneralPath area = new GeneralPath(GeneralPath.WIND_NON_ZERO,
                        drState.lowerCoordinates.size() 
                        + drState.upperCoordinates.size());
                double[] coords = (double[]) drState.lowerCoordinates.get(0);
                area.moveTo((float) coords[0], (float) coords[1]);
                for (int i = 1; i < drState.lowerCoordinates.size(); i++) {
                    coords = (double[]) drState.lowerCoordinates.get(i);
                    area.lineTo((float) coords[0], (float) coords[1]);
                }
                int count = drState.upperCoordinates.size();
                coords = (double[]) drState.upperCoordinates.get(count - 1);
                area.lineTo((float) coords[0], (float) coords[1]);
                for (int i = count - 2; i >= 0; i--) {
                    coords = (double[]) drState.upperCoordinates.get(i);
                    area.lineTo((float) coords[0], (float) coords[1]);
                }
                area.closePath();
                g2.fill(area);
                g2.setComposite(originalComposite);

                drState.lowerCoordinates.clear();
                drState.upperCoordinates.clear();
            }
        }
        if (isLinePass(pass)) {

            // the following code handles the line for the y-values...it's
            // all done by code in the super class
            if (item == 0) {
                State s = (State) state;
                s.seriesPath.reset();
                s.setLastPointGood(false);
            }

            if (getItemLineVisible(series, item)) {
                drawPrimaryLineAsPath(state, g2, plot, dataset, pass,
                        series, item, domainAxis, rangeAxis, dataArea);
            }
        }

        // second pass adds shapes where the items are ..
        else if (isItemPass(pass)) {

            // setup for collecting optional entity info...
            EntityCollection entities = null;
            if (info != null) {
                entities = info.getOwner().getEntityCollection();
            }

            drawSecondaryPass(g2, plot, dataset, pass, series, item,
                    domainAxis, dataArea, rangeAxis, crosshairState, entities);
        }
    }
=====================================================================
Found a 109 line (404 tokens) duplication in the following files: 
Starting at line 308 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/main/java/org/jfree/chart/ChartFactory.java
Starting at line 429 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/main/java/org/jfree/chart/ChartFactory.java

            plot.setToolTipGenerator(new StandardPieToolTipGenerator(locale));
        }

        List keys = dataset.getKeys();
        DefaultPieDataset series = null;
        if (showDifference) {
            series = new DefaultPieDataset();
        }

        double colorPerPercent = 255.0 / percentDiffForMaxScale;
        for (Iterator it = keys.iterator(); it.hasNext();) {
            Comparable key = (Comparable) it.next();
            Number newValue = dataset.getValue(key);
            Number oldValue = previousDataset.getValue(key);

            if (oldValue == null) {
                if (greenForIncrease) {
                    plot.setSectionPaint(key, Color.GREEN);
                }
                else {
                    plot.setSectionPaint(key, Color.RED);
                }
                if (showDifference) {
                    assert series != null; // suppresses compiler warning
                    series.setValue(key + " (+100%)", newValue);
                }
            }
            else {
                double percentChange = (newValue.doubleValue()
                        / oldValue.doubleValue() - 1.0) * 100.0;
                double shade
                    = (Math.abs(percentChange) >= percentDiffForMaxScale ? 255
                    : Math.abs(percentChange) * colorPerPercent);
                if (greenForIncrease
                        && newValue.doubleValue() > oldValue.doubleValue()
                        || !greenForIncrease && newValue.doubleValue()
                        < oldValue.doubleValue()) {
                    plot.setSectionPaint(key, new Color(0, (int) shade, 0));
                }
                else {
                    plot.setSectionPaint(key, new Color((int) shade, 0, 0));
                }
                if (showDifference) {
                    assert series != null; // suppresses compiler warning
                    series.setValue(key + " (" + (percentChange >= 0 ? "+" : "")
                            + NumberFormat.getPercentInstance().format(
                            percentChange / 100.0) + ")", newValue);
                }
            }
        }

        if (showDifference) {
            plot.setDataset(series);
        }

        JFreeChart chart =  new JFreeChart(title,
                JFreeChart.DEFAULT_TITLE_FONT, plot, legend);

        if (subTitle) {
            TextTitle subtitle = new TextTitle("Bright " + (greenForIncrease 
                    ? "red" : "green") + "=change >=-" + percentDiffForMaxScale
                    + "%, Bright " + (!greenForIncrease ? "red" : "green")
                    + "=change >=+" + percentDiffForMaxScale + "%",
                    new Font("SansSerif", Font.PLAIN, 10));
            chart.addSubtitle(subtitle);
        }
        currentTheme.apply(chart);
        return chart;
    }

    /**
     * Creates a pie chart with default settings that compares 2 datasets.
     * The colour of each section will be determined by the move from the value
     * for the same key in {@code previousDataset}. ie if value1 &gt; 
     * value2 then the section will be in green (unless 
     * {@code greenForIncrease} is {@code false}, in which case it 
     * would be {@code red}). Each section can have a shade of red or 
     * green as the difference can be tailored between 0% (black) and 
     * percentDiffForMaxScale% (bright red/green).
     * <p>
     * For instance if {@code percentDiffForMaxScale} is 10 (10%), a
     * difference of 5% will have a half shade of red/green, a difference of
     * 10% or more will have a maximum shade/brightness of red/green.
     * <P>
     * The chart object returned by this method uses a {@link PiePlot} instance
     * as the plot.
     * <p>
     * Written by <a href="mailto:opensource@objectlab.co.uk">Benoit
     * Xhenseval</a>.
     *
     * @param title  the chart title ({@code null} permitted).
     * @param dataset  the dataset for the chart ({@code null} permitted).
     * @param previousDataset  the dataset for the last run, this will be used
     *                         to compare each key in the dataset
     * @param percentDiffForMaxScale scale goes from bright red/green to black,
     *                               percentDiffForMaxScale indicate the change
     *                               required to reach top scale.
     * @param greenForIncrease  an increase since previousDataset will be
     *                          displayed in green (decrease red) if true.
     * @param legend  a flag specifying whether or not a legend is required.
     * @param tooltips  configure chart to generate tool tips?
     * @param urls  configure chart to generate URLs?
     * @param subTitle displays a subtitle with colour scheme if true
     * @param showDifference  create a new dataset that will show the %
     *                        difference between the two datasets.
     *
     * @return A pie chart.
     */
    public static JFreeChart createPieChart(String title, PieDataset dataset,
=====================================================================
Found a 84 line (381 tokens) duplication in the following files: 
Starting at line 74 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/test/java/org/jfree/chart/BarChartTest.java
Starting at line 74 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/test/java/org/jfree/chart/StackedAreaChartTest.java
Starting at line 73 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/test/java/org/jfree/chart/StackedBarChartTest.java

        this.chart = createBarChart();
    }

    /**
     * Draws the chart with a null info object to make sure that no exceptions
     * are thrown (a problem that was occurring at one point).
     */
    @Test
    public void testDrawWithNullInfo() {
        try {
            BufferedImage image = new BufferedImage(200 , 100,
                    BufferedImage.TYPE_INT_RGB);
            Graphics2D g2 = image.createGraphics();
            this.chart.draw(g2, new Rectangle2D.Double(0, 0, 200, 100), null,
                    null);
            g2.dispose();
        }
        catch (Exception e) {
            fail("There should be no exception.");
        }
    }

    /**
     * Replaces the chart's dataset and then checks that the new dataset is OK.
     */
    @Test
    public void testReplaceDataset() {

        // create a dataset...
        Number[][] data = new Integer[][] {{-30, -20}, {-10, 10}, {20, 30}};

        CategoryDataset<String, String> newData 
                = DatasetUtils.createCategoryDataset("S", "C", data);

        LocalListener l = new LocalListener();
        this.chart.addChangeListener(l);
        @SuppressWarnings("unchecked")
        CategoryPlot<String, String> plot = (CategoryPlot) this.chart.getPlot();
        plot.setDataset(newData);
        assertTrue(l.flag);
        ValueAxis axis = plot.getRangeAxis();
        Range range = axis.getRange();
        assertTrue(range.getLowerBound() <= -30,
                "Expecting the lower bound of the range to be around -30: " + range.getLowerBound());
        assertTrue(range.getUpperBound() >= 30, 
                "Expecting the upper bound of the range to be around 30: " + range.getUpperBound());
    }

    /**
     * Check that setting a tool tip generator for a series does override the
     * default generator.
     */
    @Test
    public void testSetSeriesToolTipGenerator() {
        CategoryPlot<?, ?> plot = (CategoryPlot) this.chart.getPlot();
        CategoryItemRenderer renderer = plot.getRenderer();
        StandardCategoryToolTipGenerator tt
                = new StandardCategoryToolTipGenerator();
        renderer.setSeriesToolTipGenerator(0, tt);
        CategoryToolTipGenerator tt2 = renderer.getToolTipGenerator(0, 0);
        assertSame(tt2, tt);
    }

    /**
     * Check that setting a URL generator for a series does override the
     * default generator.
     */
    @Test
    public void testSetSeriesURLGenerator() {
        CategoryPlot<?, ?> plot = (CategoryPlot) this.chart.getPlot();
        CategoryItemRenderer renderer = plot.getRenderer();
        StandardCategoryURLGenerator url1
                = new StandardCategoryURLGenerator();
        renderer.setSeriesItemURLGenerator(0, url1);
        CategoryURLGenerator url2 = renderer.getItemURLGenerator(0, 0);
        assertSame(url2, url1);
    }

    /**
     * Create a bar chart with sample data in the range -3 to +3.
     *
     * @return The chart.
     */
    private static JFreeChart createBarChart() {
=====================================================================
Found a 85 line (380 tokens) duplication in the following files: 
Starting at line 62 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/test/java/org/jfree/chart/TimeSeriesChartTest.java
Starting at line 62 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/test/java/org/jfree/chart/XYLineChartTest.java
Starting at line 63 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/test/java/org/jfree/chart/XYStepChartTest.java

public class TimeSeriesChartTest {

    /** A chart. */
    private JFreeChart chart;

    /**
     * Common test setup.
     */
    @BeforeEach
    public void setUp() {
        this.chart = createChart();
    }

    /**
     * Draws the chart with a null info object to make sure that no exceptions
     * are thrown (a problem that was occurring at one point).
     */
    @Test
    public void testDrawWithNullInfo() {
        try {
            BufferedImage image = new BufferedImage(200 , 100,
                    BufferedImage.TYPE_INT_RGB);
            Graphics2D g2 = image.createGraphics();
            this.chart.draw(g2, new Rectangle2D.Double(0, 0, 200, 100), null,
                    null);
            g2.dispose();
        }
        catch (Exception e) {
          fail("No exception should be triggered.");
        }
    }

    /**
     * Replaces the dataset and checks that it has changed as expected.
     */
    @Test
    public void testReplaceDataset() {

        // create a dataset...
        XYSeries<String> series1 = new XYSeries<>("Series 1");
        series1.add(10.0, 10.0);
        series1.add(20.0, 20.0);
        series1.add(30.0, 30.0);
        XYDataset<String> dataset = new XYSeriesCollection<>(series1);

        LocalListener l = new LocalListener();
        this.chart.addChangeListener(l);
        @SuppressWarnings("unchecked")
        XYPlot<String> plot = (XYPlot) this.chart.getPlot();
        plot.setDataset(dataset);
        assertTrue(l.flag);
        ValueAxis axis = plot.getRangeAxis();
        Range range = axis.getRange();
        assertTrue(range.getLowerBound() <= 10, 
                "Expecting the lower bound of the range to be around 10: " + range.getLowerBound());
        assertTrue(range.getUpperBound() >= 30, 
                "Expecting the upper bound of the range to be around 30: " + range.getUpperBound());
    }

    /**
     * Check that setting a tool tip generator for a series does override the
     * default generator.
     */
    @Test
    public void testSetSeriesToolTipGenerator() {
        XYPlot<?> plot = (XYPlot) this.chart.getPlot();
        XYItemRenderer renderer = plot.getRenderer();
        StandardXYToolTipGenerator tt = new StandardXYToolTipGenerator();
        renderer.setSeriesToolTipGenerator(0, tt);
        XYToolTipGenerator tt2 = renderer.getToolTipGenerator(0, 0);
        assertSame(tt2, tt);
    }

    /**
     * Create a horizontal bar chart with sample data in the range -3 to +3.
     *
     * @return The chart.
     */
    private static JFreeChart createChart() {
        XYSeries<String> series1 = new XYSeries<>("Series 1");
        series1.add(1.0, 1.0);
        series1.add(2.0, 2.0);
        series1.add(3.0, 3.0);
        XYDataset<String> dataset = new XYSeriesCollection<>(series1);
        return ChartFactory.createTimeSeriesChart("XY Line Chart", 
=====================================================================
Found a 37 line (368 tokens) duplication in the following files: 
Starting at line 2742 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/main/java/org/jfree/chart/plot/pie/PiePlot.java
Starting at line 2793 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/main/java/org/jfree/chart/plot/pie/PiePlot.java

        double targetX = anchorX - record.getGap();
        double targetY = record.getAllocatedY();

        if (this.labelLinksVisible) {
            double theta = record.getAngle();
            double linkX = state.getPieCenterX() + Math.cos(theta)
                    * state.getPieWRadius() * record.getLinkPercent();
            double linkY = state.getPieCenterY() - Math.sin(theta)
                    * state.getPieHRadius() * record.getLinkPercent();
            double elbowX = state.getPieCenterX() + Math.cos(theta)
                    * state.getLinkArea().getWidth() / 2.0;
            double elbowY = state.getPieCenterY() - Math.sin(theta)
                    * state.getLinkArea().getHeight() / 2.0;
            double anchorY = elbowY;
            g2.setPaint(this.labelLinkPaint);
            g2.setStroke(this.labelLinkStroke);
            PieLabelLinkStyle style = getLabelLinkStyle();
            if (style.equals(PieLabelLinkStyle.STANDARD)) {
                g2.draw(new Line2D.Double(linkX, linkY, elbowX, elbowY));
                g2.draw(new Line2D.Double(anchorX, anchorY, elbowX, elbowY));
                g2.draw(new Line2D.Double(anchorX, anchorY, targetX, targetY));
            }
            else if (style.equals(PieLabelLinkStyle.QUAD_CURVE)) {
                QuadCurve2D q = new QuadCurve2D.Float();
                q.setCurve(targetX, targetY, anchorX, anchorY, elbowX, elbowY);
                g2.draw(q);
                g2.draw(new Line2D.Double(elbowX, elbowY, linkX, linkY));
            }
            else if (style.equals(PieLabelLinkStyle.CUBIC_CURVE)) {
                CubicCurve2D c = new CubicCurve2D .Float();
                c.setCurve(targetX, targetY, anchorX, anchorY, elbowX, elbowY,
                        linkX, linkY);
                g2.draw(c);
            }
        }
        TextBox tb = record.getLabel();
        tb.draw(g2, (float) targetX, (float) targetY, RectangleAnchor.RIGHT);
=====================================================================
Found a 98 line (364 tokens) duplication in the following files: 
Starting at line 174 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/main/java/org/jfree/chart/renderer/category/GradientBarPainter.java
Starting at line 89 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/main/java/org/jfree/chart/renderer/category/StandardBarPainter.java

        if (renderer.isDrawBarOutline()
            /*&& state.getBarWidth() > renderer.BAR_OUTLINE_WIDTH_THRESHOLD*/) {
            Stroke stroke = renderer.getItemOutlineStroke(row, column);
            Paint paint = renderer.getItemOutlinePaint(row, column);
            if (stroke != null && paint != null) {
                g2.setStroke(stroke);
                g2.setPaint(paint);
                g2.draw(bar);
            }
        }

    }

    /**
     * Paints a single bar instance.
     *
     * @param g2  the graphics target.
     * @param renderer  the renderer.
     * @param row  the row index.
     * @param column  the column index.
     * @param bar  the bar
     * @param base  indicates which side of the rectangle is the base of the
     *              bar.
     * @param pegShadow  peg the shadow to the base of the bar?
     */
    @Override
    public void paintBarShadow(Graphics2D g2, BarRenderer renderer, int row,
            int column, RectangularShape bar, RectangleEdge base,
            boolean pegShadow) {

        // handle a special case - if the bar colour has alpha == 0, it is
        // invisible so we shouldn't draw any shadow
        Paint itemPaint = renderer.getItemPaint(row, column);
        if (itemPaint instanceof Color) {
            Color c = (Color) itemPaint;
            if (c.getAlpha() == 0) {
                return;
            }
        }

        RectangularShape shadow = createShadow(bar, renderer.getShadowXOffset(),
                renderer.getShadowYOffset(), base, pegShadow);
        g2.setPaint(renderer.getShadowPaint());
        g2.fill(shadow);

    }

    /**
     * Creates a shadow for the bar.
     *
     * @param bar  the bar shape.
     * @param xOffset  the x-offset for the shadow.
     * @param yOffset  the y-offset for the shadow.
     * @param base  the edge that is the base of the bar.
     * @param pegShadow  peg the shadow to the base?
     *
     * @return A rectangle for the shadow.
     */
    private Rectangle2D createShadow(RectangularShape bar, double xOffset,
            double yOffset, RectangleEdge base, boolean pegShadow) {
        double x0 = bar.getMinX();
        double x1 = bar.getMaxX();
        double y0 = bar.getMinY();
        double y1 = bar.getMaxY();
        if (base == RectangleEdge.TOP) {
            x0 += xOffset;
            x1 += xOffset;
            if (!pegShadow) {
                y0 += yOffset;
            }
            y1 += yOffset;
        }
        else if (base == RectangleEdge.BOTTOM) {
            x0 += xOffset;
            x1 += xOffset;
            y0 += yOffset;
            if (!pegShadow) {
                y1 += yOffset;
            }
        }
        else if (base == RectangleEdge.LEFT) {
            if (!pegShadow) {
                x0 += xOffset;
            }
            x1 += xOffset;
            y0 += yOffset;
            y1 += yOffset;
        }
        else if (base == RectangleEdge.RIGHT) {
            x0 += xOffset;
            if (!pegShadow) {
                x1 += xOffset;
            }
            y0 += yOffset;
            y1 += yOffset;
        }
        return new Rectangle2D.Double(x0, y0, (x1 - x0), (y1 - y0));
    }
=====================================================================
Found a 83 line (364 tokens) duplication in the following files: 
Starting at line 62 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/test/java/org/jfree/chart/TimeSeriesChartTest.java
Starting at line 64 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/test/java/org/jfree/chart/XYBarChartTest.java
Starting at line 62 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/test/java/org/jfree/chart/XYLineChartTest.java
Starting at line 63 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/test/java/org/jfree/chart/XYStepChartTest.java

public class TimeSeriesChartTest {

    /** A chart. */
    private JFreeChart chart;

    /**
     * Common test setup.
     */
    @BeforeEach
    public void setUp() {
        this.chart = createChart();
    }

    /**
     * Draws the chart with a null info object to make sure that no exceptions
     * are thrown (a problem that was occurring at one point).
     */
    @Test
    public void testDrawWithNullInfo() {
        try {
            BufferedImage image = new BufferedImage(200 , 100,
                    BufferedImage.TYPE_INT_RGB);
            Graphics2D g2 = image.createGraphics();
            this.chart.draw(g2, new Rectangle2D.Double(0, 0, 200, 100), null,
                    null);
            g2.dispose();
        }
        catch (Exception e) {
          fail("No exception should be triggered.");
        }
    }

    /**
     * Replaces the dataset and checks that it has changed as expected.
     */
    @Test
    public void testReplaceDataset() {

        // create a dataset...
        XYSeries<String> series1 = new XYSeries<>("Series 1");
        series1.add(10.0, 10.0);
        series1.add(20.0, 20.0);
        series1.add(30.0, 30.0);
        XYDataset<String> dataset = new XYSeriesCollection<>(series1);

        LocalListener l = new LocalListener();
        this.chart.addChangeListener(l);
        @SuppressWarnings("unchecked")
        XYPlot<String> plot = (XYPlot) this.chart.getPlot();
        plot.setDataset(dataset);
        assertTrue(l.flag);
        ValueAxis axis = plot.getRangeAxis();
        Range range = axis.getRange();
        assertTrue(range.getLowerBound() <= 10, 
                "Expecting the lower bound of the range to be around 10: " + range.getLowerBound());
        assertTrue(range.getUpperBound() >= 30, 
                "Expecting the upper bound of the range to be around 30: " + range.getUpperBound());
    }

    /**
     * Check that setting a tool tip generator for a series does override the
     * default generator.
     */
    @Test
    public void testSetSeriesToolTipGenerator() {
        XYPlot<?> plot = (XYPlot) this.chart.getPlot();
        XYItemRenderer renderer = plot.getRenderer();
        StandardXYToolTipGenerator tt = new StandardXYToolTipGenerator();
        renderer.setSeriesToolTipGenerator(0, tt);
        XYToolTipGenerator tt2 = renderer.getToolTipGenerator(0, 0);
        assertSame(tt2, tt);
    }

    /**
     * Create a horizontal bar chart with sample data in the range -3 to +3.
     *
     * @return The chart.
     */
    private static JFreeChart createChart() {
        XYSeries<String> series1 = new XYSeries<>("Series 1");
        series1.add(1.0, 1.0);
        series1.add(2.0, 2.0);
        series1.add(3.0, 3.0);
=====================================================================
Found a 97 line (362 tokens) duplication in the following files: 
Starting at line 174 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/main/java/org/jfree/chart/renderer/xy/GradientXYBarPainter.java
Starting at line 89 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/main/java/org/jfree/chart/renderer/xy/StandardXYBarPainter.java

        if (renderer.isDrawBarOutline()) {
            Stroke stroke = renderer.getItemOutlineStroke(row, column);
            Paint paint = renderer.getItemOutlinePaint(row, column);
            if (stroke != null && paint != null) {
                g2.setStroke(stroke);
                g2.setPaint(paint);
                g2.draw(bar);
            }
        }

    }

    /**
     * Paints a single bar instance.
     *
     * @param g2  the graphics target.
     * @param renderer  the renderer.
     * @param row  the row index.
     * @param column  the column index.
     * @param bar  the bar
     * @param base  indicates which side of the rectangle is the base of the
     *              bar.
     * @param pegShadow  peg the shadow to the base of the bar?
     */
    @Override
    public void paintBarShadow(Graphics2D g2, XYBarRenderer renderer, int row,
            int column, RectangularShape bar, RectangleEdge base,
            boolean pegShadow) {

        // handle a special case - if the bar colour has alpha == 0, it is
        // invisible so we shouldn't draw any shadow
        Paint itemPaint = renderer.getItemPaint(row, column);
        if (itemPaint instanceof Color) {
            Color c = (Color) itemPaint;
            if (c.getAlpha() == 0) {
                return;
            }
        }

        RectangularShape shadow = createShadow(bar, renderer.getShadowXOffset(),
                renderer.getShadowYOffset(), base, pegShadow);
        g2.setPaint(Color.GRAY);
        g2.fill(shadow);

    }

    /**
     * Creates a shadow for the bar.
     *
     * @param bar  the bar shape.
     * @param xOffset  the x-offset for the shadow.
     * @param yOffset  the y-offset for the shadow.
     * @param base  the edge that is the base of the bar.
     * @param pegShadow  peg the shadow to the base?
     *
     * @return A rectangle for the shadow.
     */
    private Rectangle2D createShadow(RectangularShape bar, double xOffset,
            double yOffset, RectangleEdge base, boolean pegShadow) {
        double x0 = bar.getMinX();
        double x1 = bar.getMaxX();
        double y0 = bar.getMinY();
        double y1 = bar.getMaxY();
        if (base == RectangleEdge.TOP) {
            x0 += xOffset;
            x1 += xOffset;
            if (!pegShadow) {
                y0 += yOffset;
            }
            y1 += yOffset;
        }
        else if (base == RectangleEdge.BOTTOM) {
            x0 += xOffset;
            x1 += xOffset;
            y0 += yOffset;
            if (!pegShadow) {
                y1 += yOffset;
            }
        }
        else if (base == RectangleEdge.LEFT) {
            if (!pegShadow) {
                x0 += xOffset;
            }
            x1 += xOffset;
            y0 += yOffset;
            y1 += yOffset;
        }
        else if (base == RectangleEdge.RIGHT) {
            x0 += xOffset;
            if (!pegShadow) {
                x1 += xOffset;
            }
            y0 += yOffset;
            y1 += yOffset;
        }
        return new Rectangle2D.Double(x0, y0, (x1 - x0), (y1 - y0));
    }
=====================================================================
Found a 129 line (339 tokens) duplication in the following files: 
Starting at line 147 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/main/java/org/jfree/chart/block/CenterArrangement.java
Starting at line 216 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/main/java/org/jfree/chart/block/FlowArrangement.java

        return new Size2D((width - s.width) / 2.0, s.height);
    }

    /**
     * Arranges the blocks in the container with a fixed with and a range
     * constraint on the height.
     *
     * @param container  the container.
     * @param g2  the graphics device.
     * @param constraint  the constraint.
     *
     * @return The size following the arrangement.
     */
    protected Size2D arrangeFR(BlockContainer container, Graphics2D g2,
                               RectangleConstraint constraint) {

        Size2D s = arrangeFN(container, g2, constraint);
        if (constraint.getHeightRange().contains(s.height)) {
            return s;
        }
        else {
            RectangleConstraint c = constraint.toFixedHeight(
                    constraint.getHeightRange().constrain(s.getHeight()));
            return arrangeFF(container, g2, c);
        }
    }

    /**
     * Arranges the blocks in the container with the overall height and width
     * specified as fixed constraints.
     *
     * @param container  the container.
     * @param g2  the graphics device.
     * @param constraint  the constraint.
     *
     * @return The size following the arrangement.
     */
    protected Size2D arrangeFF(BlockContainer container, Graphics2D g2,
                               RectangleConstraint constraint) {

        // TODO: implement this properly
        return arrangeFN(container, g2, constraint);
    }

    /**
     * Arranges the blocks with the overall width and height to fit within
     * specified ranges.
     *
     * @param container  the container.
     * @param g2  the graphics device.
     * @param constraint  the constraint.
     *
     * @return The size after the arrangement.
     */
    protected Size2D arrangeRR(BlockContainer container, Graphics2D g2,
                               RectangleConstraint constraint) {

        // first arrange without constraints, and see if this fits within
        // the required ranges...
        Size2D s1 = arrangeNN(container, g2);
        if (constraint.getWidthRange().contains(s1.width)) {
            return s1;  // TODO: we didn't check the height yet
        }
        else {
            RectangleConstraint c = constraint.toFixedWidth(
                    constraint.getWidthRange().getUpperBound());
            return arrangeFR(container, g2, c);
        }
    }

    /**
     * Arranges the blocks in the container with a range constraint on the
     * width and a fixed height.
     *
     * @param container  the container.
     * @param g2  the graphics device.
     * @param constraint  the constraint.
     *
     * @return The size following the arrangement.
     */
    protected Size2D arrangeRF(BlockContainer container, Graphics2D g2,
                               RectangleConstraint constraint) {

        Size2D s = arrangeNF(container, g2, constraint);
        if (constraint.getWidthRange().contains(s.width)) {
            return s;
        }
        else {
            RectangleConstraint c = constraint.toFixedWidth(
                    constraint.getWidthRange().constrain(s.getWidth()));
            return arrangeFF(container, g2, c);
        }
    }

    /**
     * Arranges the block with a range constraint on the width, and no
     * constraint on the height.
     *
     * @param container  the container.
     * @param g2  the graphics device.
     * @param constraint  the constraint.
     *
     * @return The size following the arrangement.
     */
    protected Size2D arrangeRN(BlockContainer container, Graphics2D g2,
                               RectangleConstraint constraint) {
        // first arrange without constraints, then see if the width fits
        // within the required range...if not, call arrangeFN() at max width
        Size2D s1 = arrangeNN(container, g2);
        if (constraint.getWidthRange().contains(s1.width)) {
            return s1;
        }
        else {
            RectangleConstraint c = constraint.toFixedWidth(
                    constraint.getWidthRange().getUpperBound());
            return arrangeFN(container, g2, c);
        }
    }

    /**
     * Arranges the blocks without any constraints.  This puts all blocks
     * into a single row.
     *
     * @param container  the container.
     * @param g2  the graphics device.
     *
     * @return The size after the arrangement.
     */
    protected Size2D arrangeNN(BlockContainer container, Graphics2D g2) {
=====================================================================
Found a 36 line (319 tokens) duplication in the following files: 
Starting at line 372 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/main/java/org/jfree/chart/annotations/CategoryPointerAnnotation.java
Starting at line 372 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/main/java/org/jfree/chart/annotations/XYPointerAnnotation.java

        double j2DY = rangeAxis.valueToJava2D(getValue(), dataArea, rangeEdge);
        if (orientation == PlotOrientation.HORIZONTAL) {
            double temp = j2DX;
            j2DX = j2DY;
            j2DY = temp;
        }
        double startX = j2DX + Math.cos(this.angle) * this.baseRadius;
        double startY = j2DY + Math.sin(this.angle) * this.baseRadius;

        double endX = j2DX + Math.cos(this.angle) * this.tipRadius;
        double endY = j2DY + Math.sin(this.angle) * this.tipRadius;

        double arrowBaseX = endX + Math.cos(this.angle) * this.arrowLength;
        double arrowBaseY = endY + Math.sin(this.angle) * this.arrowLength;

        double arrowLeftX = arrowBaseX
            + Math.cos(this.angle + Math.PI / 2.0) * this.arrowWidth;
        double arrowLeftY = arrowBaseY
            + Math.sin(this.angle + Math.PI / 2.0) * this.arrowWidth;

        double arrowRightX = arrowBaseX
            - Math.cos(this.angle + Math.PI / 2.0) * this.arrowWidth;
        double arrowRightY = arrowBaseY
            - Math.sin(this.angle + Math.PI / 2.0) * this.arrowWidth;

        GeneralPath arrow = new GeneralPath();
        arrow.moveTo((float) endX, (float) endY);
        arrow.lineTo((float) arrowLeftX, (float) arrowLeftY);
        arrow.lineTo((float) arrowRightX, (float) arrowRightY);
        arrow.closePath();

        g2.setStroke(this.arrowStroke);
        g2.setPaint(this.arrowPaint);
        Line2D line = new Line2D.Double(startX, startY, arrowBaseX, arrowBaseY);
        g2.draw(line);
        g2.fill(arrow);
=====================================================================
Found a 64 line (303 tokens) duplication in the following files: 
Starting at line 94 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/test/java/org/jfree/chart/BarChartTest.java
Starting at line 90 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/test/java/org/jfree/chart/LineChartTest.java
Starting at line 94 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/test/java/org/jfree/chart/StackedAreaChartTest.java
Starting at line 93 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/test/java/org/jfree/chart/StackedBarChartTest.java

    }

    /**
     * Replaces the chart's dataset and then checks that the new dataset is OK.
     */
    @Test
    public void testReplaceDataset() {

        // create a dataset...
        Number[][] data = new Integer[][] {{-30, -20}, {-10, 10}, {20, 30}};

        CategoryDataset<String, String> newData 
                = DatasetUtils.createCategoryDataset("S", "C", data);

        LocalListener l = new LocalListener();
        this.chart.addChangeListener(l);
        @SuppressWarnings("unchecked")
        CategoryPlot<String, String> plot = (CategoryPlot) this.chart.getPlot();
        plot.setDataset(newData);
        assertTrue(l.flag);
        ValueAxis axis = plot.getRangeAxis();
        Range range = axis.getRange();
        assertTrue(range.getLowerBound() <= -30,
                "Expecting the lower bound of the range to be around -30: " + range.getLowerBound());
        assertTrue(range.getUpperBound() >= 30, 
                "Expecting the upper bound of the range to be around 30: " + range.getUpperBound());
    }

    /**
     * Check that setting a tool tip generator for a series does override the
     * default generator.
     */
    @Test
    public void testSetSeriesToolTipGenerator() {
        CategoryPlot<?, ?> plot = (CategoryPlot) this.chart.getPlot();
        CategoryItemRenderer renderer = plot.getRenderer();
        StandardCategoryToolTipGenerator tt
                = new StandardCategoryToolTipGenerator();
        renderer.setSeriesToolTipGenerator(0, tt);
        CategoryToolTipGenerator tt2 = renderer.getToolTipGenerator(0, 0);
        assertSame(tt2, tt);
    }

    /**
     * Check that setting a URL generator for a series does override the
     * default generator.
     */
    @Test
    public void testSetSeriesURLGenerator() {
        CategoryPlot<?, ?> plot = (CategoryPlot) this.chart.getPlot();
        CategoryItemRenderer renderer = plot.getRenderer();
        StandardCategoryURLGenerator url1
                = new StandardCategoryURLGenerator();
        renderer.setSeriesItemURLGenerator(0, url1);
        CategoryURLGenerator url2 = renderer.getItemURLGenerator(0, 0);
        assertSame(url2, url1);
    }

    /**
     * Create a bar chart with sample data in the range -3 to +3.
     *
     * @return The chart.
     */
    private static JFreeChart createBarChart() {
=====================================================================
Found a 83 line (301 tokens) duplication in the following files: 
Starting at line 77 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/main/java/org/jfree/chart/swing/editor/DefaultLogAxisEditor.java
Starting at line 91 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/main/java/org/jfree/chart/swing/editor/DefaultNumberAxisEditor.java

        JPanel tickUnitPanel = super.createTickUnitPanel();

        tickUnitPanel.add(new JLabel(localizationResources.getString(
                "Manual_TickUnit_value")));
        this.manualTickUnit = new JTextField(Double.toString(
                this.manualTickUnitValue));
        this.manualTickUnit.setEnabled(!isAutoTickUnitSelection());
        this.manualTickUnit.setActionCommand("TickUnitValue");
        this.manualTickUnit.addActionListener(this);
        this.manualTickUnit.addFocusListener(this);
        tickUnitPanel.add(this.manualTickUnit);
        tickUnitPanel.add(new JPanel());

        return tickUnitPanel;
    }

    /**
     * Handles actions from within the property panel.
     * 
     * @param event an event.
     */
    @Override
    public void actionPerformed(ActionEvent event) {
        String command = event.getActionCommand();
        if (command.equals("TickUnitValue")) {
            validateTickUnit();
        }
        else {
            // pass to the super-class for handling
            super.actionPerformed(event);
        }
    }

    @Override
    public void focusLost(FocusEvent event) {
        super.focusLost(event);
        if (event.getSource() == this.manualTickUnit) {
            validateTickUnit();
        }
    }

    /**
     * Toggles the auto-tick-unit setting.
     */
    @Override
    public void toggleAutoTick() {
        super.toggleAutoTick();
        if (isAutoTickUnitSelection()) {
            this.manualTickUnit.setText(Double.toString(this.manualTickUnitValue));
            this.manualTickUnit.setEnabled(false);
        }
        else {
            this.manualTickUnit.setEnabled(true);
        }
    }

    /**
     * Validates the tick unit entered.
     */
    public void validateTickUnit() {
        double newTickUnit;
        try {
            newTickUnit = Double.parseDouble(this.manualTickUnit.getText());
        }
        catch (NumberFormatException e) {
            newTickUnit = this.manualTickUnitValue;
        }

        if (newTickUnit > 0.0) {
            this.manualTickUnitValue = newTickUnit;
        }
        this.manualTickUnit.setText(Double.toString(this.manualTickUnitValue));
    }

    /**
     * Sets the properties of the specified axis to match the properties
     * defined on this panel.
     *
     * @param axis  the axis.
     */
    @Override
    public void setAxisProperties(Axis axis) {
        super.setAxisProperties(axis);
=====================================================================
Found a 56 line (299 tokens) duplication in the following files: 
Starting at line 1450 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/main/java/org/jfree/chart/axis/DateAxis.java
Starting at line 1566 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/main/java/org/jfree/chart/axis/DateAxis.java

    protected List<? extends Tick> refreshTicksHorizontal(Graphics2D g2,
                Rectangle2D dataArea, RectangleEdge edge) {

        List<DateTick> result = new ArrayList<>();

        Font tickLabelFont = getTickLabelFont();
        g2.setFont(tickLabelFont);

        if (isAutoTickUnitSelection()) {
            selectAutoTickUnit(g2, dataArea, edge);
        }

        DateTickUnit unit = getTickUnit();
        Date tickDate = calculateLowestVisibleTickValue(unit);
        Date upperDate = getMaximumDate();

        boolean hasRolled = false;
        while (tickDate.before(upperDate)) {
            // could add a flag to make the following correction optional...
            if (!hasRolled) {
                tickDate = correctTickDateForPosition(tickDate, unit,
                     this.tickMarkPosition);
            }

            long lowestTickTime = tickDate.getTime();
            long distance = unit.addToDate(tickDate, this.timeZone).getTime()
                    - lowestTickTime;
            int minorTickSpaces = getMinorTickCount();
            if (minorTickSpaces <= 0) {
                minorTickSpaces = unit.getMinorTickCount();
            }
            for (int minorTick = 1; minorTick < minorTickSpaces; minorTick++) {
                long minorTickTime = lowestTickTime - distance
                        * minorTick / minorTickSpaces;
                if (minorTickTime > 0 && getRange().contains(minorTickTime)
                        && (!isHiddenValue(minorTickTime))) {
                    result.add(new DateTick(TickType.MINOR,
                            new Date(minorTickTime), "", TextAnchor.TOP_CENTER,
                            TextAnchor.CENTER, 0.0));
                }
            }

            if (!isHiddenValue(tickDate.getTime())) {
                // work out the value, label and position
                String tickLabel;
                DateFormat formatter = getDateFormatOverride();
                if (formatter != null) {
                    tickLabel = formatter.format(tickDate);
                }
                else {
                    tickLabel = this.tickUnit.dateToString(tickDate);
                }
                TextAnchor anchor, rotationAnchor;
                double angle = 0.0;
                if (isVerticalTickLabels()) {
                    anchor = TextAnchor.CENTER_RIGHT;
=====================================================================
Found a 218 line (297 tokens) duplication in the following files: 
Starting at line 142 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/main/java/org/jfree/chart/annotations/CategoryPointerAnnotation.java
Starting at line 143 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/main/java/org/jfree/chart/annotations/XYPointerAnnotation.java

        super(label, key, value);
        this.angle = angle;
        this.tipRadius = DEFAULT_TIP_RADIUS;
        this.baseRadius = DEFAULT_BASE_RADIUS;
        this.arrowLength = DEFAULT_ARROW_LENGTH;
        this.arrowWidth = DEFAULT_ARROW_WIDTH;
        this.labelOffset = DEFAULT_LABEL_OFFSET;
        this.arrowStroke = new BasicStroke(1.0f);
        this.arrowPaint = Color.BLACK;

    }

    /**
     * Returns the angle of the arrow.
     *
     * @return The angle (in radians).
     *
     * @see #setAngle(double)
     */
    public double getAngle() {
        return this.angle;
    }

    /**
     * Sets the angle of the arrow and sends an
     * {@link AnnotationChangeEvent} to all registered listeners.
     *
     * @param angle  the angle (in radians).
     *
     * @see #getAngle()
     */
    public void setAngle(double angle) {
        this.angle = angle;
        fireAnnotationChanged();
    }

    /**
     * Returns the tip radius.
     *
     * @return The tip radius (in Java2D units).
     *
     * @see #setTipRadius(double)
     */
    public double getTipRadius() {
        return this.tipRadius;
    }

    /**
     * Sets the tip radius and sends an
     * {@link AnnotationChangeEvent} to all registered listeners.
     *
     * @param radius  the radius (in Java2D units).
     *
     * @see #getTipRadius()
     */
    public void setTipRadius(double radius) {
        this.tipRadius = radius;
        fireAnnotationChanged();
    }

    /**
     * Returns the base radius.
     *
     * @return The base radius (in Java2D units).
     *
     * @see #setBaseRadius(double)
     */
    public double getBaseRadius() {
        return this.baseRadius;
    }

    /**
     * Sets the base radius and sends an
     * {@link AnnotationChangeEvent} to all registered listeners.
     *
     * @param radius  the radius (in Java2D units).
     *
     * @see #getBaseRadius()
     */
    public void setBaseRadius(double radius) {
        this.baseRadius = radius;
        fireAnnotationChanged();
    }

    /**
     * Returns the label offset.
     *
     * @return The label offset (in Java2D units).
     *
     * @see #setLabelOffset(double)
     */
    public double getLabelOffset() {
        return this.labelOffset;
    }

    /**
     * Sets the label offset (from the arrow base, continuing in a straight
     * line, in Java2D units) and sends an
     * {@link AnnotationChangeEvent} to all registered listeners.
     *
     * @param offset  the offset (in Java2D units).
     *
     * @see #getLabelOffset()
     */
    public void setLabelOffset(double offset) {
        this.labelOffset = offset;
        fireAnnotationChanged();
    }

    /**
     * Returns the arrow length.
     *
     * @return The arrow length.
     *
     * @see #setArrowLength(double)
     */
    public double getArrowLength() {
        return this.arrowLength;
    }

    /**
     * Sets the arrow length and sends an
     * {@link AnnotationChangeEvent} to all registered listeners.
     *
     * @param length  the length.
     *
     * @see #getArrowLength()
     */
    public void setArrowLength(double length) {
        this.arrowLength = length;
        fireAnnotationChanged();
    }

    /**
     * Returns the arrow width.
     *
     * @return The arrow width (in Java2D units).
     *
     * @see #setArrowWidth(double)
     */
    public double getArrowWidth() {
        return this.arrowWidth;
    }

    /**
     * Sets the arrow width and sends an
     * {@link AnnotationChangeEvent} to all registered listeners.
     *
     * @param width  the width (in Java2D units).
     *
     * @see #getArrowWidth()
     */
    public void setArrowWidth(double width) {
        this.arrowWidth = width;
        fireAnnotationChanged();
    }

    /**
     * Returns the stroke used to draw the arrow line.
     *
     * @return The arrow stroke (never {@code null}).
     *
     * @see #setArrowStroke(Stroke)
     */
    public Stroke getArrowStroke() {
        return this.arrowStroke;
    }

    /**
     * Sets the stroke used to draw the arrow line and sends an
     * {@link AnnotationChangeEvent} to all registered listeners.
     *
     * @param stroke  the stroke ({@code null} not permitted).
     *
     * @see #getArrowStroke()
     */
    public void setArrowStroke(Stroke stroke) {
        Args.nullNotPermitted(stroke, "stroke");
        this.arrowStroke = stroke;
        fireAnnotationChanged();
    }

    /**
     * Returns the paint used for the arrow.
     *
     * @return The arrow paint (never {@code null}).
     *
     * @see #setArrowPaint(Paint)
     */
    public Paint getArrowPaint() {
        return this.arrowPaint;
    }

    /**
     * Sets the paint used for the arrow and sends an
     * {@link AnnotationChangeEvent} to all registered listeners.
     *
     * @param paint  the arrow paint ({@code null} not permitted).
     *
     * @see #getArrowPaint()
     */
    public void setArrowPaint(Paint paint) {
        Args.nullNotPermitted(paint, "paint");
        this.arrowPaint = paint;
        fireAnnotationChanged();
    }

    /**
     * Draws the annotation.
     *
     * @param g2  the graphics device.
     * @param plot  the plot.
     * @param dataArea  the data area.
     * @param domainAxis  the domain axis.
     * @param rangeAxis  the range axis.
     */
    @Override
    public void draw(Graphics2D g2, CategoryPlot plot, Rectangle2D dataArea,
=====================================================================
Found a 33 line (287 tokens) duplication in the following files: 
Starting at line 140 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/test/java/org/jfree/chart/renderer/xy/ClusteredXYBarRendererTest.java
Starting at line 320 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/test/java/org/jfree/data/xy/DefaultIntervalXYDatasetTest.java

        assertNull(renderer.findDomainBounds(null));
    }

    /**
     * Creates a sample dataset for testing.
     *
     * @return A sample dataset.
     */
    public DefaultIntervalXYDataset<String> createSampleDataset1() {
        DefaultIntervalXYDataset<String> d = new DefaultIntervalXYDataset<>();
        double[] x1 = new double[] {1.0, 2.0, 3.0};
        double[] x1Start = new double[] {0.9, 1.9, 2.9};
        double[] x1End = new double[] {1.1, 2.1, 3.1};
        double[] y1 = new double[] {4.0, 5.0, 6.0};
        double[] y1Start = new double[] {1.09, 2.09, 3.09};
        double[] y1End = new double[] {1.11, 2.11, 3.11};
        double[][] data1 = new double[][] {x1, x1Start, x1End, y1, y1Start,
                y1End};
        d.addSeries("S1", data1);

        double[] x2 = new double[] {11.0, 12.0, 13.0};
        double[] x2Start = new double[] {10.9, 11.9, 12.9};
        double[] x2End = new double[] {11.1, 12.1, 13.1};
        double[] y2 = new double[] {14.0, 15.0, 16.0};
        double[] y2Start = new double[] {11.09, 12.09, 13.09};
        double[] y2End = new double[] {11.11, 12.11, 13.11};
        double[][] data2 = new double[][] {x2, x2Start, x2End, y2, y2Start,
                y2End};
        d.addSeries("S2", data2);
        return d;
    }

}
=====================================================================
Found a 58 line (287 tokens) duplication in the following files: 
Starting at line 90 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/test/java/org/jfree/chart/ScatterPlotTest.java
Starting at line 90 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/test/java/org/jfree/chart/TimeSeriesChartTest.java
Starting at line 90 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/test/java/org/jfree/chart/XYLineChartTest.java
Starting at line 91 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/test/java/org/jfree/chart/XYStepChartTest.java

          fail("No exception should be thrown.");
        }
    }

    /**
     * Replaces the dataset and checks that it has changed as expected.
     */
    @Test
    public void testReplaceDataset() {

        // create a dataset...
        XYSeries<String> series1 = new XYSeries<>("Series 1");
        series1.add(10.0, 10.0);
        series1.add(20.0, 20.0);
        series1.add(30.0, 30.0);
        XYDataset<String> dataset = new XYSeriesCollection<>(series1);

        LocalListener l = new LocalListener();
        this.chart.addChangeListener(l);
        
        @SuppressWarnings("unchecked")
        XYPlot<String> plot = (XYPlot) this.chart.getPlot();
        plot.setDataset(dataset);
        assertTrue(l.flag);
        ValueAxis axis = plot.getRangeAxis();
        Range range = axis.getRange();
        assertTrue(range.getLowerBound() <= 10, 
                "Expecting the lower bound of the range to be around 10: " + range.getLowerBound());
        assertTrue(range.getUpperBound() >= 30, 
                "Expecting the upper bound of the range to be around 30: " + range.getUpperBound());
    }

    /**
     * Check that setting a tool tip generator for a series does override the
     * default generator.
     */
    @Test
    public void testSetSeriesToolTipGenerator() {
        XYPlot<?> plot = (XYPlot) this.chart.getPlot();
        XYItemRenderer renderer = plot.getRenderer();
        StandardXYToolTipGenerator tt = new StandardXYToolTipGenerator();
        renderer.setSeriesToolTipGenerator(0, tt);
        XYToolTipGenerator tt2 = renderer.getToolTipGenerator(0, 0);
        assertSame(tt2, tt);
    }

    /**
     * Create a horizontal bar chart with sample data in the range -3 to +3.
     *
     * @return The chart.
     */
    private static JFreeChart createChart() {
        XYSeries<String> series1 = new XYSeries<>("Series 1");
        series1.add(1.0, 1.0);
        series1.add(2.0, 2.0);
        series1.add(3.0, 3.0);
        XYDataset<String> dataset = new XYSeriesCollection<>(series1);
        return ChartFactory.createScatterPlot("Scatter Plot", "Domain",
=====================================================================
Found a 47 line (278 tokens) duplication in the following files: 
Starting at line 291 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/main/java/org/jfree/chart/renderer/category/StatisticalBarRenderer.java
Starting at line 439 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/main/java/org/jfree/chart/renderer/category/StatisticalBarRenderer.java

        double rectWidth = Math.abs(transY2 - transY1);

        Rectangle2D bar = new Rectangle2D.Double(rectX, rectY, rectWidth,
                rectHeight);
        Paint itemPaint = getItemPaint(row, column);
        GradientPaintTransformer t = getGradientPaintTransformer();
        if (t != null && itemPaint instanceof GradientPaint) {
            itemPaint = t.transform((GradientPaint) itemPaint, bar);
        }
        g2.setPaint(itemPaint);
        g2.fill(bar);

        // draw the outline...
        if (isDrawBarOutline()
                && state.getBarWidth() > BAR_OUTLINE_WIDTH_THRESHOLD) {
            Stroke stroke = getItemOutlineStroke(row, column);
            Paint paint = getItemOutlinePaint(row, column);
            if (stroke != null && paint != null) {
                g2.setStroke(stroke);
                g2.setPaint(paint);
                g2.draw(bar);
            }
        }

        // standard deviation lines
        Number n = dataset.getStdDevValue(row, column);
        if (n != null) {
            double valueDelta = n.doubleValue();
            double highVal = rangeAxis.valueToJava2D(meanValue.doubleValue()
                    + valueDelta, dataArea, yAxisLocation);
            double lowVal = rangeAxis.valueToJava2D(meanValue.doubleValue()
                    - valueDelta, dataArea, yAxisLocation);

            if (this.errorIndicatorPaint != null) {
                g2.setPaint(this.errorIndicatorPaint);
            }
            else {
                g2.setPaint(getItemOutlinePaint(row, column));
            }
            if (this.errorIndicatorStroke != null) {
                g2.setStroke(this.errorIndicatorStroke);
            }
            else {
                g2.setStroke(getItemOutlineStroke(row, column));
            }
            Line2D line;
            line = new Line2D.Double(lowVal, rectY + rectHeight / 2.0d,
=====================================================================
Found a 56 line (271 tokens) duplication in the following files: 
Starting at line 90 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/test/java/org/jfree/chart/ScatterPlotTest.java
Starting at line 92 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/test/java/org/jfree/chart/XYBarChartTest.java

          fail("No exception should be thrown.");
        }
    }

    /**
     * Replaces the dataset and checks that it has changed as expected.
     */
    @Test
    public void testReplaceDataset() {

        // create a dataset...
        XYSeries<String> series1 = new XYSeries<>("Series 1");
        series1.add(10.0, 10.0);
        series1.add(20.0, 20.0);
        series1.add(30.0, 30.0);
        XYDataset<String> dataset = new XYSeriesCollection<>(series1);

        LocalListener l = new LocalListener();
        this.chart.addChangeListener(l);
        
        @SuppressWarnings("unchecked")
        XYPlot<String> plot = (XYPlot) this.chart.getPlot();
        plot.setDataset(dataset);
        assertTrue(l.flag);
        ValueAxis axis = plot.getRangeAxis();
        Range range = axis.getRange();
        assertTrue(range.getLowerBound() <= 10, 
                "Expecting the lower bound of the range to be around 10: " + range.getLowerBound());
        assertTrue(range.getUpperBound() >= 30, 
                "Expecting the upper bound of the range to be around 30: " + range.getUpperBound());
    }

    /**
     * Check that setting a tool tip generator for a series does override the
     * default generator.
     */
    @Test
    public void testSetSeriesToolTipGenerator() {
        XYPlot<?> plot = (XYPlot) this.chart.getPlot();
        XYItemRenderer renderer = plot.getRenderer();
        StandardXYToolTipGenerator tt = new StandardXYToolTipGenerator();
        renderer.setSeriesToolTipGenerator(0, tt);
        XYToolTipGenerator tt2 = renderer.getToolTipGenerator(0, 0);
        assertSame(tt2, tt);
    }

    /**
     * Create a horizontal bar chart with sample data in the range -3 to +3.
     *
     * @return The chart.
     */
    private static JFreeChart createChart() {
        XYSeries<String> series1 = new XYSeries<>("Series 1");
        series1.add(1.0, 1.0);
        series1.add(2.0, 2.0);
        series1.add(3.0, 3.0);
=====================================================================
Found a 75 line (266 tokens) duplication in the following files: 
Starting at line 365 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/main/java/org/jfree/chart/renderer/xy/XYAreaRenderer.java
Starting at line 174 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/main/java/org/jfree/chart/renderer/xy/XYAreaRenderer2.java

    }

    /**
     * Returns a default legend item for the specified series.  Subclasses
     * should override this method to generate customised items.
     *
     * @param datasetIndex  the dataset index (zero-based).
     * @param series  the series index (zero-based).
     *
     * @return A legend item for the series.
     */
    @Override
    public LegendItem getLegendItem(int datasetIndex, int series) {
        LegendItem result = null;
        XYPlot xyplot = getPlot();
        if (xyplot != null) {
            XYDataset dataset = xyplot.getDataset(datasetIndex);
            if (dataset != null) {
                XYSeriesLabelGenerator lg = getLegendItemLabelGenerator();
                String label = lg.generateLabel(dataset, series);
                String description = label;
                String toolTipText = null;
                if (getLegendItemToolTipGenerator() != null) {
                    toolTipText = getLegendItemToolTipGenerator().generateLabel(
                            dataset, series);
                }
                String urlText = null;
                if (getLegendItemURLGenerator() != null) {
                    urlText = getLegendItemURLGenerator().generateLabel(
                            dataset, series);
                }
                Paint paint = lookupSeriesPaint(series);
                result = new LegendItem(label, description, toolTipText,
                        urlText, this.legendArea, paint);
                result.setLabelFont(lookupLegendTextFont(series));
                Paint labelPaint = lookupLegendTextPaint(series);
                if (labelPaint != null) {
                    result.setLabelPaint(labelPaint);
                }
                result.setDataset(dataset);
                result.setDatasetIndex(datasetIndex);
                result.setSeriesKey(dataset.getSeriesKey(series));
                result.setSeriesIndex(series);
            }
        }
        return result;
    }

    /**
     * Draws the visual representation of a single data item.
     *
     * @param g2  the graphics device.
     * @param state  the renderer state.
     * @param dataArea  the area within which the data is being drawn.
     * @param info  collects information about the drawing.
     * @param plot  the plot (can be used to obtain standard color information
     *              etc).
     * @param domainAxis  the domain axis.
     * @param rangeAxis  the range axis.
     * @param dataset  the dataset.
     * @param series  the series index (zero-based).
     * @param item  the item index (zero-based).
     * @param crosshairState  crosshair information for the plot
     *                        ({@code null} permitted).
     * @param pass  the pass index.
     */
    @Override
    public void drawItem(Graphics2D g2, XYItemRendererState state,
            Rectangle2D dataArea, PlotRenderingInfo info, XYPlot plot,
            ValueAxis domainAxis, ValueAxis rangeAxis, XYDataset dataset,
            int series, int item, CrosshairState crosshairState, int pass) {

        if (!getItemVisible(series, item)) {
            return;
        }
=====================================================================
Found a 49 line (253 tokens) duplication in the following files: 
Starting at line 152 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/main/java/org/jfree/chart/renderer/category/GradientBarPainter.java
Starting at line 152 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/main/java/org/jfree/chart/renderer/xy/GradientXYBarPainter.java

                    (float) regions[0].getMaxY(), Color.WHITE);
            g2.setPaint(gp);
            g2.fill(regions[0]);

            gp = new GradientPaint(0.0f, (float) regions[1].getMinY(),
                    Color.WHITE, 0.0f, (float) regions[1].getMaxY(), c0);
            g2.setPaint(gp);
            g2.fill(regions[1]);

            gp = new GradientPaint(0.0f, (float) regions[2].getMinY(), c0,
                    0.0f, (float) regions[2].getMaxY(), c1);
            g2.setPaint(gp);
            g2.fill(regions[2]);

            gp = new GradientPaint(0.0f, (float) regions[3].getMinY(), c1,
                     0.0f, (float) regions[3].getMaxY(), c0);
            g2.setPaint(gp);
            g2.fill(regions[3]);

        }

        // draw the outline...
        if (renderer.isDrawBarOutline()
            /*&& state.getBarWidth() > renderer.BAR_OUTLINE_WIDTH_THRESHOLD*/) {
            Stroke stroke = renderer.getItemOutlineStroke(row, column);
            Paint paint = renderer.getItemOutlinePaint(row, column);
            if (stroke != null && paint != null) {
                g2.setStroke(stroke);
                g2.setPaint(paint);
                g2.draw(bar);
            }
        }

    }

    /**
     * Paints a single bar instance.
     *
     * @param g2  the graphics target.
     * @param renderer  the renderer.
     * @param row  the row index.
     * @param column  the column index.
     * @param bar  the bar
     * @param base  indicates which side of the rectangle is the base of the
     *              bar.
     * @param pegShadow  peg the shadow to the base of the bar?
     */
    @Override
    public void paintBarShadow(Graphics2D g2, BarRenderer renderer, int row,
=====================================================================
Found a 55 line (252 tokens) duplication in the following files: 
Starting at line 65 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/main/java/org/jfree/chart/title/ShortTextTitle.java
Starting at line 400 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/main/java/org/jfree/chart/title/TextTitle.java

        setText(text);
    }

    /**
     * Performs a layout for this title, subject to the supplied constraint,
     * and returns the dimensions required for the title (if the title
     * cannot be displayed in the available space, this method will return
     * zero width and height for the dimensions).
     *
     * @param g2  the graphics target.
     * @param constraint  the layout constraints.
     *
     * @return The dimensions for the title.
     */
    @Override
    public Size2D arrange(Graphics2D g2, RectangleConstraint constraint) {
        RectangleConstraint cc = toContentConstraint(constraint);
        LengthConstraintType w = cc.getWidthConstraintType();
        LengthConstraintType h = cc.getHeightConstraintType();
        Size2D contentSize = null;
        if (w == LengthConstraintType.NONE) {
            if (h == LengthConstraintType.NONE) {
                contentSize = arrangeNN(g2);
            }
            else if (h == LengthConstraintType.RANGE) {
                throw new RuntimeException("Not yet implemented.");
            }
            else if (h == LengthConstraintType.FIXED) {
                throw new RuntimeException("Not yet implemented.");
            }
        }
        else if (w == LengthConstraintType.RANGE) {
            if (h == LengthConstraintType.NONE) {
                contentSize = arrangeRN(g2, cc.getWidthRange());
            }
            else if (h == LengthConstraintType.RANGE) {
                contentSize = arrangeRR(g2, cc.getWidthRange(),
                        cc.getHeightRange());
            }
            else if (h == LengthConstraintType.FIXED) {
                throw new RuntimeException("Not yet implemented.");
            }
        }
        else if (w == LengthConstraintType.FIXED) {
            if (h == LengthConstraintType.NONE) {
                contentSize = arrangeFN(g2, cc.getWidth());
            }
            else if (h == LengthConstraintType.RANGE) {
                throw new RuntimeException("Not yet implemented.");
            }
            else if (h == LengthConstraintType.FIXED) {
                throw new RuntimeException("Not yet implemented.");
            }
        }
        assert contentSize != null;
=====================================================================
Found a 44 line (244 tokens) duplication in the following files: 
Starting at line 89 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/main/java/org/jfree/chart/labels/IntervalCategoryItemLabelGenerator.java
Starting at line 85 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/main/java/org/jfree/chart/labels/IntervalCategoryToolTipGenerator.java

    public IntervalCategoryItemLabelGenerator(String labelFormat,
                                              DateFormat formatter) {
        super(labelFormat, formatter);
    }

    /**
     * Creates the array of items that can be passed to the
     * {@code MessageFormat} class for creating labels.
     *
     * @param dataset  the dataset ({@code null} not permitted).
     * @param row  the row index (zero-based).
     * @param column  the column index (zero-based).
     *
     * @return The items (never {@code null}).
     */
    @Override
    protected Object[] createItemArray(CategoryDataset dataset,
                                       int row, int column) {
        Object[] result = new Object[5];
        result[0] = dataset.getRowKey(row).toString();
        result[1] = dataset.getColumnKey(column).toString();
        Number value = dataset.getValue(row, column);
        if (getNumberFormat() != null) {
            result[2] = getNumberFormat().format(value);
        }
        else if (getDateFormat() != null) {
            result[2] = getDateFormat().format(value);
        }

        if (dataset instanceof IntervalCategoryDataset) {
            IntervalCategoryDataset icd = (IntervalCategoryDataset) dataset;
            Number start = icd.getStartValue(row, column);
            Number end = icd.getEndValue(row, column);
            if (getNumberFormat() != null) {
                result[3] = getNumberFormat().format(start);
                result[4] = getNumberFormat().format(end);
            }
            else if (getDateFormat() != null) {
                result[3] = getDateFormat().format(start);
                result[4] = getDateFormat().format(end);
            }
        }
        return result;
    }
=====================================================================
Found a 75 line (244 tokens) duplication in the following files: 
Starting at line 110 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/main/java/org/jfree/chart/renderer/category/AreaRenderer.java
Starting at line 444 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/main/java/org/jfree/chart/renderer/category/BoxAndWhiskerRenderer.java

        fireChangeEvent();
    }

    /**
     * Returns a legend item for a series.
     *
     * @param datasetIndex  the dataset index (zero-based).
     * @param series  the series index (zero-based).
     *
     * @return The legend item.
     */
    @Override
    public LegendItem getLegendItem(int datasetIndex, int series) {

        // if there is no plot, there is no dataset to access...
        CategoryPlot cp = getPlot();
        if (cp == null) {
            return null;
        }

        // check that a legend item needs to be displayed...
        if (!isSeriesVisible(series) || !isSeriesVisibleInLegend(series)) {
            return null;
        }

        CategoryDataset dataset = cp.getDataset(datasetIndex);
        String label = getLegendItemLabelGenerator().generateLabel(dataset,
                series);
        String description = label;
        String toolTipText = null;
        if (getLegendItemToolTipGenerator() != null) {
            toolTipText = getLegendItemToolTipGenerator().generateLabel(
                    dataset, series);
        }
        String urlText = null;
        if (getLegendItemURLGenerator() != null) {
            urlText = getLegendItemURLGenerator().generateLabel(dataset,
                    series);
        }
        Shape shape = lookupLegendShape(series);
        Paint paint = lookupSeriesPaint(series);
        Paint outlinePaint = lookupSeriesOutlinePaint(series);
        Stroke outlineStroke = lookupSeriesOutlineStroke(series);

        LegendItem result = new LegendItem(label, description, toolTipText,
                urlText, shape, paint, outlineStroke, outlinePaint);
        result.setLabelFont(lookupLegendTextFont(series));
        Paint labelPaint = lookupLegendTextPaint(series);
        if (labelPaint != null) {
            result.setLabelPaint(labelPaint);
        }
        result.setDataset(dataset);
        result.setDatasetIndex(datasetIndex);
        result.setSeriesKey(dataset.getRowKey(series));
        result.setSeriesIndex(series);
        return result;

    }

    /**
     * Draw a single data item.
     *
     * @param g2  the graphics device.
     * @param state  the renderer state.
     * @param dataArea  the data plot area.
     * @param plot  the plot.
     * @param domainAxis  the domain axis.
     * @param rangeAxis  the range axis.
     * @param dataset  the dataset.
     * @param row  the row index (zero-based).
     * @param column  the column index (zero-based).
     * @param pass  the pass index.
     */
    @Override
    public void drawItem(Graphics2D g2, CategoryItemRendererState state,
=====================================================================
Found a 44 line (243 tokens) duplication in the following files: 
Starting at line 107 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/test/java/org/jfree/chart/AreaChartTest.java
Starting at line 74 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/test/java/org/jfree/chart/BarChartTest.java
Starting at line 74 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/test/java/org/jfree/chart/StackedAreaChartTest.java
Starting at line 73 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/test/java/org/jfree/chart/StackedBarChartTest.java

        assertSame(url2, url1);
    }

    /**
     * Draws the chart with a null info object to make sure that no exceptions
     * are thrown (a problem that was occurring at one point).
     */
    @Test
    public void testDrawWithNullInfo() {
        try {
            BufferedImage image = new BufferedImage(200 , 100,
                    BufferedImage.TYPE_INT_RGB);
            Graphics2D g2 = image.createGraphics();
            this.chart.draw(g2, new Rectangle2D.Double(0, 0, 200, 100), null,
                    null);
            g2.dispose();
        }
        catch (Exception e) {
            fail("There should be no exception.");
        }
    }

    /**
     * Replaces the chart's dataset and then checks that the new dataset is OK.
     */
    @Test
    public void testReplaceDataset() {
        Number[][] data = new Integer[][] {{-30, -20}, {-10, 10}, {20, 30}};
        CategoryDataset<String, String> newData = 
                DatasetUtils.createCategoryDataset("S", "C", data);
        LocalListener l = new LocalListener();
        this.chart.addChangeListener(l);
        @SuppressWarnings("unchecked")
        CategoryPlot<String, String> plot = (CategoryPlot) this.chart.getPlot();
        plot.setDataset(newData);
        assertTrue(l.flag);
        ValueAxis axis = plot.getRangeAxis();
        Range range = axis.getRange();
        assertTrue(range.getLowerBound() <= -30, 
                "Expecting the lower bound of the range to be around -30: " + range.getLowerBound());
        assertTrue(range.getUpperBound() >= 30, 
                "Expecting the upper bound of the range to be around 30: " + range.getUpperBound());

    }
=====================================================================
Found a 46 line (242 tokens) duplication in the following files: 
Starting at line 562 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/main/java/org/jfree/chart/axis/LogAxis.java
Starting at line 620 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/main/java/org/jfree/chart/axis/LogAxis.java

        }

        if (isAutoTickUnitSelection()) {
            selectAutoTickUnit(g2, dataArea, edge);
        }
        int minorTickCount = this.tickUnit.getMinorTickCount();
        double unit = getTickUnit().getSize();
        double index = Math.ceil(calculateLog(getRange().getLowerBound()) 
                / unit);
        double start = index * unit;
        double end = calculateLog(getUpperBound());
        double current = start;
        boolean hasTicks = (this.tickUnit.getSize() > 0.0)
                           && !Double.isInfinite(start);
        while (hasTicks && current <= end) {
            double v = calculateValueNoINF(current);
            if (range.contains(v)) {
                ticks.add(new LogTick(TickType.MAJOR, v, createTickLabel(v),
                        textAnchor));
            }
            // add minor ticks (for gridlines)
            double next = Math.pow(this.base, current
                    + this.tickUnit.getSize());
            for (int i = 1; i < minorTickCount; i++) {
                double minorV = v + i * ((next - v) / minorTickCount);
                if (range.contains(minorV)) {
                    ticks.add(new LogTick(TickType.MINOR, minorV, null,
                            textAnchor));
                }
            }
            current = current + this.tickUnit.getSize();
        }
        return ticks;
    }

    /**
     * Returns a list of ticks for an axis at the left or right of the chart.
     *
     * @param g2  the graphics device ({@code null} not permitted).
     * @param dataArea  the data area ({@code null} not permitted).
     * @param edge  the edge that the axis is aligned to ({@code null} 
     *     not permitted).
     *
     * @return A list of ticks.
     */
    protected List refreshTicksVertical(Graphics2D g2, Rectangle2D dataArea,
=====================================================================
Found a 63 line (239 tokens) duplication in the following files: 
Starting at line 176 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/main/java/org/jfree/chart/labels/BubbleXYItemLabelGenerator.java
Starting at line 172 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/main/java/org/jfree/chart/labels/StandardXYZToolTipGenerator.java

        result = MessageFormat.format(getFormatString(), items);
        return result;
    }

    /**
     * Creates the array of items that can be passed to the
     * {@link MessageFormat} class for creating labels.
     *
     * @param dataset  the dataset ({@code null} not permitted).
     * @param series  the series (zero-based index).
     * @param item  the item (zero-based index).
     *
     * @return The items (never {@code null}).
     */
    protected Object[] createItemArray(XYZDataset dataset,
                                       int series, int item) {

        Object[] result = new Object[4];
        result[0] = dataset.getSeriesKey(series).toString();

        Number x = dataset.getX(series, item);
        DateFormat xf = getXDateFormat();
        if (xf != null) {
            result[1] = xf.format(x);
        }
        else {
            result[1] = getXFormat().format(x);
        }

        Number y = dataset.getY(series, item);
        DateFormat yf = getYDateFormat();
        if (yf != null) {
            result[2] = yf.format(y);
        }
        else {
            result[2] = getYFormat().format(y);
        }

        Number z = dataset.getZ(series, item);
        if (this.zDateFormat != null) {
            result[3] = this.zDateFormat.format(z);
        }
        else {
            result[3] = this.zFormat.format(z);
        }

        return result;

    }

    /**
     * Tests this object for equality with an arbitrary object.
     *
     * @param obj  the other object ({@code null} permitted).
     *
     * @return A boolean.
     */
    @Override
    public boolean equals(Object obj) {
        if (obj == this) {
            return true;
        }
        if (!(obj instanceof BubbleXYItemLabelGenerator)) {
=====================================================================
Found a 58 line (230 tokens) duplication in the following files: 
Starting at line 78 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/test/java/org/jfree/chart/annotations/CategoryPointerAnnotationTest.java
Starting at line 78 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/test/java/org/jfree/chart/annotations/XYPointerAnnotationTest.java

        a2.setValue(22.0);
        assertEquals(a1, a2);

        //private double angle;
        a1.setAngle(Math.PI / 4.0);
        assertNotEquals(a1, a2);
        a2.setAngle(Math.PI / 4.0);
        assertEquals(a1, a2);

        //private double tipRadius;
        a1.setTipRadius(20.0);
        assertNotEquals(a1, a2);
        a2.setTipRadius(20.0);
        assertEquals(a1, a2);

        //private double baseRadius;
        a1.setBaseRadius(5.0);
        assertNotEquals(a1, a2);
        a2.setBaseRadius(5.0);
        assertEquals(a1, a2);

        //private double arrowLength;
        a1.setArrowLength(33.0);
        assertNotEquals(a1, a2);
        a2.setArrowLength(33.0);
        assertEquals(a1, a2);

        //private double arrowWidth;
        a1.setArrowWidth(9.0);
        assertNotEquals(a1, a2);
        a2.setArrowWidth(9.0);
        assertEquals(a1, a2);

        //private Stroke arrowStroke;
        Stroke stroke = new BasicStroke(1.5f);
        a1.setArrowStroke(stroke);
        assertNotEquals(a1, a2);
        a2.setArrowStroke(stroke);
        assertEquals(a1, a2);

        //private Paint arrowPaint;
        a1.setArrowPaint(Color.BLUE);
        assertNotEquals(a1, a2);
        a2.setArrowPaint(Color.BLUE);
        assertEquals(a1, a2);

        //private double labelOffset;
        a1.setLabelOffset(10.0);
        assertNotEquals(a1, a2);
        a2.setLabelOffset(10.0);
        assertEquals(a1, a2);
    }

    /**
     * Two objects that are equal are required to return the same hashCode.
     */
    @Test
    public void testHashCode() {
=====================================================================
Found a 70 line (228 tokens) duplication in the following files: 
Starting at line 131 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/main/java/org/jfree/chart/renderer/category/StandardBarPainter.java
Starting at line 131 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/main/java/org/jfree/chart/renderer/xy/StandardXYBarPainter.java

        g2.setPaint(renderer.getShadowPaint());
        g2.fill(shadow);

    }

    /**
     * Creates a shadow for the bar.
     *
     * @param bar  the bar shape.
     * @param xOffset  the x-offset for the shadow.
     * @param yOffset  the y-offset for the shadow.
     * @param base  the edge that is the base of the bar.
     * @param pegShadow  peg the shadow to the base?
     *
     * @return A rectangle for the shadow.
     */
    private Rectangle2D createShadow(RectangularShape bar, double xOffset,
            double yOffset, RectangleEdge base, boolean pegShadow) {
        double x0 = bar.getMinX();
        double x1 = bar.getMaxX();
        double y0 = bar.getMinY();
        double y1 = bar.getMaxY();
        if (base == RectangleEdge.TOP) {
            x0 += xOffset;
            x1 += xOffset;
            if (!pegShadow) {
                y0 += yOffset;
            }
            y1 += yOffset;
        }
        else if (base == RectangleEdge.BOTTOM) {
            x0 += xOffset;
            x1 += xOffset;
            y0 += yOffset;
            if (!pegShadow) {
                y1 += yOffset;
            }
        }
        else if (base == RectangleEdge.LEFT) {
            if (!pegShadow) {
                x0 += xOffset;
            }
            x1 += xOffset;
            y0 += yOffset;
            y1 += yOffset;
        }
        else if (base == RectangleEdge.RIGHT) {
            x0 += xOffset;
            if (!pegShadow) {
                x1 += xOffset;
            }
            y0 += yOffset;
            y1 += yOffset;
        }
        return new Rectangle2D.Double(x0, y0, (x1 - x0), (y1 - y0));
    }

    /**
     * Tests this instance for equality with an arbitrary object.
     *
     * @param obj  the obj ({@code null} permitted).
     *
     * @return A boolean.
     */
    @Override
    public boolean equals(Object obj) {
        if (obj == this) {
            return true;
        }
        if (!(obj instanceof StandardBarPainter)) {
=====================================================================
Found a 171 line (227 tokens) duplication in the following files: 
Starting at line 1807 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/main/java/org/jfree/chart/plot/CategoryPlot.java
Starting at line 1712 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/main/java/org/jfree/chart/plot/XYPlot.java

        this.rangeZeroBaselinePaint = paint;
        fireChangeEvent();
    }

    /**
     * Returns the flag that controls whether the range grid-lines are visible.
     *
     * @return The flag.
     *
     * @see #setRangeGridlinesVisible(boolean)
     */
    public boolean isRangeGridlinesVisible() {
        return this.rangeGridlinesVisible;
    }

    /**
     * Sets the flag that controls whether or not grid-lines are drawn against
     * the range axis.  If the flag changes value, a {@link PlotChangeEvent} is
     * sent to all registered listeners.
     *
     * @param visible  the new value of the flag.
     *
     * @see #isRangeGridlinesVisible()
     */
    public void setRangeGridlinesVisible(boolean visible) {
        if (this.rangeGridlinesVisible != visible) {
            this.rangeGridlinesVisible = visible;
            fireChangeEvent();
        }
    }

    /**
     * Returns the stroke used to draw the grid-lines against the range axis.
     *
     * @return The stroke (never {@code null}).
     *
     * @see #setRangeGridlineStroke(Stroke)
     */
    public Stroke getRangeGridlineStroke() {
        return this.rangeGridlineStroke;
    }

    /**
     * Sets the stroke used to draw the grid-lines against the range axis and
     * sends a {@link PlotChangeEvent} to all registered listeners.
     *
     * @param stroke  the stroke ({@code null} not permitted).
     *
     * @see #getRangeGridlineStroke()
     */
    public void setRangeGridlineStroke(Stroke stroke) {
        Args.nullNotPermitted(stroke, "stroke");
        this.rangeGridlineStroke = stroke;
        fireChangeEvent();
    }

    /**
     * Returns the paint used to draw the grid-lines against the range axis.
     *
     * @return The paint (never {@code null}).
     *
     * @see #setRangeGridlinePaint(Paint)
     */
    public Paint getRangeGridlinePaint() {
        return this.rangeGridlinePaint;
    }

    /**
     * Sets the paint used to draw the grid lines against the range axis and
     * sends a {@link PlotChangeEvent} to all registered listeners.
     *
     * @param paint  the paint ({@code null} not permitted).
     *
     * @see #getRangeGridlinePaint()
     */
    public void setRangeGridlinePaint(Paint paint) {
        Args.nullNotPermitted(paint, "paint");
        this.rangeGridlinePaint = paint;
        fireChangeEvent();
    }

    /**
     * Returns {@code true} if the range axis minor grid is visible, and
     * {@code false} otherwise.
     *
     * @return A boolean.
     *
     * @see #setRangeMinorGridlinesVisible(boolean)
     */
    public boolean isRangeMinorGridlinesVisible() {
        return this.rangeMinorGridlinesVisible;
    }

    /**
     * Sets the flag that controls whether or not the range axis minor grid
     * lines are visible.
     * <p>
     * If the flag value is changed, a {@link PlotChangeEvent} is sent to all
     * registered listeners.
     *
     * @param visible  the new value of the flag.
     *
     * @see #isRangeMinorGridlinesVisible()
     */
    public void setRangeMinorGridlinesVisible(boolean visible) {
        if (this.rangeMinorGridlinesVisible != visible) {
            this.rangeMinorGridlinesVisible = visible;
            fireChangeEvent();
        }
    }

    /**
     * Returns the stroke for the minor grid lines (if any) plotted against the
     * range axis.
     *
     * @return The stroke (never {@code null}).
     *
     * @see #setRangeMinorGridlineStroke(Stroke)
     */
    public Stroke getRangeMinorGridlineStroke() {
        return this.rangeMinorGridlineStroke;
    }

    /**
     * Sets the stroke for the minor grid lines plotted against the range axis,
     * and sends a {@link PlotChangeEvent} to all registered listeners.
     *
     * @param stroke  the stroke ({@code null} not permitted).
     *
     * @see #getRangeMinorGridlineStroke()
     */
    public void setRangeMinorGridlineStroke(Stroke stroke) {
        Args.nullNotPermitted(stroke, "stroke");
        this.rangeMinorGridlineStroke = stroke;
        fireChangeEvent();
    }

    /**
     * Returns the paint for the minor grid lines (if any) plotted against the
     * range axis.
     *
     * @return The paint (never {@code null}).
     *
     * @see #setRangeMinorGridlinePaint(Paint)
     */
    public Paint getRangeMinorGridlinePaint() {
        return this.rangeMinorGridlinePaint;
    }

    /**
     * Sets the paint for the minor grid lines plotted against the range axis
     * and sends a {@link PlotChangeEvent} to all registered listeners.
     *
     * @param paint  the paint ({@code null} not permitted).
     *
     * @see #getRangeMinorGridlinePaint()
     */
    public void setRangeMinorGridlinePaint(Paint paint) {
        Args.nullNotPermitted(paint, "paint");
        this.rangeMinorGridlinePaint = paint;
        fireChangeEvent();
    }

    /**
     * Returns the fixed legend items, if any.
     *
     * @return The legend items (possibly {@code null}).
     *
     * @see #setFixedLegendItems(LegendItemCollection)
     */
    public LegendItemCollection getFixedLegendItems() {
=====================================================================
Found a 55 line (225 tokens) duplication in the following files: 
Starting at line 446 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/main/java/org/jfree/chart/plot/CombinedDomainXYPlot.java
Starting at line 382 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/main/java/org/jfree/chart/plot/CombinedRangeXYPlot.java

        RectangleEdge edge = getDomainAxisEdge();
        double cursor = RectangleEdge.coordinate(dataArea, edge);
        AxisState axisState = axis.draw(g2, cursor, area, dataArea, edge, info);
        if (parentState == null) {
            parentState = new PlotState();
        }
        parentState.getSharedAxisStates().put(axis, axisState);

        // draw all the subplots
        for (int i = 0; i < this.subplots.size(); i++) {
            XYPlot plot = (XYPlot) this.subplots.get(i);
            PlotRenderingInfo subplotInfo = null;
            if (info != null) {
                subplotInfo = new PlotRenderingInfo(info.getOwner());
                info.addSubplotInfo(subplotInfo);
            }
            plot.draw(g2, this.subplotAreas[i], anchor, parentState,
                    subplotInfo);
        }

        if (info != null) {
            info.setDataArea(dataArea);
        }

    }

    /**
     * Returns a collection of legend items for the plot.
     *
     * @return The legend items.
     */
    @Override
    public LegendItemCollection getLegendItems() {
        LegendItemCollection result = getFixedLegendItems();
        if (result == null) {
            result = new LegendItemCollection();
            if (this.subplots != null) {
                for (XYPlot plot : this.subplots) {
                    LegendItemCollection more = plot.getLegendItems();
                    result.addAll(more);
                }
            }
        }
        return result;
    }

    /**
     * Multiplies the range on the range axis/axes by the specified factor.
     *
     * @param factor  the zoom factor.
     * @param info  the plot rendering info ({@code null} not permitted).
     * @param source  the source point ({@code null} not permitted).
     */
    @Override
    public void zoomRangeAxes(double factor, PlotRenderingInfo info,
=====================================================================
Found a 63 line (222 tokens) duplication in the following files: 
Starting at line 362 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/main/java/org/jfree/chart/plot/CombinedDomainCategoryPlot.java
Starting at line 373 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/main/java/org/jfree/chart/plot/CombinedDomainXYPlot.java

            CategoryPlot plot = (CategoryPlot) this.subplots.get(i);

            // calculate sub-plot area
            if (orientation == PlotOrientation.HORIZONTAL) {
                double w = usableSize * plot.getWeight() / totalWeight;
                this.subplotAreas[i] = new Rectangle2D.Double(x, y, w,
                        adjustedPlotArea.getHeight());
                x = x + w + this.gap;
            }
            else if (orientation == PlotOrientation.VERTICAL) {
                double h = usableSize * plot.getWeight() / totalWeight;
                this.subplotAreas[i] = new Rectangle2D.Double(x, y,
                        adjustedPlotArea.getWidth(), h);
                y = y + h + this.gap;
            }

            AxisSpace subSpace = plot.calculateRangeAxisSpace(g2,
                    this.subplotAreas[i], null);
            space.ensureAtLeast(subSpace);

        }

        return space;
    }

    /**
     * Receives a chart element visitor.  Many plot subclasses will override
     * this method to handle their subcomponents.
     * 
     * @param visitor  the visitor ({@code null} not permitted).
     */
    @Override
    public void receive(ChartElementVisitor visitor) {
        subplots.forEach(subplot -> {
            subplot.receive(visitor);
        });
        super.receive(visitor);
    }

    /**
     * Draws the plot on a Java 2D graphics device (such as the screen or a
     * printer).  Will perform all the placement calculations for each of the
     * sub-plots and then tell these to draw themselves.
     *
     * @param g2  the graphics device.
     * @param area  the area within which the plot (including axis labels)
     *              should be drawn.
     * @param anchor  the anchor point ({@code null} permitted).
     * @param parentState  the state from the parent plot, if there is one.
     * @param info  collects information about the drawing ({@code null}
     *              permitted).
     */
    @Override
     public void draw(Graphics2D g2, Rectangle2D area, Point2D anchor,
            PlotState parentState, PlotRenderingInfo info) {

        // set up info collection...
        if (info != null) {
            info.setPlotArea(area);
        }

        // adjust the drawing area for plot insets (if any)...
        RectangleInsets insets = getInsets();
=====================================================================
Found a 311 line (221 tokens) duplication in the following files: 
Starting at line 459 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/main/java/org/jfree/chart/renderer/category/CategoryItemRenderer.java
Starting at line 451 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/main/java/org/jfree/chart/renderer/xy/XYItemRenderer.java

    void setDefaultFillPaint(Paint paint);

    //// OUTLINE PAINT /////////////////////////////////////////////////////////

    /**
     * Returns the paint used to outline data items as they are drawn.
     *
     * @param row  the row (or series) index (zero-based).
     * @param column  the column (or category) index (zero-based).
     *
     * @return The paint (never {@code null}).
     */
    Paint getItemOutlinePaint(int row, int column);

    /**
     * Returns the paint used to outline an item drawn by the renderer.
     *
     * @param series  the series (zero-based index).
     *
     * @return The paint (possibly {@code null}).
     *
     * @see #setSeriesOutlinePaint(int, Paint)
     */
    Paint getSeriesOutlinePaint(int series);

    /**
     * Sets the paint used for a series outline and sends a
     * {@link RendererChangeEvent} to all registered listeners.
     *
     * @param series  the series index (zero-based).
     * @param paint  the paint ({@code null} permitted).
     *
     * @see #getSeriesOutlinePaint(int)
     */
    void setSeriesOutlinePaint(int series, Paint paint);

    /**
     * Sets the paint used for a series outline and sends a
     * {@link RendererChangeEvent} to all registered listeners if requested.
     *
     * @param series  the series index (zero-based).
     * @param paint  the paint ({@code null} permitted).
     * @param notify  send change event?
     *
     * @see #getSeriesOutlinePaint(int)
     */
    void setSeriesOutlinePaint(int series, Paint paint, boolean notify);

    /**
     * Returns the default outline paint.  During rendering, the renderer
     * will look up the series outline paint and, if this is {@code null}, it 
     * will use the default outline paint.
     *
     * @return The paint (never {@code null}).
     *
     * @see #setDefaultOutlinePaint(Paint)
     */
    Paint getDefaultOutlinePaint();

    /**
     * Sets the default outline paint and sends a {@link RendererChangeEvent} to
     * all registered listeners.
     *
     * @param paint  the paint ({@code null} not permitted).
     *
     * @see #getDefaultOutlinePaint()
     */
    void setDefaultOutlinePaint(Paint paint);

    /**
     * Sets the default outline paint and sends a {@link RendererChangeEvent} to
     * all registered listeners if requested.
     *
     * @param paint  the paint ({@code null} not permitted).
     * @param notify  send a change event?
     *
     * @see #getDefaultOutlinePaint()
     */
    void setDefaultOutlinePaint(Paint paint, boolean notify);

    //// STROKE ////////////////////////////////////////////////////////////////

    /**
     * Returns the stroke used to draw data items.
     *
     * @param row  the row (or series) index (zero-based).
     * @param column  the column (or category) index (zero-based).
     *
     * @return The stroke (never {@code null}).
     */
    Stroke getItemStroke(int row, int column);

    /**
     * Returns the stroke used to draw the items in a series.
     *
     * @param series  the series (zero-based index).
     *
     * @return The stroke (never {@code null}).
     *
     * @see #setSeriesStroke(int, Stroke)
     */
    Stroke getSeriesStroke(int series);

    /**
     * Sets the stroke used for a series and sends a
     * {@link RendererChangeEvent} to all registered listeners.
     *
     * @param series  the series index (zero-based).
     * @param stroke  the stroke ({@code null} permitted).
     *
     * @see #getSeriesStroke(int)
     */
    void setSeriesStroke(int series, Stroke stroke);

    /**
     * Sets the stroke used for a series and sends a
     * {@link RendererChangeEvent} to all registered listeners if requested.
     *
     * @param series  the series index (zero-based).
     * @param stroke  the stroke ({@code null} permitted).
     * @param notify  send change event?
     *
     * @see #getSeriesStroke(int)
     */
    void setSeriesStroke(int series, Stroke stroke, boolean notify);

    /**
     * Returns the default stroke.
     *
     * @return The default stroke (never {@code null}).
     *
     * @see #setDefaultStroke(Stroke)
     */
    Stroke getDefaultStroke();

    /**
     * Sets the default stroke and sends a {@link RendererChangeEvent} to all
     * registered listeners.
     *
     * @param stroke  the stroke ({@code null} not permitted).
     *
     * @see #getDefaultStroke()
     */
    void setDefaultStroke(Stroke stroke);

    /**
     * Sets the default stroke and sends a {@link RendererChangeEvent} to all
     * registered listeners if requested.
     *
     * @param stroke  the stroke ({@code null} not permitted).
     * @param notify  send change event?
     *
     * @see #getDefaultStroke()
     */
    void setDefaultStroke(Stroke stroke, boolean notify);

    //// OUTLINE STROKE ////////////////////////////////////////////////////////

    /**
     * Returns the stroke used to outline data items.
     * <p>
     * The default implementation passes control to the
     * lookupSeriesOutlineStroke method.  You can override this method if you
     * require different behaviour.
     *
     * @param row  the row (or series) index (zero-based).
     * @param column  the column (or category) index (zero-based).
     *
     * @return The stroke (never {@code null}).
     */
    Stroke getItemOutlineStroke(int row, int column);

    /**
     * Returns the stroke used to outline the items in a series.
     *
     * @param series  the series (zero-based index).
     *
     * @return The stroke (possibly {@code null}).
     *
     * @see #setSeriesOutlineStroke(int, Stroke)
     */
    Stroke getSeriesOutlineStroke(int series);

    /**
     * Sets the outline stroke used for a series and sends a
     * {@link RendererChangeEvent} to all registered listeners.
     *
     * @param series  the series index (zero-based).
     * @param stroke  the stroke ({@code null} permitted).
     *
     * @see #getSeriesOutlineStroke(int)
     */
    void setSeriesOutlineStroke(int series, Stroke stroke);

    /**
     * Sets the outline stroke used for a series and sends a
     * {@link RendererChangeEvent} to all registered listeners if requested.
     *
     * @param series  the series index (zero-based).
     * @param stroke  the stroke ({@code null} permitted).
     * @param notify  send change event?
     *
     * @see #getSeriesOutlineStroke(int)
     */
    void setSeriesOutlineStroke(int series, Stroke stroke, boolean notify);

    /**
     * Returns the default outline stroke.
     *
     * @return The stroke (never {@code null}).
     *
     * @see #setDefaultOutlineStroke(Stroke)
     */
    Stroke getDefaultOutlineStroke();

    /**
     * Sets the default outline stroke and sends a {@link RendererChangeEvent} to
     * all registered listeners.
     *
     * @param stroke  the stroke ({@code null} not permitted).
     *
     * @see #getDefaultOutlineStroke()
     */
    void setDefaultOutlineStroke(Stroke stroke);

    /**
     * Sets the default outline stroke and sends a {@link RendererChangeEvent} to
     * all registered listeners if requested.
     *
     * @param stroke  the stroke ({@code null} not permitted).
     * @param notify  send change event?
     *
     * @see #getDefaultOutlineStroke()
     */
    void setDefaultOutlineStroke(Stroke stroke, boolean notify);

    //// SHAPE /////////////////////////////////////////////////////////////////

    /**
     * Returns a shape used to represent a data item.
     *
     * @param row  the row (or series) index (zero-based).
     * @param column  the column (or category) index (zero-based).
     *
     * @return The shape (never {@code null}).
     */
    Shape getItemShape(int row, int column);

    /**
     * Returns a shape used to represent the items in a series.
     *
     * @param series  the series (zero-based index).
     *
     * @return The shape (possibly {@code null}).
     *
     * @see #setSeriesShape(int, Shape)
     */
    Shape getSeriesShape(int series);

    /**
     * Sets the shape used for a series and sends a {@link RendererChangeEvent}
     * to all registered listeners.
     *
     * @param series  the series index (zero-based).
     * @param shape  the shape ({@code null} permitted).
     *
     * @see #getSeriesShape(int)
     */
    void setSeriesShape(int series, Shape shape);

    /**
     * Sets the shape used for a series and sends a {@link RendererChangeEvent}
     * to all registered listeners if requested.
     *
     * @param series  the series index (zero-based).
     * @param shape  the shape ({@code null} permitted).
     * @param notify  send change event?
     *
     * @see #getSeriesShape(int)
     */
    void setSeriesShape(int series, Shape shape, boolean notify);

    /**
     * Returns the default shape.
     *
     * @return The shape (never {@code null}).
     *
     * @see #setDefaultShape(Shape)
     */
    Shape getDefaultShape();

    /**
     * Sets the default shape and sends a {@link RendererChangeEvent} to all
     * registered listeners.
     *
     * @param shape  the shape ({@code null} not permitted).
     *
     * @see #getDefaultShape()
     */
    void setDefaultShape(Shape shape);

    /**
     * Sets the default shape and sends a {@link RendererChangeEvent} to all
     * registered listeners if requested.
     *
     * @param shape  the shape ({@code null} not permitted).
     * @param notify  send change event?
     *
     * @see #getDefaultShape()
     */
    void setDefaultShape(Shape shape, boolean notify);
=====================================================================
Found a 62 line (218 tokens) duplication in the following files: 
Starting at line 407 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/main/java/org/jfree/chart/renderer/category/StackedAreaRenderer.java
Starting at line 447 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/main/java/org/jfree/chart/renderer/xy/StackedXYAreaRenderer2.java

                }
            }
        }
        return result;
    }

    /**
     * Returns a pair of "stack" values calculated as the mean of the two
     * specified stack value pairs.
     *
     * @param stack1  the first stack pair.
     * @param stack2  the second stack pair.
     *
     * @return A pair of average stack values.
     */
    private double[] averageStackValues(double[] stack1, double[] stack2) {
        double[] result = new double[2];
        result[0] = (stack1[0] + stack2[0]) / 2.0;
        result[1] = (stack1[1] + stack2[1]) / 2.0;
        return result;
    }

    /**
     * Calculates adjusted stack values from the supplied values.  The value is
     * the mean of the supplied values, unless either of the supplied values
     * is zero, in which case the adjusted value is zero also.
     *
     * @param stack1  the first stack pair.
     * @param stack2  the second stack pair.
     *
     * @return A pair of average stack values.
     */
    private double[] adjustedStackValues(double[] stack1, double[] stack2) {
        double[] result = new double[2];
        if (stack1[0] == 0.0 || stack2[0] == 0.0) {
            result[0] = 0.0;
        }
        else {
            result[0] = (stack1[0] + stack2[0]) / 2.0;
        }
        if (stack1[1] == 0.0 || stack2[1] == 0.0) {
            result[1] = 0.0;
        }
        else {
            result[1] = (stack1[1] + stack2[1]) / 2.0;
        }
        return result;
    }

    /**
     * Checks this instance for equality with an arbitrary object.
     *
     * @param obj  the object ({@code null} not permitted).
     *
     * @return A boolean.
     */
    @Override
    public boolean equals(Object obj) {
        if (obj == this) {
            return true;
        }
        if (!(obj instanceof StackedAreaRenderer)) {
=====================================================================
Found a 37 line (218 tokens) duplication in the following files: 
Starting at line 1038 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/test/java/org/jfree/chart/axis/DateAxisTest.java
Starting at line 1082 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/test/java/org/jfree/chart/axis/DateAxisTest.java

        DateTickUnit unit = new DateTickUnit(DateTickUnitType.MILLISECOND, 1);
        axis.setTickUnit(unit);

        // START: check d0
        axis.setTickMarkPosition(DateTickMarkPosition.START);

        axis.setRange(d0, end);
        Date psd = axis.previousStandardDate(d0, unit);
        Date nsd = unit.addToDate(psd, TimeZone.getDefault());
        assertTrue(psd.getTime() < d0.getTime());
        assertTrue(nsd.getTime() >= d0.getTime());

        // MIDDLE: check d0
        axis.setTickMarkPosition(DateTickMarkPosition.MIDDLE);

        axis.setRange(d0, end);
        psd = axis.previousStandardDate(d0, unit);
        nsd = unit.addToDate(psd, TimeZone.getDefault());
        assertTrue(psd.getTime() < d0.getTime());
        assertTrue(nsd.getTime() >= d0.getTime());

        // END: check d0
        axis.setTickMarkPosition(DateTickMarkPosition.END);

        axis.setRange(d0, end);
        psd = axis.previousStandardDate(d0, unit);
        nsd = unit.addToDate(psd, TimeZone.getDefault());
        assertTrue(psd.getTime() < d0.getTime());
        assertTrue(nsd.getTime() >= d0.getTime());
    }

    /**
     * A basic check for the testPreviousStandardDate() method when the
     * tick unit is 10 milliseconds (just for the sake of having a multiple).
     */
    @Test
    public void testPreviousStandardDateMillisecondB() {
=====================================================================
Found a 51 line (217 tokens) duplication in the following files: 
Starting at line 205 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/main/java/org/jfree/chart/plot/CombinedRangeCategoryPlot.java
Starting at line 239 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/main/java/org/jfree/chart/plot/CombinedRangeXYPlot.java

    public List<CategoryPlot> getSubplots() {
        if (this.subplots != null) {
            return Collections.unmodifiableList(this.subplots);
        }
        else {
            return Collections.EMPTY_LIST;
        }
    }

    /**
     * Calculates the space required for the axes.
     *
     * @param g2  the graphics device.
     * @param plotArea  the plot area.
     *
     * @return The space required for the axes.
     */
    @Override
    protected AxisSpace calculateAxisSpace(Graphics2D g2, 
            Rectangle2D plotArea) {

        AxisSpace space = new AxisSpace();
        PlotOrientation orientation = getOrientation();

        // work out the space required by the domain axis...
        AxisSpace fixed = getFixedRangeAxisSpace();
        if (fixed != null) {
            if (orientation == PlotOrientation.VERTICAL) {
                space.setLeft(fixed.getLeft());
                space.setRight(fixed.getRight());
            }
            else if (orientation == PlotOrientation.HORIZONTAL) {
                space.setTop(fixed.getTop());
                space.setBottom(fixed.getBottom());
            }
        }
        else {
            ValueAxis valueAxis = getRangeAxis();
            RectangleEdge valueEdge = Plot.resolveRangeAxisLocation(
                    getRangeAxisLocation(), orientation);
            if (valueAxis != null) {
                space = valueAxis.reserveSpace(g2, this, plotArea, valueEdge,
                        space);
            }
        }

        Rectangle2D adjustedPlotArea = space.shrink(plotArea, null);
        // work out the maximum height or width of the non-shared axes...
        int n = this.subplots.size();
        int totalWeight = 0;
        for (int i = 0; i < n; i++) {
=====================================================================
Found a 39 line (211 tokens) duplication in the following files: 
Starting at line 888 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/main/java/org/jfree/chart/axis/NumberAxis.java
Starting at line 984 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/main/java/org/jfree/chart/axis/NumberAxis.java

        List result = new java.util.ArrayList();

        Font tickLabelFont = getTickLabelFont();
        g2.setFont(tickLabelFont);

        if (isAutoTickUnitSelection()) {
            selectAutoTickUnit(g2, dataArea, edge);
        }

        TickUnit tu = getTickUnit();
        double size = tu.getSize();
        int count = calculateVisibleTickCount();
        double lowestTickValue = calculateLowestVisibleTickValue();

        if (count <= ValueAxis.MAXIMUM_TICK_COUNT) {
            int minorTickSpaces = getMinorTickCount();
            if (minorTickSpaces <= 0) {
                minorTickSpaces = tu.getMinorTickCount();
            }
            for (int minorTick = 1; minorTick < minorTickSpaces; minorTick++) {
                double minorTickValue = lowestTickValue 
                        - size * minorTick / minorTickSpaces;
                if (getRange().contains(minorTickValue)) {
                    result.add(new NumberTick(TickType.MINOR, minorTickValue,
                            "", TextAnchor.TOP_CENTER, TextAnchor.CENTER,
                            0.0));
                }
            }
            for (int i = 0; i < count; i++) {
                double currentTickValue = lowestTickValue + (i * size);
                String tickLabel;
                NumberFormat formatter = getNumberFormatOverride();
                if (formatter != null) {
                    tickLabel = formatter.format(currentTickValue);
                }
                else {
                    tickLabel = getTickUnit().valueToString(currentTickValue);
                }
                TextAnchor anchor, rotationAnchor;
=====================================================================
Found a 151 line (209 tokens) duplication in the following files: 
Starting at line 113 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/main/java/org/jfree/chart/annotations/TextAnnotation.java
Starting at line 165 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/main/java/org/jfree/chart/annotations/XYTextAnnotation.java

    }

    /**
     * Returns the text for the annotation.
     *
     * @return The text (never {@code null}).
     *
     * @see #setText(String)
     */
    public String getText() {
        return this.text;
    }

    /**
     * Sets the text for the annotation and sends an 
     * {@link AnnotationChangeEvent} to all registered listeners.
     *
     * @param text  the text ({@code null} not permitted).
     *
     * @see #getText()
     */
    public void setText(String text) {
        Args.nullNotPermitted(text, "text");
        this.text = text;
        fireAnnotationChanged();
    }

    /**
     * Returns the font for the annotation.
     *
     * @return The font (never {@code null}).
     *
     * @see #setFont(Font)
     */
    public Font getFont() {
        return this.font;
    }

    /**
     * Sets the font for the annotation and sends an
     * {@link AnnotationChangeEvent} to all registered listeners.
     *
     * @param font  the font ({@code null} not permitted).
     *
     * @see #getFont()
     */
    public void setFont(Font font) {
        Args.nullNotPermitted(font, "font");
        this.font = font;
        fireAnnotationChanged();
    }

    /**
     * Returns the paint for the annotation.
     *
     * @return The paint (never {@code null}).
     *
     * @see #setPaint(Paint)
     */
    public Paint getPaint() {
        return this.paint;
    }

    /**
     * Sets the paint for the annotation and sends an
     * {@link AnnotationChangeEvent} to all registered listeners.
     *
     * @param paint  the paint ({@code null} not permitted).
     *
     * @see #getPaint()
     */
    public void setPaint(Paint paint) {
        Args.nullNotPermitted(paint, "paint");
        this.paint = paint;
        fireAnnotationChanged();
    }

    /**
     * Returns the text anchor.
     *
     * @return The text anchor.
     *
     * @see #setTextAnchor(TextAnchor)
     */
    public TextAnchor getTextAnchor() {
        return this.textAnchor;
    }

    /**
     * Sets the text anchor (the point on the text bounding rectangle that is
     * aligned to the (x, y) coordinate of the annotation) and sends an
     * {@link AnnotationChangeEvent} to all registered listeners.
     *
     * @param anchor  the anchor point ({@code null} not permitted).
     *
     * @see #getTextAnchor()
     */
    public void setTextAnchor(TextAnchor anchor) {
        Args.nullNotPermitted(anchor, "anchor");
        this.textAnchor = anchor;
        fireAnnotationChanged();
    }

    /**
     * Returns the rotation anchor.
     *
     * @return The rotation anchor point (never {@code null}).
     *
     * @see #setRotationAnchor(TextAnchor)
     */
    public TextAnchor getRotationAnchor() {
        return this.rotationAnchor;
    }

    /**
     * Sets the rotation anchor point and sends an
     * {@link AnnotationChangeEvent} to all registered listeners.
     *
     * @param anchor  the anchor ({@code null} not permitted).
     *
     * @see #getRotationAnchor()
     */
    public void setRotationAnchor(TextAnchor anchor) {
        Args.nullNotPermitted(anchor, "anchor");
        this.rotationAnchor = anchor;
        fireAnnotationChanged();
    }

    /**
     * Returns the rotation angle in radians.
     *
     * @return The rotation angle.
     *
     * @see #setRotationAngle(double)
     */
    public double getRotationAngle() {
        return this.rotationAngle;
    }

    /**
     * Sets the rotation angle and sends an {@link AnnotationChangeEvent} to
     * all registered listeners.  The angle is measured clockwise in radians.
     *
     * @param angle  the angle (in radians).
     *
     * @see #getRotationAngle()
     */
    public void setRotationAngle(double angle) {
        this.rotationAngle = angle;
        fireAnnotationChanged();
    }
=====================================================================
Found a 162 line (206 tokens) duplication in the following files: 
Starting at line 2822 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/main/java/org/jfree/chart/plot/CategoryPlot.java
Starting at line 4391 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/main/java/org/jfree/chart/plot/XYPlot.java

    }

    /**
     * Returns a flag indicating whether or not the range crosshair is visible.
     *
     * @return The flag.
     *
     * @see #setRangeCrosshairVisible(boolean)
     */
    public boolean isRangeCrosshairVisible() {
        return this.rangeCrosshairVisible;
    }

    /**
     * Sets the flag indicating whether or not the range crosshair is visible.
     *
     * @param flag  the new value of the flag.
     *
     * @see #isRangeCrosshairVisible()
     */
    public void setRangeCrosshairVisible(boolean flag) {
        if (this.rangeCrosshairVisible != flag) {
            this.rangeCrosshairVisible = flag;
            fireChangeEvent();
        }
    }

    /**
     * Returns a flag indicating whether or not the crosshair should "lock-on"
     * to actual data values.
     *
     * @return The flag.
     *
     * @see #setRangeCrosshairLockedOnData(boolean)
     */
    public boolean isRangeCrosshairLockedOnData() {
        return this.rangeCrosshairLockedOnData;
    }

    /**
     * Sets the flag indicating whether or not the range crosshair should
     * "lock-on" to actual data values, and sends a {@link PlotChangeEvent}
     * to all registered listeners.
     *
     * @param flag  the flag.
     *
     * @see #isRangeCrosshairLockedOnData()
     */
    public void setRangeCrosshairLockedOnData(boolean flag) {
        if (this.rangeCrosshairLockedOnData != flag) {
            this.rangeCrosshairLockedOnData = flag;
            fireChangeEvent();
        }
    }

    /**
     * Returns the range crosshair value.
     *
     * @return The value.
     *
     * @see #setRangeCrosshairValue(double)
     */
    public double getRangeCrosshairValue() {
        return this.rangeCrosshairValue;
    }

    /**
     * Sets the range crosshair value and, if the crosshair is visible, sends
     * a {@link PlotChangeEvent} to all registered listeners.
     *
     * @param value  the new value.
     *
     * @see #getRangeCrosshairValue()
     */
    public void setRangeCrosshairValue(double value) {
        setRangeCrosshairValue(value, true);
    }

    /**
     * Sets the range crosshair value and, if requested, sends a
     * {@link PlotChangeEvent} to all registered listeners (but only if the
     * crosshair is visible).
     *
     * @param value  the new value.
     * @param notify  a flag that controls whether or not listeners are
     *                notified.
     *
     * @see #getRangeCrosshairValue()
     */
    public void setRangeCrosshairValue(double value, boolean notify) {
        this.rangeCrosshairValue = value;
        if (isRangeCrosshairVisible() && notify) {
            fireChangeEvent();
        }
    }

    /**
     * Returns the pen-style ({@code Stroke}) used to draw the crosshair
     * (if visible).
     *
     * @return The crosshair stroke (never {@code null}).
     *
     * @see #setRangeCrosshairStroke(Stroke)
     * @see #isRangeCrosshairVisible()
     * @see #getRangeCrosshairPaint()
     */
    public Stroke getRangeCrosshairStroke() {
        return this.rangeCrosshairStroke;
    }

    /**
     * Sets the pen-style ({@code Stroke}) used to draw the range
     * crosshair (if visible), and sends a {@link PlotChangeEvent} to all
     * registered listeners.
     *
     * @param stroke  the new crosshair stroke ({@code null} not
     *         permitted).
     *
     * @see #getRangeCrosshairStroke()
     */
    public void setRangeCrosshairStroke(Stroke stroke) {
        Args.nullNotPermitted(stroke, "stroke");
        this.rangeCrosshairStroke = stroke;
        fireChangeEvent();
    }

    /**
     * Returns the paint used to draw the range crosshair.
     *
     * @return The paint (never {@code null}).
     *
     * @see #setRangeCrosshairPaint(Paint)
     * @see #isRangeCrosshairVisible()
     * @see #getRangeCrosshairStroke()
     */
    public Paint getRangeCrosshairPaint() {
        return this.rangeCrosshairPaint;
    }

    /**
     * Sets the paint used to draw the range crosshair (if visible) and
     * sends a {@link PlotChangeEvent} to all registered listeners.
     *
     * @param paint  the paint ({@code null} not permitted).
     *
     * @see #getRangeCrosshairPaint()
     */
    public void setRangeCrosshairPaint(Paint paint) {
        Args.nullNotPermitted(paint, "paint");
        this.rangeCrosshairPaint = paint;
        fireChangeEvent();
    }

    /**
     * Returns the list of annotations.
     *
     * @return The list of annotations (never {@code null}).
     *
     * @see #addAnnotation(CategoryAnnotation)
     * @see #clearAnnotations()
     */
    public List<CategoryAnnotation> getAnnotations() {
=====================================================================
Found a 15 line (205 tokens) duplication in the following files: 
Starting at line 595 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/main/java/org/jfree/chart/renderer/xy/XYAreaRenderer.java
Starting at line 288 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/main/java/org/jfree/chart/renderer/xy/XYAreaRenderer2.java

            GeneralPath hotspot = new GeneralPath();
            if (plot.getOrientation() == PlotOrientation.HORIZONTAL) {
                moveTo(hotspot, transZero, ((transX0 + transX1) / 2.0));
                lineTo(hotspot, ((transY0 + transY1) / 2.0), ((transX0 + transX1) / 2.0));
                lineTo(hotspot, transY1, transX1);
                lineTo(hotspot, ((transY1 + transY2) / 2.0), ((transX1 + transX2) / 2.0));
                lineTo(hotspot, transZero, ((transX1 + transX2) / 2.0));
            } else { // vertical orientation
                moveTo(hotspot, ((transX0 + transX1) / 2.0), transZero);
                lineTo(hotspot, ((transX0 + transX1) / 2.0), ((transY0 + transY1) / 2.0));
                lineTo(hotspot, transX1, transY1);
                lineTo(hotspot, ((transX1 + transX2) / 2.0), ((transY1 + transY2) / 2.0));
                lineTo(hotspot, ((transX1 + transX2) / 2.0), transZero);
            }
            hotspot.closePath();
=====================================================================
Found a 56 line (202 tokens) duplication in the following files: 
Starting at line 216 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/main/java/org/jfree/chart/renderer/category/GradientBarPainter.java
Starting at line 131 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/main/java/org/jfree/chart/renderer/xy/StandardXYBarPainter.java

        g2.setPaint(renderer.getShadowPaint());
        g2.fill(shadow);

    }

    /**
     * Creates a shadow for the bar.
     *
     * @param bar  the bar shape.
     * @param xOffset  the x-offset for the shadow.
     * @param yOffset  the y-offset for the shadow.
     * @param base  the edge that is the base of the bar.
     * @param pegShadow  peg the shadow to the base?
     *
     * @return A rectangle for the shadow.
     */
    private Rectangle2D createShadow(RectangularShape bar, double xOffset,
            double yOffset, RectangleEdge base, boolean pegShadow) {
        double x0 = bar.getMinX();
        double x1 = bar.getMaxX();
        double y0 = bar.getMinY();
        double y1 = bar.getMaxY();
        if (base == RectangleEdge.TOP) {
            x0 += xOffset;
            x1 += xOffset;
            if (!pegShadow) {
                y0 += yOffset;
            }
            y1 += yOffset;
        }
        else if (base == RectangleEdge.BOTTOM) {
            x0 += xOffset;
            x1 += xOffset;
            y0 += yOffset;
            if (!pegShadow) {
                y1 += yOffset;
            }
        }
        else if (base == RectangleEdge.LEFT) {
            if (!pegShadow) {
                x0 += xOffset;
            }
            x1 += xOffset;
            y0 += yOffset;
            y1 += yOffset;
        }
        else if (base == RectangleEdge.RIGHT) {
            x0 += xOffset;
            if (!pegShadow) {
                x1 += xOffset;
            }
            y0 += yOffset;
            y1 += yOffset;
        }
        return new Rectangle2D.Double(x0, y0, (x1 - x0), (y1 - y0));
    }
=====================================================================
Found a 56 line (202 tokens) duplication in the following files: 
Starting at line 131 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/main/java/org/jfree/chart/renderer/category/StandardBarPainter.java
Starting at line 215 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/main/java/org/jfree/chart/renderer/xy/GradientXYBarPainter.java

        g2.setPaint(renderer.getShadowPaint());
        g2.fill(shadow);

    }

    /**
     * Creates a shadow for the bar.
     *
     * @param bar  the bar shape.
     * @param xOffset  the x-offset for the shadow.
     * @param yOffset  the y-offset for the shadow.
     * @param base  the edge that is the base of the bar.
     * @param pegShadow  peg the shadow to the base?
     *
     * @return A rectangle for the shadow.
     */
    private Rectangle2D createShadow(RectangularShape bar, double xOffset,
            double yOffset, RectangleEdge base, boolean pegShadow) {
        double x0 = bar.getMinX();
        double x1 = bar.getMaxX();
        double y0 = bar.getMinY();
        double y1 = bar.getMaxY();
        if (base == RectangleEdge.TOP) {
            x0 += xOffset;
            x1 += xOffset;
            if (!pegShadow) {
                y0 += yOffset;
            }
            y1 += yOffset;
        }
        else if (base == RectangleEdge.BOTTOM) {
            x0 += xOffset;
            x1 += xOffset;
            y0 += yOffset;
            if (!pegShadow) {
                y1 += yOffset;
            }
        }
        else if (base == RectangleEdge.LEFT) {
            if (!pegShadow) {
                x0 += xOffset;
            }
            x1 += xOffset;
            y0 += yOffset;
            y1 += yOffset;
        }
        else if (base == RectangleEdge.RIGHT) {
            x0 += xOffset;
            if (!pegShadow) {
                x1 += xOffset;
            }
            y0 += yOffset;
            y1 += yOffset;
        }
        return new Rectangle2D.Double(x0, y0, (x1 - x0), (y1 - y0));
    }
=====================================================================
Found a 34 line (201 tokens) duplication in the following files: 
Starting at line 153 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/test/java/org/jfree/chart/renderer/xy/XYAreaRenderer2Test.java
Starting at line 198 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/test/java/org/jfree/chart/renderer/xy/XYAreaRendererTest.java

                    new XYAreaRenderer2());
            JFreeChart chart = new JFreeChart(plot);
            /* BufferedImage image = */ chart.createBufferedImage(300, 200,
                    null);
        }
        catch (NullPointerException e) {
            fail("No exception should be thrown.");
        }
    }

    /**
     * A check for the datasetIndex and seriesIndex fields in the LegendItem
     * returned by the getLegendItem() method.
     */
    @Test
    public void testGetLegendItemSeriesIndex() {
        XYSeriesCollection<String> d1 = new XYSeriesCollection<>();
        XYSeries<String> s1 = new XYSeries<>("S1");
        s1.add(1.0, 1.1);
        XYSeries<String> s2 = new XYSeries<>("S2");
        s2.add(1.0, 1.1);
        d1.addSeries(s1);
        d1.addSeries(s2);

        XYSeriesCollection<String> d2 = new XYSeriesCollection<>();
        XYSeries<String> s3 = new XYSeries<>("S3");
        s3.add(1.0, 1.1);
        XYSeries<String> s4 = new XYSeries<>("S4");
        s4.add(1.0, 1.1);
        XYSeries<String> s5 = new XYSeries<>("S5");
        s5.add(1.0, 1.1);
        d2.addSeries(s3);
        d2.addSeries(s4);
        d2.addSeries(s5);
=====================================================================
Found a 42 line (196 tokens) duplication in the following files: 
Starting at line 798 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/main/java/org/jfree/chart/renderer/category/AbstractCategoryItemRenderer.java
Starting at line 917 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/main/java/org/jfree/chart/renderer/xy/AbstractXYItemRenderer.java

    public void drawRangeLine(Graphics2D g2, CategoryPlot plot, ValueAxis axis,
            Rectangle2D dataArea, double value, Paint paint, Stroke stroke) {

        Range range = axis.getRange();
        if (!range.contains(value)) {
            return;
        }

        PlotOrientation orientation = plot.getOrientation();
        Line2D line = null;
        double v = axis.valueToJava2D(value, dataArea, plot.getRangeAxisEdge());
        if (orientation == PlotOrientation.HORIZONTAL) {
            line = new Line2D.Double(v, dataArea.getMinY(), v,
                    dataArea.getMaxY());
        } else if (orientation == PlotOrientation.VERTICAL) {
            line = new Line2D.Double(dataArea.getMinX(), v,
                    dataArea.getMaxX(), v);
        }

        g2.setPaint(paint);
        g2.setStroke(stroke);
        Object saved = g2.getRenderingHint(RenderingHints.KEY_STROKE_CONTROL);
        g2.setRenderingHint(RenderingHints.KEY_STROKE_CONTROL, 
                RenderingHints.VALUE_STROKE_NORMALIZE);
        g2.draw(line);
        g2.setRenderingHint(RenderingHints.KEY_STROKE_CONTROL, saved);
    }

    /**
     * Draws a marker for the domain axis.
     *
     * @param g2  the graphics device (not {@code null}).
     * @param plot  the plot (not {@code null}).
     * @param axis  the range axis (not {@code null}).
     * @param marker  the marker to be drawn (not {@code null}).
     * @param dataArea  the area inside the axes (not {@code null}).
     *
     * @see #drawRangeMarker(Graphics2D, CategoryPlot, ValueAxis, Marker,
     *     Rectangle2D)
     */
    @Override
    public void drawDomainMarker(Graphics2D g2, CategoryPlot plot,
=====================================================================
Found a 280 line (193 tokens) duplication in the following files: 
Starting at line 161 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/main/java/org/jfree/chart/renderer/category/CategoryItemRenderer.java
Starting at line 141 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/main/java/org/jfree/chart/renderer/xy/XYItemRenderer.java

            int rendererIndex, PlotRenderingInfo info);

    /**
     * Returns a boolean that indicates whether the specified item
     * should be drawn (this is typically used to hide an entire series).
     *
     * @param series  the series index.
     * @param item  the item index.
     *
     * @return A boolean.
     */
    boolean getItemVisible(int series, int item);

    /**
     * Returns a boolean that indicates whether the specified series
     * should be drawn (this is typically used to hide an entire series).
     *
     * @param series  the series index.
     *
     * @return A boolean.
     */
    boolean isSeriesVisible(int series);

    /**
     * Returns the flag that controls whether a series is visible.
     *
     * @param series  the series index (zero-based).
     *
     * @return The flag (possibly {@code null}).
     *
     * @see #setSeriesVisible(int, Boolean)
     */
    Boolean getSeriesVisible(int series);

    /**
     * Sets the flag that controls whether a series is visible and sends a
     * {@link RendererChangeEvent} to all registered listeners.
     *
     * @param series  the series index (zero-based).
     * @param visible  the flag ({@code null} permitted).
     *
     * @see #getSeriesVisible(int)
     */
    void setSeriesVisible(int series, Boolean visible);

    /**
     * Sets the flag that controls whether a series is visible and, if
     * requested, sends a {@link RendererChangeEvent} to all registered
     * listeners.
     *
     * @param series  the series index.
     * @param visible  the flag ({@code null} permitted).
     * @param notify  notify listeners?
     *
     * @see #getSeriesVisible(int)
     */
    void setSeriesVisible(int series, Boolean visible, boolean notify);

    /**
     * Returns the default visibility for all series.
     *
     * @return The default visibility.
     *
     * @see #setDefaultSeriesVisible(boolean)
     */
    boolean getDefaultSeriesVisible();

    /**
     * Sets the default visibility and sends a {@link RendererChangeEvent} to all
     * registered listeners.
     *
     * @param visible  the flag.
     *
     * @see #getDefaultSeriesVisible()
     */
    void setDefaultSeriesVisible(boolean visible);

    /**
     * Sets the default visibility and, if requested, sends
     * a {@link RendererChangeEvent} to all registered listeners.
     *
     * @param visible  the visibility.
     * @param notify  notify listeners?
     *
     * @see #getDefaultSeriesVisible()
     */
    void setDefaultSeriesVisible(boolean visible, boolean notify);

    // SERIES VISIBLE IN LEGEND (not yet respected by all renderers)

    /**
     * Returns {@code true} if the series should be shown in the legend,
     * and {@code false} otherwise.
     *
     * @param series  the series index.
     *
     * @return A boolean.
     */
    boolean isSeriesVisibleInLegend(int series);

    /**
     * Returns the flag that controls whether a series is visible in the
     * legend.  This method returns only the "per series" settings - to
     * incorporate the override and base settings as well, you need to use the
     * {@link #isSeriesVisibleInLegend(int)} method.
     *
     * @param series  the series index (zero-based).
     *
     * @return The flag (possibly {@code null}).
     *
     * @see #setSeriesVisibleInLegend(int, Boolean)
     */
    Boolean getSeriesVisibleInLegend(int series);

    /**
     * Sets the flag that controls whether a series is visible in the legend
     * and sends a {@link RendererChangeEvent} to all registered listeners.
     *
     * @param series  the series index (zero-based).
     * @param visible  the flag ({@code null} permitted).
     *
     * @see #getSeriesVisibleInLegend(int)
     */
    void setSeriesVisibleInLegend(int series, Boolean visible);

    /**
     * Sets the flag that controls whether a series is visible in the legend
     * and, if requested, sends a {@link RendererChangeEvent} to all registered
     * listeners.
     *
     * @param series  the series index.
     * @param visible  the flag ({@code null} permitted).
     * @param notify  notify listeners?
     *
     * @see #getSeriesVisibleInLegend(int)
     */
    void setSeriesVisibleInLegend(int series, Boolean visible, boolean notify);

    /**
     * Returns the default visibility in the legend for all series.
     *
     * @return The default visibility.
     *
     * @see #setDefaultSeriesVisibleInLegend(boolean)
     */
    boolean getDefaultSeriesVisibleInLegend();

    /**
     * Sets the default visibility in the legend and sends a
     * {@link RendererChangeEvent} to all registered listeners.
     *
     * @param visible  the flag.
     *
     * @see #getDefaultSeriesVisibleInLegend()
     */
    void setDefaultSeriesVisibleInLegend(boolean visible);

    /**
     * Sets the default visibility in the legend and, if requested, sends
     * a {@link RendererChangeEvent} to all registered listeners.
     *
     * @param visible  the visibility.
     * @param notify  notify listeners?
     *
     * @see #getDefaultSeriesVisibleInLegend()
     */
    void setDefaultSeriesVisibleInLegend(boolean visible, boolean notify);


    //// PAINT /////////////////////////////////////////////////////////////////

    /**
     * Returns the paint used to fill data items as they are drawn.
     *
     * @param row  the row (or series) index (zero-based).
     * @param column  the column (or category) index (zero-based).
     *
     * @return The paint (never {@code null}).
     */
    Paint getItemPaint(int row, int column);

    /**
     * Returns the paint used to fill an item drawn by the renderer.
     *
     * @param series  the series index (zero-based).
     *
     * @return The paint (possibly {@code null}).
     *
     * @see #setSeriesPaint(int, Paint)
     */
    Paint getSeriesPaint(int series);

    /**
     * Sets the paint used for a series and sends a {@link RendererChangeEvent}
     * to all registered listeners.
     *
     * @param series  the series index (zero-based).
     * @param paint  the paint ({@code null} permitted).
     *
     * @see #getSeriesPaint(int)
     */
    void setSeriesPaint(int series, Paint paint);

    /**
     * Sets the paint used for a series and, if requested, sends a 
     * {@link RendererChangeEvent} to all registered listeners.
     *
     * @param series  the series index (zero-based).
     * @param paint  the paint ({@code null} permitted).
     * @param notify  send change event?
     *
     * @see #getSeriesPaint(int)
     */
    void setSeriesPaint(int series, Paint paint, boolean notify);

    /**
     * Returns the default paint.  During rendering, a renderer will first look
     * up the series paint and, if this is {@code null}, it will use the
     * default paint.
     *
     * @return The default paint (never {@code null}).
     *
     * @see #setDefaultPaint(Paint)
     */
    Paint getDefaultPaint();

    /**
     * Sets the default paint and sends a {@link RendererChangeEvent} to all
     * registered listeners.
     *
     * @param paint  the paint ({@code null} not permitted).
     *
     * @see #getDefaultPaint()
     */
    void setDefaultPaint(Paint paint);

    /**
     * Sets the default paint and sends a {@link RendererChangeEvent} to all
     * registered listeners if requested.
     *
     * @param paint  the paint ({@code null} not permitted).
     * @param notify  send change event?
     *
     * @see #getDefaultPaint()
     */
    void setDefaultPaint(Paint paint, boolean notify);

    //// FILL PAINT /////////////////////////////////////////////////////////

    /**
     * Returns the paint used to fill data items as they are drawn.
     *
     * @param row  the row (or series) index (zero-based).
     * @param column  the column (or category) index (zero-based).
     *
     * @return The paint (never {@code null}).
     */
    Paint getItemFillPaint(int row, int column);

    /**
     * Returns the paint used to fill an item drawn by the renderer.
     *
     * @param series  the series (zero-based index).
     *
     * @return The paint (possibly {@code null}).
     *
     * @see #setSeriesFillPaint(int, Paint)
     */
    Paint getSeriesFillPaint(int series);

    /**
     * Sets the paint used for a series outline and sends a
     * {@link RendererChangeEvent} to all registered listeners.
     *
     * @param series  the series index (zero-based).
     * @param paint  the paint ({@code null} permitted).
     *
     * @see #getSeriesFillPaint(int)
     */
    void setSeriesFillPaint(int series, Paint paint);
=====================================================================
Found a 22 line (193 tokens) duplication in the following files: 
Starting at line 206 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/test/java/org/jfree/data/xy/XIntervalSeriesTest.java
Starting at line 207 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/test/java/org/jfree/data/xy/YIntervalSeriesTest.java

        XIntervalSeries<String> series = new XIntervalSeries<>("Series", false, true);
        series.add(5.0, 5.50, 5.50, 5.50);
        series.add(5.1, 5.51, 5.51, 5.51);
        series.add(6.0, 6.6, 6.6, 6.6);
        series.add(3.0, 3.3, 3.3, 3.3);
        series.add(4.0, 4.4, 4.4, 4.4);
        series.add(2.0, 2.2, 2.2, 2.2);
        series.add(1.0, 1.1, 1.1, 1.1);
        assertEquals(5.5, series.getYValue(0), EPSILON);
        assertEquals(5.51, series.getYValue(1), EPSILON);
        assertEquals(6.6, series.getYValue(2), EPSILON);
        assertEquals(3.3, series.getYValue(3), EPSILON);
        assertEquals(4.4, series.getYValue(4), EPSILON);
        assertEquals(2.2, series.getYValue(5), EPSILON);
        assertEquals(1.1, series.getYValue(6), EPSILON);
    }

    /**
     * A simple check that the maximumItemCount attribute is working.
     */
    @Test
    public void testSetMaximumItemCount() {
=====================================================================
Found a 107 line (184 tokens) duplication in the following files: 
Starting at line 265 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/main/java/org/jfree/data/xy/CategoryTableXYDataset.java
Starting at line 525 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/main/java/org/jfree/data/xy/DefaultTableXYDataset.java

    }

    /**
     * Returns the minimum x-value in the dataset.
     *
     * @param includeInterval  a flag that determines whether or not the
     *                         x-interval is taken into account.
     *
     * @return The minimum value.
     */
    @Override
    public double getDomainLowerBound(boolean includeInterval) {
        return this.intervalDelegate.getDomainLowerBound(includeInterval);
    }

    /**
     * Returns the maximum x-value in the dataset.
     *
     * @param includeInterval  a flag that determines whether or not the
     *                         x-interval is taken into account.
     *
     * @return The maximum value.
     */
    @Override
    public double getDomainUpperBound(boolean includeInterval) {
        return this.intervalDelegate.getDomainUpperBound(includeInterval);
    }

    /**
     * Returns the range of the values in this dataset's domain.
     *
     * @param includeInterval  a flag that determines whether or not the
     *                         x-interval is taken into account.
     *
     * @return The range.
     */
    @Override
    public Range getDomainBounds(boolean includeInterval) {
        if (includeInterval) {
            return this.intervalDelegate.getDomainBounds(includeInterval);
        }
        else {
            return DatasetUtils.iterateDomainBounds(this, includeInterval);
        }
    }

    /**
     * Returns the interval position factor.
     *
     * @return The interval position factor.
     */
    public double getIntervalPositionFactor() {
        return this.intervalDelegate.getIntervalPositionFactor();
    }

    /**
     * Sets the interval position factor. Must be between 0.0 and 1.0 inclusive.
     * If the factor is 0.5, the gap is in the middle of the x values. If it
     * is lesser than 0.5, the gap is farther to the left and if greater than
     * 0.5 it gets farther to the right.
     *
     * @param d  the new interval position factor.
     */
    public void setIntervalPositionFactor(double d) {
        this.intervalDelegate.setIntervalPositionFactor(d);
        fireDatasetChanged();
    }

    /**
     * Returns the full interval width.
     *
     * @return The interval width to use.
     */
    public double getIntervalWidth() {
        return this.intervalDelegate.getIntervalWidth();
    }

    /**
     * Sets the interval width to a fixed value, and sends a
     * {@link DatasetChangeEvent} to all registered listeners.
     *
     * @param d  the new interval width (must be &gt; 0).
     */
    public void setIntervalWidth(double d) {
        this.intervalDelegate.setFixedIntervalWidth(d);
        fireDatasetChanged();
    }

    /**
     * Returns whether the interval width is automatically calculated or not.
     *
     * @return whether the width is automatically calculated or not.
     */
    public boolean isAutoWidth() {
        return this.intervalDelegate.isAutoWidth();
    }

    /**
     * Sets the flag that indicates whether the interval width is automatically
     * calculated or not.
     *
     * @param b  the flag.
     */
    public void setAutoWidth(boolean b) {
        this.intervalDelegate.setAutoWidth(b);
        fireDatasetChanged();
    }
=====================================================================
Found a 47 line (183 tokens) duplication in the following files: 
Starting at line 242 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/main/java/org/jfree/chart/renderer/category/StatisticalBarRenderer.java
Starting at line 389 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/main/java/org/jfree/chart/renderer/category/StatisticalBarRenderer.java

        double rectY = calculateBarW0(plot, PlotOrientation.HORIZONTAL, 
                dataArea, domainAxis, state, visibleRow, column);

        // BAR X
        Number meanValue = dataset.getMeanValue(row, column);
        if (meanValue == null) {
            return;
        }
        double value = meanValue.doubleValue();
        double base = 0.0;
        double lclip = getLowerClip();
        double uclip = getUpperClip();

        if (uclip <= 0.0) {  // cases 1, 2, 3 and 4
            if (value >= uclip) {
                return; // bar is not visible
            }
            base = uclip;
            if (value <= lclip) {
                value = lclip;
            }
        }
        else if (lclip <= 0.0) { // cases 5, 6, 7 and 8
            if (value >= uclip) {
                value = uclip;
            }
            else {
                if (value <= lclip) {
                    value = lclip;
                }
            }
        }
        else { // cases 9, 10, 11 and 12
            if (value <= lclip) {
                return; // bar is not visible
            }
            base = getLowerClip();
            if (value >= uclip) {
               value = uclip;
            }
        }

        RectangleEdge yAxisLocation = plot.getRangeAxisEdge();
        double transY1 = rangeAxis.valueToJava2D(base, dataArea, yAxisLocation);
        double transY2 = rangeAxis.valueToJava2D(value, dataArea,
                yAxisLocation);
        double rectX = Math.min(transY2, transY1);
=====================================================================
Found a 23 line (183 tokens) duplication in the following files: 
Starting at line 85 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/main/java/org/jfree/chart/swing/editor/LCBLayout.java
Starting at line 165 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/main/java/org/jfree/chart/swing/editor/LCBLayout.java

    public Dimension preferredLayoutSize(Container parent) {

        synchronized (parent.getTreeLock()) {
            Insets insets = parent.getInsets();
            int ncomponents = parent.getComponentCount();
            int nrows = ncomponents / COLUMNS;
            for (int c = 0; c < COLUMNS; c++) {
                for (int r = 0; r < nrows; r++) {
                    Component component = parent.getComponent(r * COLUMNS + c);
                    Dimension d = component.getPreferredSize();
                    if (this.colWidth[c] < d.width) {
                        this.colWidth[c] = d.width;
                    }
                    if (this.rowHeight[r] < d.height) {
                        this.rowHeight[r] = d.height;
                    }
                }
            }
            int totalHeight = this.vGap * (nrows - 1);
            for (int r = 0; r < nrows; r++) {
                totalHeight = totalHeight + this.rowHeight[r];
            }
            int totalWidth = this.colWidth[0] + this.labelGap 
=====================================================================
Found a 23 line (183 tokens) duplication in the following files: 
Starting at line 362 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/main/java/org/jfree/chart/text/TextUtils.java
Starting at line 576 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/main/java/org/jfree/chart/text/TextUtils.java

        float halfAscent = ascent / 2.0f;
        float descent = metrics.getDescent();
        float leading = metrics.getLeading();
        float xAdj = 0.0f;
        float yAdj = 0.0f;

        if (anchor.isHorizontalCenter()) {
            xAdj = (float) -bounds.getWidth() / 2.0f;
        } else if (anchor.isRight()) {
            xAdj = (float) -bounds.getWidth();
        }

        if (anchor.isTop()) {
            yAdj = -descent - leading + (float) bounds.getHeight();
        } else if (anchor.isHalfAscent()) {
            yAdj = halfAscent;
        } else if (anchor.isVerticalCenter()) {
            yAdj = -descent - leading + (float) (bounds.getHeight() / 2.0);
        } else if (anchor.isBaseline()) {
            yAdj = 0.0f;
        } else if (anchor.isBottom()) {
            yAdj = -metrics.getDescent() - metrics.getLeading();
        }
=====================================================================
Found a 96 line (183 tokens) duplication in the following files: 
Starting at line 233 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/main/java/org/jfree/data/xy/DefaultTableXYDataset.java
Starting at line 298 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/main/java/org/jfree/data/xy/XYSeriesCollection.java

    }

    /**
     * Returns the number of items in the specified series.
     *
     * @param series  the series (zero-based index).
     *
     * @return The number of items in the specified series.
     */
    @Override
    public int getItemCount(int series) {
        // check arguments...delegated
        return getSeries(series).getItemCount();
    }

    /**
     * Returns the x-value for the specified series and item.
     *
     * @param series  the series (zero-based index).
     * @param item  the item (zero-based index).
     *
     * @return The x-value for the specified series and item.
     */
    @Override
    public Number getX(int series, int item) {
        XYSeries<S> s = this.data.get(series);
        return s.getX(item);

    }

    /**
     * Returns the starting X value for the specified series and item.
     *
     * @param series  the series (zero-based index).
     * @param item  the item (zero-based index).
     *
     * @return The starting X value.
     */
    @Override
    public Number getStartX(int series, int item) {
        return this.intervalDelegate.getStartX(series, item);
    }

    /**
     * Returns the ending X value for the specified series and item.
     *
     * @param series  the series (zero-based index).
     * @param item  the item (zero-based index).
     *
     * @return The ending X value.
     */
    @Override
    public Number getEndX(int series, int item) {
        return this.intervalDelegate.getEndX(series, item);
    }

    /**
     * Returns the y-value for the specified series and item.
     *
     * @param series  the series (zero-based index).
     * @param index  the index of the item of interest (zero-based).
     *
     * @return The y-value for the specified series and item (possibly
     *         {@code null}).
     */
    @Override
    public Number getY(int series, int index) {
        XYSeries<S> s = this.data.get(series);
        return s.getY(index);
    }

    /**
     * Returns the starting Y value for the specified series and item.
     *
     * @param series  the series (zero-based index).
     * @param item  the item (zero-based index).
     *
     * @return The starting Y value.
     */
    @Override
    public Number getStartY(int series, int item) {
        return getY(series, item);
    }

    /**
     * Returns the ending Y value for the specified series and item.
     *
     * @param series  the series (zero-based index).
     * @param item  the item (zero-based index).
     *
     * @return The ending Y value.
     */
    @Override
    public Number getEndY(int series, int item) {
        return getY(series, item);
    }
=====================================================================
Found a 41 line (182 tokens) duplication in the following files: 
Starting at line 557 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/main/java/org/jfree/chart/renderer/category/LineAndShapeRenderer.java
Starting at line 444 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/main/java/org/jfree/chart/renderer/category/ScatterRenderer.java

    }

    /**
     * Returns a legend item for a series.
     *
     * @param datasetIndex  the dataset index (zero-based).
     * @param series  the series index (zero-based).
     *
     * @return The legend item.
     */
    @Override
    public LegendItem getLegendItem(int datasetIndex, int series) {

        CategoryPlot cp = getPlot();
        if (cp == null) {
            return null;
        }

        if (isSeriesVisible(series) && isSeriesVisibleInLegend(series)) {
            CategoryDataset dataset = cp.getDataset(datasetIndex);
            String label = getLegendItemLabelGenerator().generateLabel(
                    dataset, series);
            String description = label;
            String toolTipText = null;
            if (getLegendItemToolTipGenerator() != null) {
                toolTipText = getLegendItemToolTipGenerator().generateLabel(
                        dataset, series);
            }
            String urlText = null;
            if (getLegendItemURLGenerator() != null) {
                urlText = getLegendItemURLGenerator().generateLabel(
                        dataset, series);
            }
            Shape shape = lookupLegendShape(series);
            Paint paint = lookupSeriesPaint(series);
            Paint fillPaint = (this.useFillPaint
                    ? getItemFillPaint(series, 0) : paint);
            boolean shapeOutlineVisible = this.drawOutlines;
            Paint outlinePaint = (this.useOutlinePaint
                    ? getItemOutlinePaint(series, 0) : paint);
            Stroke outlineStroke = lookupSeriesOutlineStroke(series);
=====================================================================
Found a 30 line (182 tokens) duplication in the following files: 
Starting at line 182 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/test/java/org/jfree/chart/annotations/XYBoxAnnotationTest.java
Starting at line 118 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/test/java/org/jfree/chart/annotations/XYTitleAnnotationTest.java

        XYBoxAnnotation a2 = TestUtils.serialised(a1);
        assertEquals(a1, a2);
    }

    /**
     * Draws the chart with a {@code null} info object to make sure that
     * no exceptions are thrown.
     */
    @Test
    public void testDrawWithNullInfo() {
        try {
            DefaultTableXYDataset<String> dataset = new DefaultTableXYDataset<>();

            XYSeries<String> s1 = new XYSeries<>("Series 1", true, false);
            s1.add(5.0, 5.0);
            s1.add(10.0, 15.5);
            s1.add(15.0, 9.5);
            s1.add(20.0, 7.5);
            dataset.addSeries(s1);

            XYSeries<String> s2 = new XYSeries<>("Series 2", true, false);
            s2.add(5.0, 5.0);
            s2.add(10.0, 15.5);
            s2.add(15.0, 9.5);
            s2.add(20.0, 3.5);
            dataset.addSeries(s2);
            XYPlot<String> plot = new XYPlot<>(dataset,
                    new NumberAxis("X"), new NumberAxis("Y"),
                    new XYLineAndShapeRenderer());
            plot.addAnnotation(new XYBoxAnnotation(10.0, 12.0, 3.0, 4.0,
=====================================================================
Found a 28 line (182 tokens) duplication in the following files: 
Starting at line 183 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/test/java/org/jfree/chart/renderer/xy/StandardXYItemRendererTest.java
Starting at line 161 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/test/java/org/jfree/chart/renderer/xy/XYDifferenceRendererTest.java
Starting at line 131 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/test/java/org/jfree/chart/renderer/xy/XYDotRendererTest.java

        StandardXYItemRenderer r2 = TestUtils.serialised(r1);
        assertEquals(r1, r2);
    }

    /**
     * A check for the datasetIndex and seriesIndex fields in the LegendItem
     * returned by the getLegendItem() method.
     */
    @Test
    public void testGetLegendItemSeriesIndex() {
        XYSeriesCollection<String> d1 = new XYSeriesCollection<>();
        XYSeries<String> s1 = new XYSeries<>("S1");
        s1.add(1.0, 1.1);
        XYSeries<String> s2 = new XYSeries<>("S2");
        s2.add(1.0, 1.1);
        d1.addSeries(s1);
        d1.addSeries(s2);

        XYSeriesCollection<String> d2 = new XYSeriesCollection<>();
        XYSeries<String> s3 = new XYSeries<>("S3");
        s3.add(1.0, 1.1);
        XYSeries<String> s4 = new XYSeries<>("S4");
        s4.add(1.0, 1.1);
        XYSeries<String> s5 = new XYSeries<>("S5");
        s5.add(1.0, 1.1);
        d2.addSeries(s3);
        d2.addSeries(s4);
        d2.addSeries(s5);
=====================================================================
Found a 18 line (182 tokens) duplication in the following files: 
Starting at line 170 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/test/java/org/jfree/data/xy/CategoryTableXYDatasetTest.java
Starting at line 150 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/test/java/org/jfree/data/xy/DefaultTableXYDatasetTest.java

        d1.add(9.0, 2.2, "Series 2");

        assertEquals(3.0, d1.getXValue(1, 0), EPSILON);
        assertEquals(7.0, d1.getXValue(1, 1), EPSILON);
        assertEquals(7.5, d1.getXValue(1, 2), EPSILON);
        assertEquals(9.0, d1.getXValue(1, 3), EPSILON);

        assertEquals(7.25, d1.getStartXValue(1, 2), EPSILON);
        assertEquals(8.75, d1.getStartXValue(1, 3), EPSILON);
        assertEquals(7.75, d1.getEndXValue(1, 2), EPSILON);
        assertEquals(9.25, d1.getEndXValue(1, 3), EPSILON);

        // and check the first series too...
        assertEquals(2.75, d1.getStartXValue(0, 0), EPSILON);
        assertEquals(6.75, d1.getStartXValue(0, 1), EPSILON);
        assertEquals(3.25, d1.getEndXValue(0, 0), EPSILON);
        assertEquals(7.25, d1.getEndXValue(0, 1), EPSILON);
    }
=====================================================================
Found a 38 line (179 tokens) duplication in the following files: 
Starting at line 1017 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/test/java/org/jfree/chart/plot/CategoryPlotTest.java
Starting at line 1121 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/test/java/org/jfree/chart/plot/XYPlotTest.java

        CategoryPlot<String, String> plot = new CategoryPlot<>(dataset, xAxis, 
                yAxis, renderer);
        assertEquals(yAxis, plot.getRangeAxisForDataset(0));

        // should get IllegalArgumentException for negative index
        boolean pass = false;
        try {
            plot.getRangeAxisForDataset(-1);
        }
        catch (IllegalArgumentException e) {
            pass = true;
        }
        assertTrue(pass);

        // if multiple axes are mapped, the first in the list should be
        // returned...
        NumberAxis yAxis2 = new NumberAxis("Y2");
        plot.setRangeAxis(1, yAxis2);
        assertEquals(yAxis, plot.getRangeAxisForDataset(0));

        plot.mapDatasetToRangeAxis(0, 1);
        assertEquals(yAxis2, plot.getRangeAxisForDataset(0));

        List<Integer> axisIndices = Arrays.asList(new Integer[] {0, 1});
        plot.mapDatasetToRangeAxes(0, axisIndices);
        assertEquals(yAxis, plot.getRangeAxisForDataset(0));

        axisIndices = Arrays.asList(new Integer[] {1, 2});
        plot.mapDatasetToRangeAxes(0, axisIndices);
        assertEquals(yAxis2, plot.getRangeAxisForDataset(0));
    }
    
    /**
     * Datasets are now stored in a Map, and it should be possible to assign
     * them an arbitrary key (index).
     */
    @Test
    public void testDatasetIndices() {
=====================================================================
Found a 54 line (177 tokens) duplication in the following files: 
Starting at line 458 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/main/java/org/jfree/chart/plot/dial/ArcDialFrame.java
Starting at line 300 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/main/java/org/jfree/chart/plot/dial/StandardDialFrame.java

        temp = Double.doubleToLongBits(this.outerRadius);
        result = 37 * result + (int) (temp ^ (temp >>> 32));
        result = 37 * result + HashUtils.hashCodeForPaint(
                this.backgroundPaint);
        result = 37 * result + HashUtils.hashCodeForPaint(
                this.foregroundPaint);
        result = 37 * result + this.stroke.hashCode();
        return result;
    }

    /**
     * Returns a clone of this instance.
     *
     * @return A clone.
     *
     * @throws CloneNotSupportedException if any attribute of this instance
     *     cannot be cloned.
     */
    @Override
    public Object clone() throws CloneNotSupportedException {
        return super.clone();
    }

    /**
     * Provides serialization support.
     *
     * @param stream  the output stream.
     *
     * @throws IOException  if there is an I/O error.
     */
    private void writeObject(ObjectOutputStream stream) throws IOException {
        stream.defaultWriteObject();
        SerialUtils.writePaint(this.backgroundPaint, stream);
        SerialUtils.writePaint(this.foregroundPaint, stream);
        SerialUtils.writeStroke(this.stroke, stream);
    }

    /**
     * Provides serialization support.
     *
     * @param stream  the input stream.
     *
     * @throws IOException  if there is an I/O error.
     * @throws ClassNotFoundException  if there is a classpath problem.
     */
    private void readObject(ObjectInputStream stream)
            throws IOException, ClassNotFoundException {
        stream.defaultReadObject();
        this.backgroundPaint = SerialUtils.readPaint(stream);
        this.foregroundPaint = SerialUtils.readPaint(stream);
        this.stroke = SerialUtils.readStroke(stream);
    }

}
=====================================================================
Found a 52 line (177 tokens) duplication in the following files: 
Starting at line 235 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/main/java/org/jfree/chart/renderer/xy/DeviationRenderer.java
Starting at line 78 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/main/java/org/jfree/chart/renderer/xy/DeviationStepRenderer.java

        return (pass == 1);
    }

    /**
     * Draws the visual representation of a single data item.
     *
     * @param g2  the graphics device.
     * @param state  the renderer state.
     * @param dataArea  the area within which the data is being drawn.
     * @param info  collects information about the drawing.
     * @param plot  the plot (can be used to obtain standard color
     *              information etc).
     * @param domainAxis  the domain axis.
     * @param rangeAxis  the range axis.
     * @param dataset  the dataset.
     * @param series  the series index (zero-based).
     * @param item  the item index (zero-based).
     * @param crosshairState  crosshair information for the plot
     *                        ({@code null} permitted).
     * @param pass  the pass index.
     */
    @Override
    public void drawItem(Graphics2D g2, XYItemRendererState state,
            Rectangle2D dataArea, PlotRenderingInfo info, XYPlot plot,
            ValueAxis domainAxis, ValueAxis rangeAxis, XYDataset dataset,
            int series, int item, CrosshairState crosshairState, int pass) {

        // do nothing if item is not visible
        if (!getItemVisible(series, item)) {
            return;
        }

        // first pass draws the shading
        if (pass == 0) {
            IntervalXYDataset intervalDataset = (IntervalXYDataset) dataset;
            State drState = (State) state;

            double x = intervalDataset.getXValue(series, item);
            double yLow = intervalDataset.getStartYValue(series, item);
            double yHigh  = intervalDataset.getEndYValue(series, item);

            RectangleEdge xAxisLocation = plot.getDomainAxisEdge();
            RectangleEdge yAxisLocation = plot.getRangeAxisEdge();

            double xx = domainAxis.valueToJava2D(x, dataArea, xAxisLocation);
            double yyLow = rangeAxis.valueToJava2D(yLow, dataArea,
                    yAxisLocation);
            double yyHigh = rangeAxis.valueToJava2D(yHigh, dataArea,
                    yAxisLocation);

            PlotOrientation orientation = plot.getOrientation();
            if (orientation == PlotOrientation.HORIZONTAL) {
=====================================================================
Found a 48 line (177 tokens) duplication in the following files: 
Starting at line 62 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/test/java/org/jfree/chart/XYAreaChartTest.java
Starting at line 62 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/test/java/org/jfree/chart/XYStepAreaChartTest.java

public class XYAreaChartTest {

    /** A chart. */
    private JFreeChart chart;

    /**
     * Common test setup.
     */
    @BeforeEach
    public void setUp() {
        this.chart = createChart();
    }

    /**
     * Draws the chart with a null info object to make sure that no exceptions
     * are thrown (a problem that was occurring at one point).
     */
    @Test
    public void testDrawWithNullInfo() {
        try {
            BufferedImage image = new BufferedImage(200 , 100,
                    BufferedImage.TYPE_INT_RGB);
            Graphics2D g2 = image.createGraphics();
            this.chart.draw(g2, new Rectangle2D.Double(0, 0, 200, 100), null,
                    null);
            g2.dispose();
        }
        catch (Exception e) {
          fail("No exception should be triggered.");
        }
    }

    /**
     * Replaces the dataset and checks that it has changed as expected.
     */
    @Test
    public void testReplaceDataset() {

        // create a dataset...
        XYSeries<String> series1 = new XYSeries<>("Series 1");
        series1.add(10.0, 10.0);
        series1.add(20.0, 20.0);
        series1.add(30.0, 30.0);
        XYDataset<String> dataset = new XYSeriesCollection<>(series1);

        LocalListener l = new LocalListener();
        this.chart.addChangeListener(l);
        XYPlot<String> plot = (XYPlot<String>) this.chart.getPlot();
=====================================================================
Found a 26 line (176 tokens) duplication in the following files: 
Starting at line 659 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/main/java/org/jfree/chart/axis/DateAxis.java
Starting at line 946 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/main/java/org/jfree/chart/axis/PeriodAxis.java

        if (RectangleEdge.isTopOrBottom(edge)) {
            double minX = area.getX();
            double maxX = area.getMaxX();
            if (isInverted()) {
                result = maxX + ((value - axisMin) / (axisMax - axisMin))
                         * (minX - maxX);
            }
            else {
                result = minX + ((value - axisMin) / (axisMax - axisMin))
                         * (maxX - minX);
            }
        }
        else if (RectangleEdge.isLeftOrRight(edge)) {
            double minY = area.getMinY();
            double maxY = area.getMaxY();
            if (isInverted()) {
                result = minY + (((value - axisMin) / (axisMax - axisMin))
                         * (maxY - minY));
            }
            else {
                result = maxY - (((value - axisMin) / (axisMax - axisMin))
                         * (maxY - minY));
            }
        }
        return result;
    }
=====================================================================
Found a 22 line (175 tokens) duplication in the following files: 
Starting at line 59 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/test/java/org/jfree/chart/renderer/category/StackedAreaRendererTest.java
Starting at line 121 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/test/java/org/jfree/chart/renderer/category/StackedBarRendererTest.java

        StackedAreaRenderer r = new StackedAreaRenderer();
        assertNull(r.findRangeBounds(null));

        // an empty dataset should return a null range
        DefaultCategoryDataset<String, String> dataset = new DefaultCategoryDataset<>();
        assertNull(r.findRangeBounds(dataset));

        dataset.addValue(1.0, "R1", "C1");
        assertEquals(new Range(0.0, 1.0), r.findRangeBounds(dataset));

        dataset.addValue(-2.0, "R1", "C2");
        assertEquals(new Range(-2.0, 1.0), r.findRangeBounds(dataset));

        dataset.addValue(null, "R1", "C3");
        assertEquals(new Range(-2.0, 1.0), r.findRangeBounds(dataset));

        dataset.addValue(2.0, "R2", "C1");
        assertEquals(new Range(-2.0, 3.0), r.findRangeBounds(dataset));

        dataset.addValue(null, "R2", "C2");
        assertEquals(new Range(-2.0, 3.0), r.findRangeBounds(dataset));
    }
=====================================================================
Found a 23 line (174 tokens) duplication in the following files: 
Starting at line 996 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/main/java/org/jfree/chart/renderer/category/AbstractCategoryItemRenderer.java
Starting at line 1225 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/main/java/org/jfree/chart/renderer/xy/AbstractXYItemRenderer.java

            double end2d = axis.valueToJava2D(end, dataArea,
                    plot.getRangeAxisEdge());
            double low = Math.min(start2d, end2d);
            double high = Math.max(start2d, end2d);

            PlotOrientation orientation = plot.getOrientation();
            Rectangle2D rect = null;
            if (orientation == PlotOrientation.HORIZONTAL) {
                // clip left and right bounds to data area
                low = Math.max(low, dataArea.getMinX());
                high = Math.min(high, dataArea.getMaxX());
                rect = new Rectangle2D.Double(low,
                        dataArea.getMinY(), high - low,
                        dataArea.getHeight());
            }
            else if (orientation == PlotOrientation.VERTICAL) {
                // clip top and bottom bounds to data area
                low = Math.max(low, dataArea.getMinY());
                high = Math.min(high, dataArea.getMaxY());
                rect = new Rectangle2D.Double(dataArea.getMinX(),
                        low, dataArea.getWidth(),
                        high - low);
            }
=====================================================================
Found a 29 line (173 tokens) duplication in the following files: 
Starting at line 125 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/test/java/org/jfree/chart/renderer/xy/XYAreaRenderer2Test.java
Starting at line 170 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/test/java/org/jfree/chart/renderer/xy/XYAreaRendererTest.java
Starting at line 139 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/test/java/org/jfree/chart/renderer/xy/XYStepAreaRendererTest.java
Starting at line 120 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/test/java/org/jfree/chart/renderer/xy/XYStepRendererTest.java

        XYAreaRenderer2 r2 = TestUtils.serialised(r1);
        assertEquals(r1, r2);
    }

    /**
     * Draws the chart with a {@code null} info object to make sure that
     * no exceptions are thrown (particularly by code in the renderer).
     */
    @Test
    public void testDrawWithNullInfo() {
        try {
            DefaultTableXYDataset<String> dataset = new DefaultTableXYDataset<>();

            XYSeries<String> s1 = new XYSeries<>("Series 1", true, false);
            s1.add(5.0, 5.0);
            s1.add(10.0, 15.5);
            s1.add(15.0, 9.5);
            s1.add(20.0, 7.5);
            dataset.addSeries(s1);

            XYSeries<String> s2 = new XYSeries<>("Series 2", true, false);
            s2.add(5.0, 5.0);
            s2.add(10.0, 15.5);
            s2.add(15.0, 9.5);
            s2.add(20.0, 3.5);
            dataset.addSeries(s2);
            XYPlot<String> plot = new XYPlot<>(dataset,
                    new NumberAxis("X"), new NumberAxis("Y"),
                    new XYAreaRenderer2());
=====================================================================
Found a 27 line (169 tokens) duplication in the following files: 
Starting at line 184 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/test/java/org/jfree/chart/renderer/xy/StandardXYItemRendererTest.java
Starting at line 322 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/test/java/org/jfree/chart/renderer/xy/XYBarRendererTest.java
Starting at line 162 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/test/java/org/jfree/chart/renderer/xy/XYDifferenceRendererTest.java
Starting at line 132 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/test/java/org/jfree/chart/renderer/xy/XYDotRendererTest.java
Starting at line 259 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/test/java/org/jfree/chart/renderer/xy/XYLineAndShapeRendererTest.java

        assertEquals(r1, r2);
    }

    /**
     * A check for the datasetIndex and seriesIndex fields in the LegendItem
     * returned by the getLegendItem() method.
     */
    @Test
    public void testGetLegendItemSeriesIndex() {
        XYSeriesCollection<String> d1 = new XYSeriesCollection<>();
        XYSeries<String> s1 = new XYSeries<>("S1");
        s1.add(1.0, 1.1);
        XYSeries<String> s2 = new XYSeries<>("S2");
        s2.add(1.0, 1.1);
        d1.addSeries(s1);
        d1.addSeries(s2);

        XYSeriesCollection<String> d2 = new XYSeriesCollection<>();
        XYSeries<String> s3 = new XYSeries<>("S3");
        s3.add(1.0, 1.1);
        XYSeries<String> s4 = new XYSeries<>("S4");
        s4.add(1.0, 1.1);
        XYSeries<String> s5 = new XYSeries<>("S5");
        s5.add(1.0, 1.1);
        d2.addSeries(s3);
        d2.addSeries(s4);
        d2.addSeries(s5);
=====================================================================
Found a 47 line (169 tokens) duplication in the following files: 
Starting at line 62 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/test/java/org/jfree/chart/TimeSeriesChartTest.java
Starting at line 62 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/test/java/org/jfree/chart/XYAreaChartTest.java
Starting at line 64 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/test/java/org/jfree/chart/XYBarChartTest.java
Starting at line 62 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/test/java/org/jfree/chart/XYLineChartTest.java
Starting at line 62 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/test/java/org/jfree/chart/XYStepAreaChartTest.java
Starting at line 63 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/test/java/org/jfree/chart/XYStepChartTest.java

public class TimeSeriesChartTest {

    /** A chart. */
    private JFreeChart chart;

    /**
     * Common test setup.
     */
    @BeforeEach
    public void setUp() {
        this.chart = createChart();
    }

    /**
     * Draws the chart with a null info object to make sure that no exceptions
     * are thrown (a problem that was occurring at one point).
     */
    @Test
    public void testDrawWithNullInfo() {
        try {
            BufferedImage image = new BufferedImage(200 , 100,
                    BufferedImage.TYPE_INT_RGB);
            Graphics2D g2 = image.createGraphics();
            this.chart.draw(g2, new Rectangle2D.Double(0, 0, 200, 100), null,
                    null);
            g2.dispose();
        }
        catch (Exception e) {
          fail("No exception should be triggered.");
        }
    }

    /**
     * Replaces the dataset and checks that it has changed as expected.
     */
    @Test
    public void testReplaceDataset() {

        // create a dataset...
        XYSeries<String> series1 = new XYSeries<>("Series 1");
        series1.add(10.0, 10.0);
        series1.add(20.0, 20.0);
        series1.add(30.0, 30.0);
        XYDataset<String> dataset = new XYSeriesCollection<>(series1);

        LocalListener l = new LocalListener();
        this.chart.addChangeListener(l);
=====================================================================
Found a 45 line (168 tokens) duplication in the following files: 
Starting at line 111 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/main/java/org/jfree/chart/renderer/category/AreaRenderer.java
Starting at line 805 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/main/java/org/jfree/chart/renderer/category/BarRenderer.java
Starting at line 445 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/main/java/org/jfree/chart/renderer/category/BoxAndWhiskerRenderer.java

    }

    /**
     * Returns a legend item for a series.
     *
     * @param datasetIndex  the dataset index (zero-based).
     * @param series  the series index (zero-based).
     *
     * @return The legend item.
     */
    @Override
    public LegendItem getLegendItem(int datasetIndex, int series) {

        // if there is no plot, there is no dataset to access...
        CategoryPlot cp = getPlot();
        if (cp == null) {
            return null;
        }

        // check that a legend item needs to be displayed...
        if (!isSeriesVisible(series) || !isSeriesVisibleInLegend(series)) {
            return null;
        }

        CategoryDataset dataset = cp.getDataset(datasetIndex);
        String label = getLegendItemLabelGenerator().generateLabel(dataset,
                series);
        String description = label;
        String toolTipText = null;
        if (getLegendItemToolTipGenerator() != null) {
            toolTipText = getLegendItemToolTipGenerator().generateLabel(
                    dataset, series);
        }
        String urlText = null;
        if (getLegendItemURLGenerator() != null) {
            urlText = getLegendItemURLGenerator().generateLabel(dataset,
                    series);
        }
        Shape shape = lookupLegendShape(series);
        Paint paint = lookupSeriesPaint(series);
        Paint outlinePaint = lookupSeriesOutlinePaint(series);
        Stroke outlineStroke = lookupSeriesOutlineStroke(series);

        LegendItem result = new LegendItem(label, description, toolTipText,
                urlText, shape, paint, outlineStroke, outlinePaint);
=====================================================================
Found a 26 line (168 tokens) duplication in the following files: 
Starting at line 185 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/test/java/org/jfree/chart/renderer/xy/StandardXYItemRendererTest.java
Starting at line 161 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/test/java/org/jfree/chart/renderer/xy/XYAreaRenderer2Test.java
Starting at line 206 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/test/java/org/jfree/chart/renderer/xy/XYAreaRendererTest.java
Starting at line 323 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/test/java/org/jfree/chart/renderer/xy/XYBarRendererTest.java
Starting at line 163 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/test/java/org/jfree/chart/renderer/xy/XYDifferenceRendererTest.java
Starting at line 133 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/test/java/org/jfree/chart/renderer/xy/XYDotRendererTest.java
Starting at line 260 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/test/java/org/jfree/chart/renderer/xy/XYLineAndShapeRendererTest.java

    }

    /**
     * A check for the datasetIndex and seriesIndex fields in the LegendItem
     * returned by the getLegendItem() method.
     */
    @Test
    public void testGetLegendItemSeriesIndex() {
        XYSeriesCollection<String> d1 = new XYSeriesCollection<>();
        XYSeries<String> s1 = new XYSeries<>("S1");
        s1.add(1.0, 1.1);
        XYSeries<String> s2 = new XYSeries<>("S2");
        s2.add(1.0, 1.1);
        d1.addSeries(s1);
        d1.addSeries(s2);

        XYSeriesCollection<String> d2 = new XYSeriesCollection<>();
        XYSeries<String> s3 = new XYSeries<>("S3");
        s3.add(1.0, 1.1);
        XYSeries<String> s4 = new XYSeries<>("S4");
        s4.add(1.0, 1.1);
        XYSeries<String> s5 = new XYSeries<>("S5");
        s5.add(1.0, 1.1);
        d2.addSeries(s3);
        d2.addSeries(s4);
        d2.addSeries(s5);
=====================================================================
Found a 230 line (166 tokens) duplication in the following files: 
Starting at line 1170 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/main/java/org/jfree/chart/renderer/category/CategoryItemRenderer.java
Starting at line 1103 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/main/java/org/jfree/chart/renderer/xy/XYItemRenderer.java

    void setDefaultItemLabelPaint(Paint paint, boolean notify);

    // POSITIVE ITEM LABEL POSITION...

    /**
     * Returns the item label position for positive values.
     *
     * @param row  the row index (zero-based).
     * @param column  the column index (zero-based).
     *
     * @return The item label position (never {@code null}).
     */
    ItemLabelPosition getPositiveItemLabelPosition(int row, int column);

    /**
     * Returns the item label position for all positive values in a series.
     *
     * @param series  the series index (zero-based).
     *
     * @return The item label position.
     *
     * @see #setSeriesPositiveItemLabelPosition(int, ItemLabelPosition)
     */
    ItemLabelPosition getSeriesPositiveItemLabelPosition(int series);

    /**
     * Sets the item label position for all positive values in a series and
     * sends a {@link RendererChangeEvent} to all registered listeners.
     *
     * @param series  the series index (zero-based).
     * @param position  the position ({@code null} permitted).
     *
     * @see #getSeriesPositiveItemLabelPosition(int)
     */
    void setSeriesPositiveItemLabelPosition(int series, ItemLabelPosition position);

    /**
     * Sets the item label position for all positive values in a series and (if
     * requested) sends a {@link RendererChangeEvent} to all registered
     * listeners.
     *
     * @param series  the series index (zero-based).
     * @param position  the position ({@code null} permitted).
     * @param notify  notify registered listeners?
     *
     * @see #getSeriesPositiveItemLabelPosition(int)
     */
    void setSeriesPositiveItemLabelPosition(int series, ItemLabelPosition position, boolean notify);

    /**
     * Returns the default positive item label position.
     *
     * @return The position.
     *
     * @see #setDefaultPositiveItemLabelPosition(ItemLabelPosition)
     */
    ItemLabelPosition getDefaultPositiveItemLabelPosition();

    /**
     * Sets the default positive item label position.
     *
     * @param position  the position.
     *
     * @see #getDefaultPositiveItemLabelPosition()
     */
    void setDefaultPositiveItemLabelPosition(ItemLabelPosition position);

    /**
     * Sets the default positive item label position and, if requested, sends a
     * {@link RendererChangeEvent} to all registered listeners.
     *
     * @param position  the position.
     * @param notify  notify registered listeners?
     *
     * @see #getDefaultPositiveItemLabelPosition()
     */
    void setDefaultPositiveItemLabelPosition(ItemLabelPosition position, boolean notify);


    // NEGATIVE ITEM LABEL POSITION...

    /**
     * Returns the item label position for negative values.  This method can be
     * overridden to provide customisation of the item label position for
     * individual data items.
     *
     * @param row  the row index (zero-based).
     * @param column  the column (zero-based).
     *
     * @return The item label position.
     */
    ItemLabelPosition getNegativeItemLabelPosition(int row, int column);

    /**
     * Returns the item label position for all negative values in a series.
     *
     * @param series  the series index (zero-based).
     *
     * @return The item label position.
     *
     * @see #setSeriesNegativeItemLabelPosition(int, ItemLabelPosition)
     */
    ItemLabelPosition getSeriesNegativeItemLabelPosition(int series);

    /**
     * Sets the item label position for negative values in a series and sends a
     * {@link RendererChangeEvent} to all registered listeners.
     *
     * @param series  the series index (zero-based).
     * @param position  the position ({@code null} permitted).
     *
     * @see #getSeriesNegativeItemLabelPosition(int)
     */
    void setSeriesNegativeItemLabelPosition(int series, ItemLabelPosition position);

    /**
     * Sets the item label position for negative values in a series and (if
     * requested) sends a {@link RendererChangeEvent} to all registered
     * listeners.
     *
     * @param series  the series index (zero-based).
     * @param position  the position ({@code null} permitted).
     * @param notify  notify registered listeners?
     *
     * @see #getSeriesNegativeItemLabelPosition(int)
     */
    void setSeriesNegativeItemLabelPosition(int series, ItemLabelPosition position, boolean notify);

    /**
     * Returns the default item label position for negative values.
     *
     * @return The position.
     *
     * @see #setDefaultNegativeItemLabelPosition(ItemLabelPosition)
     */
    ItemLabelPosition getDefaultNegativeItemLabelPosition();

    /**
     * Sets the default item label position for negative values and sends a
     * {@link RendererChangeEvent} to all registered listeners.
     *
     * @param position  the position.
     *
     * @see #getDefaultNegativeItemLabelPosition()
     */
    void setDefaultNegativeItemLabelPosition(ItemLabelPosition position);

    /**
     * Sets the default negative item label position and, if requested, sends a
     * {@link RendererChangeEvent} to all registered listeners.
     *
     * @param position  the position.
     * @param notify  notify registered listeners?
     *
     * @see #getDefaultNegativeItemLabelPosition()
     */
    void setDefaultNegativeItemLabelPosition(ItemLabelPosition position, boolean notify);

    // CREATE ENTITIES

    /**
     * Returns a flag that determines whether or not an entity is generated
     * for the specified item.  The standard implementation of this method
     * will typically return the flag for the series or, if that is 
     * {@code null}, the value returned by {@link #getDefaultCreateEntities()}.
     * 
     * @param series  the series index (zero-based).
     * @param item  the item index (zero-based).
     * 
     * @return A boolean. 
     */
    boolean getItemCreateEntity(int series, int item);

    /**
     * Returns a boolean indicating whether or not entities should be created 
     * for the items in a series.
     * 
     * @param series  the series index (zero-based).
     * 
     * @return A boolean (possibly {@code null}).
     */
    Boolean getSeriesCreateEntities(int series);

    /**
     * Sets a flag that indicates whether or not entities should be created during
     * rendering for the items in the specified series, and sends a 
     * {@link RendererChangeEvent} to all registered listeners.
     * 
     * @param series  the series index (zero-based).
     * @param create  the new flag value ({@code null} permitted).
     */
    void setSeriesCreateEntities(int series, Boolean create);

    /**
     * Sets a flag that indicates whether or not entities should be created during
     * rendering for the items in the specified series, and sends a 
     * {@link RendererChangeEvent} to all registered listeners if requested.
     * 
     * @param series  the series index (zero-based).
     * @param create  the new flag value ({@code null} permitted).
     * @param notify  send change event?
     */
    void setSeriesCreateEntities(int series, Boolean create, boolean notify);

    /**
     * Returns the default value for the flag that controls whether or not
     * an entity is created for an item during rendering.  
     * 
     * @return A boolean. 
     */
    boolean getDefaultCreateEntities();

    /**
     * Sets the default setting for whether or not entities should be created
     * for items during rendering, and sends a {@link RendererChangeEvent} to 
     * all registered listeners.
     * 
     * @param create  the new flag value.
     */
    void setDefaultCreateEntities(boolean create);

    /**
     * Sets the default setting for whether or not entities should be created
     * for items during rendering, and sends a {@link RendererChangeEvent} to 
     * all registered listeners if requested.
     * 
     * @param create  the new flag value.
     * @param notify  send change event?
     */
    void setDefaultCreateEntities(boolean create, boolean notify);
=====================================================================
Found a 24 line (166 tokens) duplication in the following files: 
Starting at line 127 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/test/java/org/jfree/chart/AreaChartTest.java
Starting at line 90 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/test/java/org/jfree/chart/LineChartTest.java

    }

    /**
     * Replaces the chart's dataset and then checks that the new dataset is OK.
     */
    @Test
    public void testReplaceDataset() {
        Number[][] data = new Integer[][] {{-30, -20}, {-10, 10}, {20, 30}};
        CategoryDataset<String, String> newData = 
                DatasetUtils.createCategoryDataset("S", "C", data);
        LocalListener l = new LocalListener();
        this.chart.addChangeListener(l);
        @SuppressWarnings("unchecked")
        CategoryPlot<String, String> plot = (CategoryPlot) this.chart.getPlot();
        plot.setDataset(newData);
        assertTrue(l.flag);
        ValueAxis axis = plot.getRangeAxis();
        Range range = axis.getRange();
        assertTrue(range.getLowerBound() <= -30, 
                "Expecting the lower bound of the range to be around -30: " + range.getLowerBound());
        assertTrue(range.getUpperBound() >= 30, 
                "Expecting the upper bound of the range to be around 30: " + range.getUpperBound());

    }
=====================================================================
Found a 46 line (165 tokens) duplication in the following files: 
Starting at line 393 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/main/java/org/jfree/data/category/DefaultCategoryDataset.java
Starting at line 376 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/test/java/org/jfree/data/general/TestIntervalCategoryDataset.java

        CategoryDataset<R, C> that = (CategoryDataset) obj;
        if (!getRowKeys().equals(that.getRowKeys())) {
            return false;
        }
        if (!getColumnKeys().equals(that.getColumnKeys())) {
            return false;
        }
        int rowCount = getRowCount();
        int colCount = getColumnCount();
        for (int r = 0; r < rowCount; r++) {
            for (int c = 0; c < colCount; c++) {
                Number v1 = getValue(r, c);
                Number v2 = that.getValue(r, c);
                if (v1 == null) {
                    if (v2 != null) {
                        return false;
                    }
                }
                else if (!v1.equals(v2)) {
                    return false;
                }
            }
        }
        return true;
    }

    /**
     * Returns a hash code for the dataset.
     *
     * @return A hash code.
     */
    @Override
    public int hashCode() {
        return this.data.hashCode();
    }

    /**
     * Returns a clone of the dataset.
     *
     * @return A clone.
     *
     * @throws CloneNotSupportedException if there is a problem cloning the
     *         dataset.
     */
    @Override
    public Object clone() throws CloneNotSupportedException {
=====================================================================
Found a 63 line (164 tokens) duplication in the following files: 
Starting at line 261 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/main/java/org/jfree/data/category/SlidingCategoryDataset.java
Starting at line 258 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/main/java/org/jfree/data/gantt/SlidingGanttCategoryDataset.java

    public Number getValue(R rowKey, C columnKey) {
        int r = getRowIndex(rowKey);
        int c = getColumnIndex(columnKey);
        if (c == -1) {
            throw new UnknownKeyException("Unknown columnKey: " + columnKey);
        }
        else if (r == -1) {
            throw new UnknownKeyException("Unknown rowKey: " + rowKey);
        }
        else {
            return this.underlying.getValue(r, c + this.firstCategoryIndex);
        }
    }

    /**
     * Returns the number of columns in the table.
     *
     * @return The column count.
     */
    @Override
    public int getColumnCount() {
        int last = lastCategoryIndex();
        if (last == -1) {
            return 0;
        }
        else {
            return Math.max(last - this.firstCategoryIndex + 1, 0);
        }
    }

    /**
     * Returns the number of rows in the table.
     *
     * @return The row count.
     */
    @Override
    public int getRowCount() {
        return this.underlying.getRowCount();
    }

    /**
     * Returns a value from the table.
     *
     * @param row  the row index (zero-based).
     * @param column  the column index (zero-based).
     *
     * @return The value (possibly {@code null}).
     */
    @Override
    public Number getValue(int row, int column) {
        return this.underlying.getValue(row, column + this.firstCategoryIndex);
    }

    /**
     * Tests this {@code SlidingCategoryDataset} for equality with an
     * arbitrary object.
     *
     * @param obj  the object ({@code null} permitted).
     *
     * @return A boolean.
     */
    @Override
    public boolean equals(Object obj) {
=====================================================================
Found a 27 line (163 tokens) duplication in the following files: 
Starting at line 199 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/test/java/org/jfree/chart/renderer/xy/CandlestickRendererTest.java
Starting at line 153 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/test/java/org/jfree/chart/renderer/xy/HighLowRendererTest.java

        CandlestickRenderer renderer = new CandlestickRenderer();

        OHLCDataItem item1 = new OHLCDataItem(new Date(1L), 2.0, 4.0, 1.0, 3.0,
                100);
        OHLCDataset dataset = new DefaultOHLCDataset("S1",
                new OHLCDataItem[] {item1});
        Range range = renderer.findRangeBounds(dataset);
        assertEquals(new Range(1.0, 4.0), range);

        OHLCDataItem item2 = new OHLCDataItem(new Date(1L), -1.0, 3.0, -1.0,
                3.0, 100);
        dataset = new DefaultOHLCDataset("S1", new OHLCDataItem[] {item1,
                item2});
        range = renderer.findRangeBounds(dataset);
        assertEquals(new Range(-1.0, 4.0), range);

        // try an empty dataset - should return a null range
        dataset = new DefaultOHLCDataset("S1", new OHLCDataItem[] {});
        range = renderer.findRangeBounds(dataset);
        assertNull(range);

        // try a null dataset - should return a null range
        range = renderer.findRangeBounds(null);
        assertNull(range);
    }

}
=====================================================================
Found a 21 line (163 tokens) duplication in the following files: 
Starting at line 162 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/test/java/org/jfree/data/time/MillisecondTest.java
Starting at line 205 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/test/java/org/jfree/data/time/MillisecondTest.java

            Millisecond m = new Millisecond(new Date(0L));
            assertEquals(1970, m.getSecond().getMinute().getHour().getYear());
            assertEquals(1, m.getSecond().getMinute().getHour().getMonth());
            assertEquals(1, m.getSecond().getMinute().getHour().getDayOfMonth());
            assertEquals(hoursOffset, m.getSecond().getMinute().getHour().getHour());
            assertEquals(0, m.getSecond().getMinute().getMinute());
            assertEquals(0, m.getSecond().getSecond());
            assertEquals(0, m.getMillisecond());
            assertEquals(0L, m.getFirstMillisecond());
        } finally {
            // reset everything, to avoid affecting other tests
            RegularTimePeriod.setThreadLocalCalendarInstance(null);
            RegularTimePeriod.setCalendarInstancePrototype(null);
        }
    }

    /**
     * If a thread-local calendar was set, the millisecond-second constructor should use it.
     */
    @Test
    public void testMillisecondSecondConstructorWithThreadLocalCalendar() {
=====================================================================
Found a 33 line (162 tokens) duplication in the following files: 
Starting at line 94 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/main/java/org/jfree/chart/swing/editor/LCBLayout.java
Starting at line 135 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/main/java/org/jfree/chart/swing/editor/LCBLayout.java

                    Dimension d = component.getPreferredSize();
                    if (this.colWidth[c] < d.width) {
                        this.colWidth[c] = d.width;
                    }
                    if (this.rowHeight[r] < d.height) {
                        this.rowHeight[r] = d.height;
                    }
                }
            }
            int totalHeight = this.vGap * (nrows - 1);
            for (int r = 0; r < nrows; r++) {
                totalHeight = totalHeight + this.rowHeight[r];
            }
            int totalWidth = this.colWidth[0] + this.labelGap 
                + this.colWidth[1] + this.buttonGap + this.colWidth[2];
            return new Dimension(
                insets.left + insets.right + totalWidth + this.labelGap 
                    + this.buttonGap,
                insets.top + insets.bottom + totalHeight + this.vGap
            );
        }

    }

    /**
     * Returns the minimum size using this layout manager.
     *
     * @param parent  the parent.
     *
     * @return the minimum size using this layout manager.
     */
    @Override
    public Dimension minimumLayoutSize(Container parent) {
=====================================================================
Found a 24 line (162 tokens) duplication in the following files: 
Starting at line 237 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/test/java/org/jfree/chart/renderer/category/BarRendererTest.java
Starting at line 296 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/test/java/org/jfree/chart/renderer/category/BoxAndWhiskerRendererTest.java

        BarRenderer r = new BarRenderer();
        CategoryPlot<String, String> plot = new CategoryPlot<>(dataset, 
                new CategoryAxis("x"), new NumberAxis("y"), r);
        /*JFreeChart chart =*/ new JFreeChart(plot);
        LegendItem li = r.getLegendItem(0, 0);
        assertNotNull(li);
        r.setSeriesVisibleInLegend(0, Boolean.FALSE);
        li = r.getLegendItem(0, 0);
        assertNull(li);
    }

    /**
     * A check for the datasetIndex and seriesIndex fields in the LegendItem
     * returned by the getLegendItem() method.
     */
    @Test
    public void testGetLegendItemSeriesIndex() {
        DefaultCategoryDataset<String, String> dataset0 = new DefaultCategoryDataset<>();
        dataset0.addValue(21.0, "R1", "C1");
        dataset0.addValue(22.0, "R2", "C1");
        DefaultCategoryDataset<String, String> dataset1 = new DefaultCategoryDataset<>();
        dataset1.addValue(23.0, "R3", "C1");
        dataset1.addValue(24.0, "R4", "C1");
        dataset1.addValue(25.0, "R5", "C1");
=====================================================================
Found a 20 line (160 tokens) duplication in the following files: 
Starting at line 996 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/main/java/org/jfree/chart/renderer/xy/AbstractXYItemRenderer.java
Starting at line 1199 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/main/java/org/jfree/chart/renderer/xy/AbstractXYItemRenderer.java

                Point2D coords = calculateDomainMarkerTextAnchorPoint(
                        g2, orientation, dataArea, line.getBounds2D(),
                        marker.getLabelOffset(),
                        LengthAdjustmentType.EXPAND, anchor);
                Rectangle2D r = TextUtils.calcAlignedStringBounds(label, 
                        g2, (float) coords.getX(), (float) coords.getY(), 
                        marker.getLabelTextAnchor());
                g2.setPaint(marker.getLabelBackgroundColor());
                g2.fill(r);
                g2.setPaint(marker.getLabelPaint());
                TextUtils.drawAlignedString(label, g2,
                        (float) coords.getX(), (float) coords.getY(),
                        marker.getLabelTextAnchor());
            }
            g2.setComposite(originalComposite);
        } else if (marker instanceof IntervalMarker) {
            IntervalMarker im = (IntervalMarker) marker;
            double start = im.getStartValue();
            double end = im.getEndValue();
            Range range = domainAxis.getRange();
=====================================================================
Found a 109 line (160 tokens) duplication in the following files: 
Starting at line 485 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/main/java/org/jfree/data/statistics/DefaultBoxAndWhiskerCategoryDataset.java
Starting at line 249 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/main/java/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java

            result = item.getQ3();
        }
        return result;
    }

    /**
     * Returns the column index for a given key.
     *
     * @param key  the column key ({@code null} not permitted).
     *
     * @return The column index.
     *
     * @see #getColumnKey(int)
     */
    @Override
    public int getColumnIndex(C key) {
        return this.data.getColumnIndex(key);
    }

    /**
     * Returns a column key.
     *
     * @param column  the column index (zero-based).
     *
     * @return The column key.
     *
     * @see #getColumnIndex(Comparable)
     */
    @Override
    public C getColumnKey(int column) {
        return this.data.getColumnKey(column);
    }

    /**
     * Returns the column keys.
     *
     * @return The keys.
     *
     * @see #getRowKeys()
     */
    @Override
    public List<C> getColumnKeys() {
        return this.data.getColumnKeys();
    }

    /**
     * Returns the row index for a given key.
     *
     * @param key  the row key ({@code null} not permitted).
     *
     * @return The row index.
     *
     * @see #getRowKey(int)
     */
    @Override
    public int getRowIndex(R key) {
        // defer null argument check
        return this.data.getRowIndex(key);
    }

    /**
     * Returns a row key.
     *
     * @param row  the row index (zero-based).
     *
     * @return The row key.
     *
     * @see #getRowIndex(Comparable)
     */
    @Override
    public R getRowKey(int row) {
        return this.data.getRowKey(row);
    }

    /**
     * Returns the row keys.
     *
     * @return The keys.
     *
     * @see #getColumnKeys()
     */
    @Override
    public List<R> getRowKeys() {
        return this.data.getRowKeys();
    }

    /**
     * Returns the number of rows in the table.
     *
     * @return The row count.
     *
     * @see #getColumnCount()
     */
    @Override
    public int getRowCount() {
        return this.data.getRowCount();
    }

    /**
     * Returns the number of columns in the table.
     *
     * @return The column count.
     *
     * @see #getRowCount()
     */
    @Override
    public int getColumnCount() {
        return this.data.getColumnCount();
    }
=====================================================================
Found a 28 line (160 tokens) duplication in the following files: 
Starting at line 183 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/test/java/org/jfree/chart/annotations/XYBoxAnnotationTest.java
Starting at line 119 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/test/java/org/jfree/chart/annotations/XYTitleAnnotationTest.java
Starting at line 149 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/test/java/org/jfree/chart/renderer/xy/StackedXYAreaRendererTest.java
Starting at line 126 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/test/java/org/jfree/chart/renderer/xy/XYAreaRenderer2Test.java
Starting at line 171 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/test/java/org/jfree/chart/renderer/xy/XYAreaRendererTest.java
Starting at line 140 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/test/java/org/jfree/chart/renderer/xy/XYStepAreaRendererTest.java
Starting at line 121 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/test/java/org/jfree/chart/renderer/xy/XYStepRendererTest.java

        assertEquals(a1, a2);
    }

    /**
     * Draws the chart with a {@code null} info object to make sure that
     * no exceptions are thrown.
     */
    @Test
    public void testDrawWithNullInfo() {
        try {
            DefaultTableXYDataset<String> dataset = new DefaultTableXYDataset<>();

            XYSeries<String> s1 = new XYSeries<>("Series 1", true, false);
            s1.add(5.0, 5.0);
            s1.add(10.0, 15.5);
            s1.add(15.0, 9.5);
            s1.add(20.0, 7.5);
            dataset.addSeries(s1);

            XYSeries<String> s2 = new XYSeries<>("Series 2", true, false);
            s2.add(5.0, 5.0);
            s2.add(10.0, 15.5);
            s2.add(15.0, 9.5);
            s2.add(20.0, 3.5);
            dataset.addSeries(s2);
            XYPlot<String> plot = new XYPlot<>(dataset,
                    new NumberAxis("X"), new NumberAxis("Y"),
                    new XYLineAndShapeRenderer());
=====================================================================
Found a 34 line (157 tokens) duplication in the following files: 
Starting at line 1522 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/main/java/org/jfree/chart/axis/DateAxis.java
Starting at line 1637 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/main/java/org/jfree/chart/axis/DateAxis.java

                    }
                }

                DateTick tick = new DateTick(tickDate, tickLabel, anchor,
                        rotationAnchor, angle);
                result.add(tick);
                hasRolled = false;

                long currentTickTime = tickDate.getTime();
                tickDate = unit.addToDate(tickDate, this.timeZone);
                long nextTickTime = tickDate.getTime();
                for (int minorTick = 1; minorTick < minorTickSpaces;
                        minorTick++) {
                    long minorTickTime = currentTickTime
                            + (nextTickTime - currentTickTime)
                            * minorTick / minorTickSpaces;
                    if (getRange().contains(minorTickTime)
                            && (!isHiddenValue(minorTickTime))) {
                        result.add(new DateTick(TickType.MINOR,
                                new Date(minorTickTime), "",
                                TextAnchor.TOP_CENTER, TextAnchor.CENTER,
                                0.0));
                    }
                }

            }
            else {
                tickDate = unit.rollDate(tickDate, this.timeZone);
                hasRolled = true;
            }
        }
        return result;

    }
=====================================================================
Found a 11 line (153 tokens) duplication in the following files: 
Starting at line 477 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/main/java/org/jfree/chart/annotations/CategoryPointerAnnotation.java
Starting at line 491 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/main/java/org/jfree/chart/annotations/XYPointerAnnotation.java

        long temp = Double.doubleToLongBits(this.angle);
        result = 37 * result + (int) (temp ^ (temp >>> 32));
        temp = Double.doubleToLongBits(this.tipRadius);
        result = 37 * result + (int) (temp ^ (temp >>> 32));
        temp = Double.doubleToLongBits(this.baseRadius);
        result = 37 * result + (int) (temp ^ (temp >>> 32));
        temp = Double.doubleToLongBits(this.arrowLength);
        result = 37 * result + (int) (temp ^ (temp >>> 32));
        temp = Double.doubleToLongBits(this.arrowWidth);
        result = 37 * result + (int) (temp ^ (temp >>> 32));
        result = 37 * result + HashUtils.hashCodeForPaint(this.arrowPaint);
=====================================================================
Found a 19 line (153 tokens) duplication in the following files: 
Starting at line 980 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/main/java/org/jfree/chart/axis/CyclicNumberAxis.java
Starting at line 637 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/main/java/org/jfree/chart/axis/ValueAxis.java

            float xx = (float) valueToJava2D(getRange().getUpperBound(),
                    dataArea, edge);
            Line2D mark = null;
            g2.setStroke(getTickMarkStroke());
            g2.setPaint(getTickMarkPaint());
            if (edge == RectangleEdge.LEFT) {
                mark = new Line2D.Double(cursor - ol, xx, cursor + il, xx);
            }
            else if (edge == RectangleEdge.RIGHT) {
                mark = new Line2D.Double(cursor + ol, xx, cursor - il, xx);
            }
            else if (edge == RectangleEdge.TOP) {
                mark = new Line2D.Double(xx, cursor - ol, xx, cursor + il);
            }
            else if (edge == RectangleEdge.BOTTOM) {
                mark = new Line2D.Double(xx, cursor + ol, xx, cursor - il);
            }
            g2.draw(mark);
        }
=====================================================================
Found a 12 line (153 tokens) duplication in the following files: 
Starting at line 123 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/test/java/org/jfree/data/general/DatasetUtilsTest.java
Starting at line 144 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/test/java/org/jfree/data/general/DatasetUtilsTest.java

    public void testFindDomainBounds2() {
        DefaultIntervalXYDataset<String> dataset = new DefaultIntervalXYDataset<>();
        double[] x1 = new double[] {1.0, 2.0, 3.0};
        double[] x1Start = new double[] {0.9, 1.9, 2.9};
        double[] x1End = new double[] {1.1, 2.1, 3.1};
        double[] y1 = new double[] {4.0, 5.0, 6.0};
        double[] y1Start = new double[] {1.09, 2.09, 3.09};
        double[] y1End = new double[] {1.11, 2.11, 3.11};
        double[][] data1 = new double[][] {x1, x1Start, x1End, y1, y1Start,
                y1End};
        dataset.addSeries("S1", data1);
        Range r = DatasetUtils.findDomainBounds(dataset);
=====================================================================
Found a 81 line (152 tokens) duplication in the following files: 
Starting at line 95 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/main/java/org/jfree/data/category/SlidingCategoryDataset.java
Starting at line 92 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/main/java/org/jfree/data/gantt/SlidingGanttCategoryDataset.java

    public CategoryDataset<R, C> getUnderlyingDataset() {
        return this.underlying;
    }

    /**
     * Returns the index of the first visible category.
     *
     * @return The index.
     *
     * @see #setFirstCategoryIndex(int)
     */
    public int getFirstCategoryIndex() {
        return this.firstCategoryIndex;
    }

    /**
     * Sets the index of the first category that should be used from the
     * underlying dataset, and sends a {@link DatasetChangeEvent} to all
     * registered listeners.
     *
     * @param first  the index.
     *
     * @see #getFirstCategoryIndex()
     */
    public void setFirstCategoryIndex(int first) {
        if (first < 0 || first >= this.underlying.getColumnCount()) {
            throw new IllegalArgumentException("Invalid index.");
        }
        this.firstCategoryIndex = first;
        fireDatasetChanged();
    }

    /**
     * Returns the maximum category count.
     *
     * @return The maximum category count.
     *
     * @see #setMaximumCategoryCount(int)
     */
    public int getMaximumCategoryCount() {
        return this.maximumCategoryCount;
    }

    /**
     * Sets the maximum category count and sends a {@link DatasetChangeEvent}
     * to all registered listeners.
     *
     * @param max  the maximum.
     *
     * @see #getMaximumCategoryCount()
     */
    public void setMaximumCategoryCount(int max) {
        if (max < 0) {
            throw new IllegalArgumentException("Requires 'max' >= 0.");
        }
        this.maximumCategoryCount = max;
        fireDatasetChanged();
    }

    /**
     * Returns the index of the last column for this dataset, or -1.
     *
     * @return The index.
     */
    private int lastCategoryIndex() {
        if (this.maximumCategoryCount == 0) {
            return -1;
        }
        return Math.min(this.firstCategoryIndex + this.maximumCategoryCount,
                this.underlying.getColumnCount()) - 1;
    }

    /**
     * Returns the index for the specified column key.
     *
     * @param key  the key.
     *
     * @return The column index, or -1 if the key is not recognised.
     */
    @Override
    public int getColumnIndex(C key) {
=====================================================================
Found a 16 line (151 tokens) duplication in the following files: 
Starting at line 1366 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/main/java/org/jfree/chart/axis/Axis.java
Starting at line 1463 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/main/java/org/jfree/chart/axis/Axis.java

            TextUtils.drawRotatedString(label, g2, (float) labelx,
                    (float) labely, anchor, getLabelAngle() - Math.PI / 2.0, 
                    anchor);
            state.cursorLeft(insets.getLeft() + labelBounds.getWidth()
                    + insets.getRight());
        }
        else if (edge == RectangleEdge.RIGHT) {
            AffineTransform t = AffineTransform.getRotateInstance(
                    getLabelAngle() + Math.PI / 2.0,
                    labelBounds.getCenterX(), labelBounds.getCenterY());
            Shape rotatedLabelBounds = t.createTransformedShape(labelBounds);
            labelBounds = rotatedLabelBounds.getBounds2D();
            double labelx = state.getCursor()
                            + insets.getLeft() + labelBounds.getWidth() / 2.0;
            double labely = labelLocationY(this.labelLocation, dataArea);
            TextAnchor anchor = labelAnchorV(this.labelLocation);
=====================================================================
Found a 17 line (151 tokens) duplication in the following files: 
Starting at line 269 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/main/java/org/jfree/chart/swing/CrosshairOverlay.java
Starting at line 328 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/main/java/org/jfree/chart/swing/CrosshairOverlay.java

                    dataArea.getMaxX(), y);
            Paint savedPaint = g2.getPaint();
            Stroke savedStroke = g2.getStroke();
            g2.setPaint(crosshair.getPaint());
            g2.setStroke(crosshair.getStroke());
            g2.draw(line);
            if (crosshair.isLabelVisible()) {
                String label = crosshair.getLabelGenerator().generateLabel(
                        crosshair);
                if (label != null && !label.isEmpty()) {
                    Font savedFont = g2.getFont();
                    g2.setFont(crosshair.getLabelFont());
                    RectangleAnchor anchor = crosshair.getLabelAnchor();
                    Point2D pt = calculateLabelPoint(line, anchor, crosshair.getLabelXOffset(), crosshair.getLabelYOffset());
                    float xx = (float) pt.getX();
                    float yy = (float) pt.getY();
                    TextAnchor alignPt = textAlignPtForLabelAnchorH(anchor);
=====================================================================
Found a 31 line (151 tokens) duplication in the following files: 
Starting at line 211 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/main/java/org/jfree/data/ComparableObjectSeries.java
Starting at line 468 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/main/java/org/jfree/data/xy/XYSeries.java

        Args.nullNotPermitted(item, "item");
        if (this.autoSort) {
            int index = Collections.binarySearch(this.data, item);
            if (index < 0) {
                this.data.add(-index - 1, item);
            }
            else {
                if (this.allowDuplicateXValues) {
                    // need to make sure we are adding *after* any duplicates
                    int size = this.data.size();
                    while (index < size
                           && item.compareTo(this.data.get(index)) == 0) {
                        index++;
                    }
                    if (index < this.data.size()) {
                        this.data.add(index, item);
                    }
                    else {
                        this.data.add(item);
                    }
                }
                else {
                    throw new SeriesException("X-value already exists.");
                }
            }
        }
        else {
            if (!this.allowDuplicateXValues) {
                // can't allow duplicate values, so we need to check whether
                // there is an item with the given x-value already
                int index = indexOf(item.getComparable());
=====================================================================
Found a 12 line (150 tokens) duplication in the following files: 
Starting at line 165 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/test/java/org/jfree/data/general/DatasetUtilsTest.java
Starting at line 1057 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/test/java/org/jfree/data/general/DatasetUtilsTest.java

    public void testFindDomainBounds4() {
        DefaultIntervalXYDataset<String> dataset = new DefaultIntervalXYDataset<>();
        double[] x1 = new double[] {0.8, 3.2, 3.0};
        double[] x1Start = new double[] {0.9, 1.9, 2.9};
        double[] x1End = new double[] {1.1, 2.1, 3.1};
        double[] y1 = new double[] {4.0, 5.0, 6.0};
        double[] y1Start = new double[] {1.09, 2.09, 3.09};
        double[] y1End = new double[] {1.11, 2.11, 3.11};
        double[][] data1 = new double[][] {x1, x1Start, x1End, y1, y1Start,
                y1End};
        dataset.addSeries("S1", data1);
        Range r = DatasetUtils.findDomainBounds(dataset);
=====================================================================
Found a 20 line (149 tokens) duplication in the following files: 
Starting at line 176 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/test/java/org/jfree/chart/plot/pie/MultiplePiePlotTest.java
Starting at line 315 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/test/java/org/jfree/chart/plot/SpiderWebPlotTest.java

        MultiplePiePlot plot = new MultiplePiePlot(dataset);
        JFreeChart chart = new JFreeChart(plot);
        LegendItemCollection legendItems = plot.getLegendItems();
        assertEquals(2, legendItems.getItemCount());
        LegendItem item1 = legendItems.get(0);
        assertEquals("S1", item1.getLabel());
        assertEquals("S1", item1.getSeriesKey());
        assertEquals(0, item1.getSeriesIndex());
        assertEquals(dataset, item1.getDataset());
        assertEquals(0, item1.getDatasetIndex());

        LegendItem item2 = legendItems.get(1);
        assertEquals("S2", item2.getLabel());
        assertEquals("S2", item2.getSeriesKey());
        assertEquals(1, item2.getSeriesIndex());
        assertEquals(dataset, item2.getDataset());
        assertEquals(0, item2.getDatasetIndex());
    }

}
=====================================================================
Found a 12 line (148 tokens) duplication in the following files: 
Starting at line 71 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/test/java/org/jfree/chart/LegendItemCollectionTest.java
Starting at line 69 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/test/java/org/jfree/chart/LegendItemTest.java

        LegendItem item1 = new LegendItem("Label", "Description",
                "ToolTip", "URL", true,
                new Rectangle2D.Double(1.0, 2.0, 3.0, 4.0), true, Color.RED,
                true, Color.BLUE, new BasicStroke(1.2f), true,
                new Line2D.Double(1.0, 2.0, 3.0, 4.0),
                new BasicStroke(2.1f), Color.GREEN);
        LegendItem item2 = new LegendItem("Label", "Description",
                "ToolTip", "URL", true,
                new Rectangle2D.Double(1.0, 2.0, 3.0, 4.0),
                true, Color.RED, true, Color.BLUE, new BasicStroke(1.2f), true,
                new Line2D.Double(1.0, 2.0, 3.0, 4.0), new BasicStroke(2.1f),
                Color.GREEN);
=====================================================================
Found a 15 line (147 tokens) duplication in the following files: 
Starting at line 1351 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/main/java/org/jfree/chart/axis/Axis.java
Starting at line 1448 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/main/java/org/jfree/chart/axis/Axis.java

            TextUtils.drawRotatedString(label, g2, (float) labelx,
                    (float) labely, anchor, getLabelAngle(), TextAnchor.CENTER);
            state.cursorDown(insets.getTop() + labelBounds.getHeight()
                    + insets.getBottom());
        }
        else if (edge == RectangleEdge.LEFT) {
            AffineTransform t = AffineTransform.getRotateInstance(
                    getLabelAngle() - Math.PI / 2.0, labelBounds.getCenterX(),
                    labelBounds.getCenterY());
            Shape rotatedLabelBounds = t.createTransformedShape(labelBounds);
            labelBounds = rotatedLabelBounds.getBounds2D();
            double labelx = state.getCursor()
                            - insets.getRight() - labelBounds.getWidth() / 2.0;
            double labely = labelLocationY(this.labelLocation, dataArea);
            TextAnchor anchor = labelAnchorV(this.labelLocation);
=====================================================================
Found a 26 line (147 tokens) duplication in the following files: 
Starting at line 130 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/main/java/org/jfree/chart/block/FlowArrangement.java
Starting at line 107 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/main/java/org/jfree/chart/block/GridArrangement.java

                throw new RuntimeException("Not implemented.");
            }
        }
        else if (w == LengthConstraintType.FIXED) {
            if (h == LengthConstraintType.NONE) {
                return arrangeFN(container, g2, constraint);
            }
            else if (h == LengthConstraintType.FIXED) {
                return arrangeFF(container, g2, constraint);
            }
            else if (h == LengthConstraintType.RANGE) {
                return arrangeFR(container, g2, constraint);
            }
        }
        else if (w == LengthConstraintType.RANGE) {
            if (h == LengthConstraintType.NONE) {
                return arrangeRN(container, g2, constraint);
            }
            else if (h == LengthConstraintType.FIXED) {
                return arrangeRF(container, g2, constraint);
            }
            else if (h == LengthConstraintType.RANGE) {
                return arrangeRR(container, g2, constraint);
            }
        }
        throw new RuntimeException("Unrecognised constraint type.");
=====================================================================
Found a 13 line (147 tokens) duplication in the following files: 
Starting at line 226 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/test/java/org/jfree/data/category/DefaultIntervalCategoryDatasetTest.java
Starting at line 264 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/test/java/org/jfree/data/category/DefaultIntervalCategoryDatasetTest.java

    public void testSetStartValue() {
        double[] starts_S1 = new double[] {0.1, 0.2, 0.3};
        double[] starts_S2 = new double[] {0.3, 0.4, 0.5};
        double[] ends_S1 = new double[] {0.5, 0.6, 0.7};
        double[] ends_S2 = new double[] {0.7, 0.8, 0.9};
        double[][] starts = new double[][] {starts_S1, starts_S2};
        double[][] ends = new double[][] {ends_S1, ends_S2};
        DefaultIntervalCategoryDataset d1 = new DefaultIntervalCategoryDataset(
                new Comparable[] {"Series 1", "Series 2"},
                new Comparable[] {"Category 1", "Category 2", "Category 3"},
                DataUtils.createNumberArray2D(starts),
                DataUtils.createNumberArray2D(ends));
        d1.setStartValue(0, "Category 2", 99.9);
=====================================================================
Found a 26 line (145 tokens) duplication in the following files: 
Starting at line 701 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/main/java/org/jfree/chart/renderer/category/LineAndShapeRenderer.java
Starting at line 361 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/main/java/org/jfree/chart/renderer/category/StatisticalLineAndShapeRenderer.java

                                this.itemMargin, dataArea,
                                plot.getDomainAxisEdge());
                    }
                    else {
                        x0 = domainAxis.getCategoryMiddle(column - 1,
                                getColumnCount(), dataArea,
                                plot.getDomainAxisEdge());
                    }
                    double y0 = rangeAxis.valueToJava2D(previous, dataArea,
                            plot.getRangeAxisEdge());

                    Line2D line = null;
                    if (orientation == PlotOrientation.HORIZONTAL) {
                        line = new Line2D.Double(y0, x0, y1, x1);
                    }
                    else if (orientation == PlotOrientation.VERTICAL) {
                        line = new Line2D.Double(x0, y0, x1, y1);
                    }
                    g2.setPaint(getItemPaint(row, column));
                    g2.setStroke(getItemStroke(row, column));
                    g2.draw(line);
                }
            }
        }

        if (pass == 1) {
=====================================================================
Found a 42 line (143 tokens) duplication in the following files: 
Starting at line 473 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/main/java/org/jfree/chart/axis/LogAxis.java
Starting at line 564 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/main/java/org/jfree/chart/axis/NumberAxis.java

    }

    /**
     * Draws the axis on a Java 2D graphics device (such as the screen or a
     * printer).
     *
     * @param g2  the graphics device ({@code null} not permitted).
     * @param cursor  the cursor location (determines where to draw the axis).
     * @param plotArea  the area within which the axes and plot should be drawn.
     * @param dataArea  the area within which the data should be drawn.
     * @param edge  the axis location ({@code null} not permitted).
     * @param plotState  collects information about the plot ({@code null} 
     *         permitted).
     *
     * @return The axis state (never {@code null}).
     */
    @Override
    public AxisState draw(Graphics2D g2, double cursor, Rectangle2D plotArea,
            Rectangle2D dataArea, RectangleEdge edge,
            PlotRenderingInfo plotState) {

        AxisState state;
        // if the axis is not visible, don't draw it...
        if (!isVisible()) {
            state = new AxisState(cursor);
            // even though the axis is not visible, we need ticks for the
            // gridlines...
            List ticks = refreshTicks(g2, state, dataArea, edge);
            state.setTicks(ticks);
            return state;
        }
        state = drawTickMarksAndLabels(g2, cursor, plotArea, dataArea, edge);
        if (getAttributedLabel() != null) {
            state = drawAttributedLabel(getAttributedLabel(), g2, plotArea, 
                    dataArea, edge, state);
            
        } else {
            state = drawLabel(getLabel(), g2, plotArea, dataArea, edge, state);
        }
        createAndAddEntity(cursor, state, dataArea, edge, plotState);
        return state;
    }
=====================================================================
Found a 39 line (143 tokens) duplication in the following files: 
Starting at line 77 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/main/java/org/jfree/chart/renderer/category/StandardBarPainter.java
Starting at line 77 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/main/java/org/jfree/chart/renderer/xy/StandardXYBarPainter.java

    public void paintBar(Graphics2D g2, BarRenderer renderer, int row,
            int column, RectangularShape bar, RectangleEdge base) {

        Paint itemPaint = renderer.getItemPaint(row, column);
        GradientPaintTransformer t = renderer.getGradientPaintTransformer();
        if (t != null && itemPaint instanceof GradientPaint) {
            itemPaint = t.transform((GradientPaint) itemPaint, bar);
        }
        g2.setPaint(itemPaint);
        g2.fill(bar);

        // draw the outline...
        if (renderer.isDrawBarOutline()) {
               // && state.getBarWidth() > BAR_OUTLINE_WIDTH_THRESHOLD) {
            Stroke stroke = renderer.getItemOutlineStroke(row, column);
            Paint paint = renderer.getItemOutlinePaint(row, column);
            if (stroke != null && paint != null) {
                g2.setStroke(stroke);
                g2.setPaint(paint);
                g2.draw(bar);
            }
        }

    }

    /**
     * Paints a single bar instance.
     *
     * @param g2  the graphics target.
     * @param renderer  the renderer.
     * @param row  the row index.
     * @param column  the column index.
     * @param bar  the bar
     * @param base  indicates which side of the rectangle is the base of the
     *              bar.
     * @param pegShadow  peg the shadow to the base of the bar?
     */
    @Override
    public void paintBarShadow(Graphics2D g2, BarRenderer renderer, int row,
=====================================================================
Found a 21 line (143 tokens) duplication in the following files: 
Starting at line 353 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/main/java/org/jfree/chart/renderer/xy/XYBoxAndWhiskerRenderer.java
Starting at line 499 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/main/java/org/jfree/chart/renderer/xy/XYBoxAndWhiskerRenderer.java

        double xx = domainAxis.valueToJava2D(x.doubleValue(), dataArea,
                plot.getDomainAxisEdge());

        RectangleEdge location = plot.getRangeAxisEdge();
        double yyMax = rangeAxis.valueToJava2D(yMax.doubleValue(), dataArea,
                location);
        double yyMin = rangeAxis.valueToJava2D(yMin.doubleValue(), dataArea,
                location);
        double yyMedian = rangeAxis.valueToJava2D(yMedian.doubleValue(),
                dataArea, location);
        double yyAverage = 0.0;
        if (yAverage != null) {
            yyAverage = rangeAxis.valueToJava2D(yAverage.doubleValue(),
                    dataArea, location);
        }
        double yyQ1Median = rangeAxis.valueToJava2D(yQ1Median.doubleValue(),
                dataArea, location);
        double yyQ3Median = rangeAxis.valueToJava2D(yQ3Median.doubleValue(),
                dataArea, location);

        double exactBoxWidth = getBoxWidth();
=====================================================================
Found a 12 line (143 tokens) duplication in the following files: 
Starting at line 181 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/test/java/org/jfree/data/category/DefaultIntervalCategoryDatasetTest.java
Starting at line 226 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/test/java/org/jfree/data/category/DefaultIntervalCategoryDatasetTest.java
Starting at line 264 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/test/java/org/jfree/data/category/DefaultIntervalCategoryDatasetTest.java

    public void testCloning() throws CloneNotSupportedException {
        double[] starts_S1 = new double[] {0.1, 0.2, 0.3};
        double[] starts_S2 = new double[] {0.3, 0.4, 0.5};
        double[] ends_S1 = new double[] {0.5, 0.6, 0.7};
        double[] ends_S2 = new double[] {0.7, 0.8, 0.9};
        double[][] starts = new double[][] {starts_S1, starts_S2};
        double[][] ends = new double[][] {ends_S1, ends_S2};
        DefaultIntervalCategoryDataset d1 = new DefaultIntervalCategoryDataset(
                new Comparable[] {"Series 1", "Series 2"},
                new Comparable[] {"Category 1", "Category 2", "Category 3"},
                DataUtils.createNumberArray2D(starts),
                DataUtils.createNumberArray2D(ends));
=====================================================================
Found a 11 line (143 tokens) duplication in the following files: 
Starting at line 422 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/test/java/org/jfree/data/gantt/TaskSeriesCollectionTest.java
Starting at line 483 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/test/java/org/jfree/data/gantt/TaskSeriesCollectionTest.java

    public void testEquals() {

        TaskSeries<String> s1 = new TaskSeries<>("S");
        s1.add(new Task("T1", new Date(1), new Date(2)));
        s1.add(new Task("T2", new Date(11), new Date(22)));
        TaskSeries<String> s2 = new TaskSeries<>("S");
        s2.add(new Task("T1", new Date(1), new Date(2)));
        s2.add(new Task("T2", new Date(11), new Date(22)));
        TaskSeriesCollection<String, String> c1 = new TaskSeriesCollection<>();
        c1.add(s1);
        c1.add(s2);
=====================================================================
Found a 19 line (142 tokens) duplication in the following files: 
Starting at line 3447 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/main/java/org/jfree/chart/plot/XYPlot.java
Starting at line 3473 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/main/java/org/jfree/chart/plot/XYPlot.java

                        if (state.getProcessVisibleItemsOnly()) {
                            int[] itemBounds = RendererUtils.findLiveItems(
                                    dataset, series, xAxis.getLowerBound(),
                                    xAxis.getUpperBound());
                            firstItem = Math.max(itemBounds[0] - 1, 0);
                            lastItem = Math.min(itemBounds[1] + 1, lastItem);
                        }
                        state.startSeriesPass(dataset, series, firstItem,
                                lastItem, pass, passCount);
                        for (int item = firstItem; item <= lastItem; item++) {
                            renderer.drawItem(g2, state, dataArea, info,
                                    this, xAxis, yAxis, dataset, series, item,
                                    crosshairState, pass);
                        }
                        state.endSeriesPass(dataset, series, firstItem,
                                lastItem, pass, passCount);
                    }
                }
            }
=====================================================================
Found a 23 line (142 tokens) duplication in the following files: 
Starting at line 678 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/main/java/org/jfree/chart/renderer/category/BarRenderer.java
Starting at line 538 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/main/java/org/jfree/chart/renderer/category/BoxAndWhiskerRenderer.java

                    ? state.getVisibleSeriesCount() : dataset.getRowCount();
            double space = 0.0;
            PlotOrientation orientation = plot.getOrientation();
            if (orientation == PlotOrientation.HORIZONTAL) {
                space = dataArea.getHeight();
            }
            else if (orientation == PlotOrientation.VERTICAL) {
                space = dataArea.getWidth();
            }
            double maxWidth = space * getMaximumBarWidth();
            double categoryMargin = 0.0;
            double currentItemMargin = 0.0;
            if (columns > 1) {
                categoryMargin = domainAxis.getCategoryMargin();
            }
            if (rows > 1) {
                currentItemMargin = getItemMargin();
            }
            double used = space * (1 - domainAxis.getLowerMargin()
                                     - domainAxis.getUpperMargin()
                                     - categoryMargin - currentItemMargin);
            if ((rows * columns) > 0) {
                state.setBarWidth(Math.min(used / (rows * columns), maxWidth));
=====================================================================
Found a 43 line (142 tokens) duplication in the following files: 
Starting at line 687 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/main/java/org/jfree/chart/renderer/category/BarRenderer.java
Starting at line 200 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/main/java/org/jfree/chart/renderer/category/LevelRenderer.java

            double maxWidth = space * getMaximumBarWidth();
            double categoryMargin = 0.0;
            double currentItemMargin = 0.0;
            if (columns > 1) {
                categoryMargin = domainAxis.getCategoryMargin();
            }
            if (rows > 1) {
                currentItemMargin = getItemMargin();
            }
            double used = space * (1 - domainAxis.getLowerMargin()
                                     - domainAxis.getUpperMargin()
                                     - categoryMargin - currentItemMargin);
            if ((rows * columns) > 0) {
                state.setBarWidth(Math.min(used / (rows * columns), maxWidth));
            }
            else {
                state.setBarWidth(Math.min(used, maxWidth));
            }
        }
    }

    /**
     * Calculates the coordinate of the first "side" of a bar.  This will be
     * the minimum x-coordinate for a vertical bar, and the minimum
     * y-coordinate for a horizontal bar.
     *
     * @param plot  the plot.
     * @param orientation  the plot orientation.
     * @param dataArea  the data area.
     * @param domainAxis  the domain axis.
     * @param state  the renderer state (has the bar width precalculated).
     * @param row  the row index.
     * @param column  the column index.
     *
     * @return The coordinate.
     */
    protected double calculateBarW0(CategoryPlot plot, 
            PlotOrientation orientation, Rectangle2D dataArea, 
            CategoryAxis domainAxis, CategoryItemRendererState state,
            int row, int column) {
        // calculate bar width...
        double space;
        if (orientation == PlotOrientation.HORIZONTAL) {
=====================================================================
Found a 25 line (142 tokens) duplication in the following files: 
Starting at line 292 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/main/java/org/jfree/chart/renderer/category/GroupedStackedBarRenderer.java
Starting at line 302 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/main/java/org/jfree/chart/renderer/category/StackedBarRenderer.java

        if (value > 0.0) {
            translatedBase = rangeAxis.valueToJava2D(positiveBase, dataArea,
                    location);
            translatedValue = rangeAxis.valueToJava2D(positiveBase + value,
                    dataArea, location);
        }
        else {
            translatedBase = rangeAxis.valueToJava2D(negativeBase, dataArea,
                    location);
            translatedValue = rangeAxis.valueToJava2D(negativeBase + value,
                    dataArea, location);
        }
        double barL0 = Math.min(translatedBase, translatedValue);
        double barLength = Math.max(Math.abs(translatedValue - translatedBase),
                getMinimumBarLength());

        Rectangle2D bar;
        if (orientation == PlotOrientation.HORIZONTAL) {
            bar = new Rectangle2D.Double(barL0, barW0, barLength,
                    state.getBarWidth());
        }
        else {
            bar = new Rectangle2D.Double(barW0, barL0, state.getBarWidth(),
                    barLength);
        }
=====================================================================
Found a 21 line (142 tokens) duplication in the following files: 
Starting at line 331 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/main/java/org/jfree/chart/renderer/xy/XYBoxAndWhiskerRenderer.java
Starting at line 471 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/main/java/org/jfree/chart/renderer/xy/XYBoxAndWhiskerRenderer.java

    public void drawHorizontalItem(Graphics2D g2, Rectangle2D dataArea,
            PlotRenderingInfo info, XYPlot plot, ValueAxis domainAxis,
            ValueAxis rangeAxis, XYDataset dataset, int series,
            int item, CrosshairState crosshairState, int pass) {

        // setup for collecting optional entity info...
        EntityCollection entities = null;
        if (info != null) {
            entities = info.getOwner().getEntityCollection();
        }

        BoxAndWhiskerXYDataset boxAndWhiskerData
                = (BoxAndWhiskerXYDataset) dataset;

        Number x = boxAndWhiskerData.getX(series, item);
        Number yMax = boxAndWhiskerData.getMaxRegularValue(series, item);
        Number yMin = boxAndWhiskerData.getMinRegularValue(series, item);
        Number yMedian = boxAndWhiskerData.getMedianValue(series, item);
        Number yAverage = boxAndWhiskerData.getMeanValue(series, item);
        Number yQ1Median = boxAndWhiskerData.getQ1Value(series, item);
        Number yQ3Median = boxAndWhiskerData.getQ3Value(series, item);
=====================================================================
Found a 50 line (142 tokens) duplication in the following files: 
Starting at line 268 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/main/java/org/jfree/data/xy/DefaultXYDataset.java
Starting at line 305 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/main/java/org/jfree/data/xy/DefaultXYZDataset.java

                "The 'data' array must contain two arrays with equal length.");
        }
        int seriesIndex = indexOf(seriesKey);
        if (seriesIndex == -1) {  // add a new series
            this.seriesKeys.add(seriesKey);
            this.seriesList.add(data);
        }
        else {  // replace an existing series
            this.seriesList.remove(seriesIndex);
            this.seriesList.add(seriesIndex, data);
        }
        notifyListeners(new DatasetChangeEvent(this, this));
    }

    /**
     * Removes a series from the dataset, then sends a
     * {@link DatasetChangeEvent} to all registered listeners.
     *
     * @param seriesKey  the series key ({@code null} not permitted).
     *
     */
    public void removeSeries(S seriesKey) {
        int seriesIndex = indexOf(seriesKey);
        if (seriesIndex >= 0) {
            this.seriesKeys.remove(seriesIndex);
            this.seriesList.remove(seriesIndex);
            notifyListeners(new DatasetChangeEvent(this, this));
        }
    }

    /**
     * Tests this {@code DefaultXYDataset} instance for equality with an
     * arbitrary object.  This method returns {@code true} if and only if:
     * <ul>
     * <li>{@code obj} is not {@code null};</li>
     * <li>{@code obj} is an instance of {@code DefaultXYDataset};</li>
     * <li>both datasets have the same number of series, each containing
     *         exactly the same values.</li>
     * </ul>
     *
     * @param obj  the object ({@code null} permitted).
     *
     * @return A boolean.
     */
    @Override
    public boolean equals(Object obj) {
        if (obj == this) {
            return true;
        }
        if (!(obj instanceof DefaultXYDataset)) {
=====================================================================
Found a 15 line (141 tokens) duplication in the following files: 
Starting at line 1336 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/main/java/org/jfree/chart/axis/Axis.java
Starting at line 1433 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/main/java/org/jfree/chart/axis/Axis.java

            TextUtils.drawRotatedString(label, g2, (float) labelx,
                    (float) labely, anchor, getLabelAngle(), TextAnchor.CENTER);
            state.cursorUp(insets.getTop() + labelBounds.getHeight()
                    + insets.getBottom());
        }
        else if (edge == RectangleEdge.BOTTOM) {
            AffineTransform t = AffineTransform.getRotateInstance(
                    getLabelAngle(), labelBounds.getCenterX(),
                    labelBounds.getCenterY());
            Shape rotatedLabelBounds = t.createTransformedShape(labelBounds);
            labelBounds = rotatedLabelBounds.getBounds2D();
            double labelx = labelLocationX(this.labelLocation, dataArea);
            double labely = state.getCursor()
                            + insets.getTop() + labelBounds.getHeight() / 2.0;
            TextAnchor anchor = labelAnchorH(this.labelLocation);
=====================================================================
Found a 31 line (141 tokens) duplication in the following files: 
Starting at line 413 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/test/java/org/jfree/data/time/MillisecondTest.java
Starting at line 381 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/test/java/org/jfree/data/time/MinuteTest.java

        m = new Millisecond(999, 59, 59, 23, 31, 12, 9999);
        assertNull(m.next());
    }

    /**
     * If a thread-local calendar was set, next() and previous() should use its time zone.
     */
    @Test
    public void testNextPreviousWithThreadLocalCalendar() {
        Consumer<Integer> calendarSetup = hours -> RegularTimePeriod.setThreadLocalCalendarInstance(
                Calendar.getInstance(TimeZone.getTimeZone(ZoneOffset.ofHours(hours)))
        );
        testNextPreviousWithCustomCalendar(3, calendarSetup);
        testNextPreviousWithCustomCalendar(4, calendarSetup);
    }

    /**
     * If a calendar prototype was set, next() should use its time zone.
     */
    @Test
    public void testNextPreviousWithCalendarPrototype() {
        Consumer<Integer> calendarSetup = hours -> RegularTimePeriod.setCalendarInstancePrototype(
                Calendar.getInstance(TimeZone.getTimeZone(ZoneOffset.ofHours(hours)))
        );
        testNextPreviousWithCustomCalendar(3, calendarSetup);
        testNextPreviousWithCustomCalendar(4, calendarSetup);
    }

    private void testNextPreviousWithCustomCalendar(int hoursOffset, Consumer<Integer> calendarSetup) {
        try {
            calendarSetup.accept(hoursOffset);
=====================================================================
Found a 18 line (139 tokens) duplication in the following files: 
Starting at line 188 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/test/java/org/jfree/data/xy/XIntervalSeriesTest.java
Starting at line 189 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/test/java/org/jfree/data/xy/YIntervalSeriesTest.java

        XIntervalSeries<String> s1 = new XIntervalSeries<>("Series 1");
        s1.add(1.0, 1.0, 1.0, 1.0);
        s1.add(2.0, 2.0, 2.0, 2.0);
        s1.add(2.0, 3.0, 3.0, 3.0);
        s1.add(2.0, 4.0, 4.0, 4.0);
        s1.add(3.0, 5.0, 5.0, 5.0);
        assertEquals(1.0, s1.getYValue(0), EPSILON);
        assertEquals(2.0, s1.getYValue(1), EPSILON);
        assertEquals(3.0, s1.getYValue(2), EPSILON);
        assertEquals(4.0, s1.getYValue(3), EPSILON);
        assertEquals(5.0, s1.getYValue(4), EPSILON);
    }

    /**
     * Some checks for the add() method for an UNSORTED series.
     */
    @Test
    public void testAdd() {
=====================================================================
Found a 24 line (138 tokens) duplication in the following files: 
Starting at line 1042 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/main/java/org/jfree/chart/renderer/xy/AbstractXYItemRenderer.java
Starting at line 1245 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/main/java/org/jfree/chart/renderer/xy/AbstractXYItemRenderer.java

                        dataArea.getHeight());
            }

            final Composite originalComposite = g2.getComposite();
            g2.setComposite(AlphaComposite.getInstance(
                    AlphaComposite.SRC_OVER, marker.getAlpha()));
            Paint p = marker.getPaint();
            if (p instanceof GradientPaint) {
                GradientPaint gp = (GradientPaint) p;
                GradientPaintTransformer t = im.getGradientPaintTransformer();
                if (t != null) {
                    gp = t.transform(gp, rect);
                }
                g2.setPaint(gp);
            } else {
                g2.setPaint(p);
            }
            g2.fill(rect);

            // now draw the outlines, if visible...
            if (im.getOutlinePaint() != null && im.getOutlineStroke() != null) {
                if (orientation == PlotOrientation.VERTICAL) {
                    Line2D line = new Line2D.Double();
                    double y0 = dataArea.getMinY();
=====================================================================
Found a 20 line (138 tokens) duplication in the following files: 
Starting at line 231 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/main/java/org/jfree/chart/renderer/xy/SamplingXYLineRenderer.java
Starting at line 870 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/main/java/org/jfree/chart/renderer/xy/XYLineAndShapeRenderer.java

        RectangleEdge xAxisLocation = plot.getDomainAxisEdge();
        RectangleEdge yAxisLocation = plot.getRangeAxisEdge();

        // get the data point...
        double x1 = dataset.getXValue(series, item);
        double y1 = dataset.getYValue(series, item);
        double transX1 = domainAxis.valueToJava2D(x1, dataArea, xAxisLocation);
        double transY1 = rangeAxis.valueToJava2D(y1, dataArea, yAxisLocation);

        State s = (State) state;
        // update path to reflect latest point
        if (!Double.isNaN(transX1) && !Double.isNaN(transY1)) {
            float x = (float) transX1;
            float y = (float) transY1;
            PlotOrientation orientation = plot.getOrientation();
            if (orientation == PlotOrientation.HORIZONTAL) {
                x = (float) transY1;
                y = (float) transX1;
            }
            if (s.lastPointGood) {
=====================================================================
Found a 38 line (138 tokens) duplication in the following files: 
Starting at line 121 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/test/java/org/jfree/chart/GanttChartTest.java
Starting at line 90 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/test/java/org/jfree/chart/WaterfallChartTest.java

    }

    /**
     * Check that setting a tool tip generator for a series does override the
     * default generator.
     */
    @Test
    public void testSetSeriesToolTipGenerator() {
        CategoryPlot<String, String> plot = (CategoryPlot) this.chart.getPlot();
        CategoryItemRenderer renderer = plot.getRenderer();
        StandardCategoryToolTipGenerator tt
                = new StandardCategoryToolTipGenerator();
        renderer.setSeriesToolTipGenerator(0, tt);
        CategoryToolTipGenerator tt2 = renderer.getToolTipGenerator(0, 0);
        assertSame(tt2, tt);
    }

    /**
     * Check that setting a URL generator for a series does override the
     * default generator.
     */
    @Test
    public void testSetSeriesURLGenerator() {
        CategoryPlot<String, String> plot = (CategoryPlot) this.chart.getPlot();
        CategoryItemRenderer renderer = plot.getRenderer();
        StandardCategoryURLGenerator url1
                = new StandardCategoryURLGenerator();
        renderer.setSeriesItemURLGenerator(0, url1);
        CategoryURLGenerator url2 = renderer.getItemURLGenerator(0, 0);
        assertSame(url2, url1);
    }

    /**
     * Create a Gantt chart.
     *
     * @return The chart.
     */
    private static JFreeChart createGanttChart() {
=====================================================================
Found a 49 line (136 tokens) duplication in the following files: 
Starting at line 596 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/main/java/org/jfree/chart/annotations/XYTextAnnotation.java
Starting at line 713 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/main/java/org/jfree/chart/plot/dial/DialValueIndicator.java

        result = 37 * result + (int) (temp ^ (temp >>> 32));
        return result;
    }

    /**
     * Returns a clone of the annotation.
     *
     * @return A clone.
     *
     * @throws CloneNotSupportedException  if the annotation can't be cloned.
     */
    @Override
    public Object clone() throws CloneNotSupportedException {
        return super.clone();
    }

    /**
     * Provides serialization support.
     *
     * @param stream  the output stream.
     *
     * @throws IOException  if there is an I/O error.
     */
    private void writeObject(ObjectOutputStream stream) throws IOException {
        stream.defaultWriteObject();
        SerialUtils.writePaint(this.paint, stream);
        SerialUtils.writePaint(this.backgroundPaint, stream);
        SerialUtils.writePaint(this.outlinePaint, stream);
        SerialUtils.writeStroke(this.outlineStroke, stream);
    }

    /**
     * Provides serialization support.
     *
     * @param stream  the input stream.
     *
     * @throws IOException  if there is an I/O error.
     * @throws ClassNotFoundException  if there is a classpath problem.
     */
    private void readObject(ObjectInputStream stream)
        throws IOException, ClassNotFoundException {
        stream.defaultReadObject();
        this.paint = SerialUtils.readPaint(stream);
        this.backgroundPaint = SerialUtils.readPaint(stream);
        this.outlinePaint = SerialUtils.readPaint(stream);
        this.outlineStroke = SerialUtils.readStroke(stream);
    }

}
=====================================================================
Found a 24 line (136 tokens) duplication in the following files: 
Starting at line 115 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/main/java/org/jfree/chart/labels/BoxAndWhiskerToolTipGenerator.java
Starting at line 127 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/main/java/org/jfree/chart/labels/BoxAndWhiskerXYToolTipGenerator.java

                = (BoxAndWhiskerCategoryDataset) dataset;
            result[2] = formatter.format(d.getMeanValue(series, item));
            result[3] = formatter.format(d.getMedianValue(series, item));
            result[4] = formatter.format(d.getMinRegularValue(series, item));
            result[5] = formatter.format(d.getMaxRegularValue(series, item));
            result[6] = formatter.format(d.getQ1Value(series, item));
            result[7] = formatter.format(d.getQ3Value(series, item));
        }
        return result;
    }

    /**
     * Tests if this object is equal to another.
     *
     * @param obj  the other object.
     *
     * @return A boolean.
     */
    @Override
    public boolean equals(Object obj) {
        if (obj == this) {
            return true;
        }
        if (obj instanceof BoxAndWhiskerToolTipGenerator) {
=====================================================================
Found a 32 line (136 tokens) duplication in the following files: 
Starting at line 77 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/test/java/org/jfree/chart/AreaChartTest.java
Starting at line 119 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/test/java/org/jfree/chart/BarChartTest.java
Starting at line 116 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/test/java/org/jfree/chart/LineChartTest.java
Starting at line 114 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/test/java/org/jfree/chart/StackedAreaChartTest.java
Starting at line 115 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/test/java/org/jfree/chart/StackedBarChartTest.java

        this.chart = createAreaChart();
    }

    /**
     * Check that setting a tool tip generator for a series does override the
     * default generator.
     */
    @Test
    public void testSetSeriesToolTipGenerator() {
        CategoryPlot<?, ?> plot = (CategoryPlot) this.chart.getPlot();
        CategoryItemRenderer renderer = plot.getRenderer();
        StandardCategoryToolTipGenerator tt
                = new StandardCategoryToolTipGenerator();
        renderer.setSeriesToolTipGenerator(0, tt);
        CategoryToolTipGenerator tt2 = renderer.getToolTipGenerator(0, 0);
        assertSame(tt2, tt);
    }

    /**
     * Check that setting a URL generator for a series does override the
     * default generator.
     */
    @Test
    public void testSetSeriesURLGenerator() {
        CategoryPlot<?, ?> plot = (CategoryPlot) this.chart.getPlot();
        CategoryItemRenderer renderer = plot.getRenderer();
        StandardCategoryURLGenerator url1
                = new StandardCategoryURLGenerator();
        renderer.setSeriesItemURLGenerator(0, url1);
        CategoryURLGenerator url2 = renderer.getItemURLGenerator(0, 0);
        assertSame(url2, url1);
    }
=====================================================================
Found a 32 line (136 tokens) duplication in the following files: 
Starting at line 144 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/test/java/org/jfree/data/time/MonthTest.java
Starting at line 141 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/test/java/org/jfree/data/time/QuarterTest.java
Starting at line 121 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/test/java/org/jfree/data/time/YearTest.java

        assertEquals(951822000000L, m2.getFirstMillisecond(cal));

    }

    /**
     * If a thread-local calendar was set, the Date constructor should use it.
     */
    @Test
    public void testDateConstructorWithThreadLocalCalendar() {
        Consumer<Integer> calendarSetup = hours -> RegularTimePeriod.setThreadLocalCalendarInstance(
                Calendar.getInstance(TimeZone.getTimeZone(ZoneOffset.ofHours(hours)))
        );
        testDateConstructorWithCustomCalendar(3, calendarSetup);
        testDateConstructorWithCustomCalendar(4, calendarSetup);
    }

    /**
     * If a calendar prototype was set, the Date constructor should use it.
     */
    @Test
    public void testDateConstructorWithCalendarPrototype() {
        Consumer<Integer> calendarSetup = hours -> RegularTimePeriod.setCalendarInstancePrototype(
                Calendar.getInstance(TimeZone.getTimeZone(ZoneOffset.ofHours(hours)))
        );
        testDateConstructorWithCustomCalendar(3, calendarSetup);
        testDateConstructorWithCustomCalendar(4, calendarSetup);
    }

    private void testDateConstructorWithCustomCalendar(int hoursOffset, Consumer<Integer> calendarSetup) {
        try {
            calendarSetup.accept(hoursOffset);
            long ms = -3_600_000L * hoursOffset;
=====================================================================
Found a 71 line (135 tokens) duplication in the following files: 
Starting at line 674 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/main/java/org/jfree/chart/renderer/DefaultPolarItemRenderer.java
Starting at line 332 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/main/java/org/jfree/chart/renderer/xy/AbstractXYItemRenderer.java

        XYToolTipGenerator generator = this.toolTipGeneratorMap.get(series);
        if (generator == null) {
            generator = this.defaultToolTipGenerator;
        }
        return generator;
    }

    /**
     * Returns the tool tip generator for the specified series.
     * 
     * @return The tooltip generator (possibly {@code null}).
     */
    @Override
    public XYToolTipGenerator getSeriesToolTipGenerator(int series) {
        return this.toolTipGeneratorMap.get(series);
    }

    /**
     * Sets the tooltip generator for the specified series.
     * 
     * @param series  the series index.
     * @param generator  the tool tip generator ({@code null} permitted).
     */
    @Override
    public void setSeriesToolTipGenerator(int series, XYToolTipGenerator generator) {
        this.toolTipGeneratorMap.put(series, generator);
        fireChangeEvent();
    }

    /**
     * Returns the default tool tip generator.
     * 
     * @return The default tool tip generator (possibly {@code null}).
     */
    @Override
    public XYToolTipGenerator getDefaultToolTipGenerator() {
        return this.defaultToolTipGenerator;
    }

    /**
     * Sets the default tool tip generator and sends a 
     * {@link RendererChangeEvent} to all registered listeners.
     * 
     * @param generator  the generator ({@code null} permitted).
     */
    @Override
    public void setDefaultToolTipGenerator(XYToolTipGenerator generator) {
        this.defaultToolTipGenerator = generator;
        fireChangeEvent();
    }

    /**
     * Returns the URL generator.
     * 
     * @return The URL generator (possibly {@code null}).
     */
    @Override
    public XYURLGenerator getURLGenerator() {
        return this.urlGenerator;
    }

    /**
     * Sets the URL generator.
     * 
     * @param urlGenerator  the generator ({@code null} permitted)
     */
    @Override
    public void setURLGenerator(XYURLGenerator urlGenerator) {
        this.urlGenerator = urlGenerator;
        fireChangeEvent();
    }
=====================================================================
Found a 101 line (135 tokens) duplication in the following files: 
Starting at line 120 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/main/java/org/jfree/data/category/DefaultCategoryDataset.java
Starting at line 109 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/test/java/org/jfree/data/general/TestIntervalCategoryDataset.java

        return this.data.getValue(row, column);
    }

    /**
     * Returns the key for the specified row.
     *
     * @param row  the row index (zero-based).
     *
     * @return The row key.
     *
     * @see #getRowIndex(Comparable)
     * @see #getRowKeys()
     * @see #getColumnKey(int)
     */
    @Override
    public R getRowKey(int row) {
        return this.data.getRowKey(row);
    }

    /**
     * Returns the row index for a given key.
     *
     * @param key  the row key ({@code null} not permitted).
     *
     * @return The row index.
     *
     * @see #getRowKey(int)
     */
    @Override
    public int getRowIndex(R key) {
        // defer null argument check
        return this.data.getRowIndex(key);
    }

    /**
     * Returns the row keys.
     *
     * @return The keys.
     *
     * @see #getRowKey(int)
     */
    @Override
    public List<R> getRowKeys() {
        return this.data.getRowKeys();
    }

    /**
     * Returns a column key.
     *
     * @param column  the column index (zero-based).
     *
     * @return The column key.
     *
     * @see #getColumnIndex(Comparable)
     */
    @Override
    public C getColumnKey(int column) {
        return this.data.getColumnKey(column);
    }

    /**
     * Returns the column index for a given key.
     *
     * @param key  the column key ({@code null} not permitted).
     *
     * @return The column index.
     *
     * @see #getColumnKey(int)
     */
    @Override
    public int getColumnIndex(C key) {
        // defer null argument check
        return this.data.getColumnIndex(key);
    }

    /**
     * Returns the column keys.
     *
     * @return The keys.
     *
     * @see #getColumnKey(int)
     */
    @Override
    public List<C> getColumnKeys() {
        return this.data.getColumnKeys();
    }

    /**
     * Returns the value for a pair of keys.
     *
     * @param rowKey  the row key ({@code null} not permitted).
     * @param columnKey  the column key ({@code null} not permitted).
     *
     * @return The value (possibly {@code null}).
     *
     * @throws UnknownKeyException if either key is not defined in the dataset.
     *
     * @see #addValue(Number, Comparable, Comparable)
     */
    @Override
    public Number getValue(R rowKey, C columnKey) {
=====================================================================
Found a 31 line (135 tokens) duplication in the following files: 
Starting at line 413 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/test/java/org/jfree/data/time/MillisecondTest.java
Starting at line 381 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/test/java/org/jfree/data/time/MinuteTest.java
Starting at line 509 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/test/java/org/jfree/data/time/MonthTest.java

        m = new Millisecond(999, 59, 59, 23, 31, 12, 9999);
        assertNull(m.next());
    }

    /**
     * If a thread-local calendar was set, next() and previous() should use its time zone.
     */
    @Test
    public void testNextPreviousWithThreadLocalCalendar() {
        Consumer<Integer> calendarSetup = hours -> RegularTimePeriod.setThreadLocalCalendarInstance(
                Calendar.getInstance(TimeZone.getTimeZone(ZoneOffset.ofHours(hours)))
        );
        testNextPreviousWithCustomCalendar(3, calendarSetup);
        testNextPreviousWithCustomCalendar(4, calendarSetup);
    }

    /**
     * If a calendar prototype was set, next() should use its time zone.
     */
    @Test
    public void testNextPreviousWithCalendarPrototype() {
        Consumer<Integer> calendarSetup = hours -> RegularTimePeriod.setCalendarInstancePrototype(
                Calendar.getInstance(TimeZone.getTimeZone(ZoneOffset.ofHours(hours)))
        );
        testNextPreviousWithCustomCalendar(3, calendarSetup);
        testNextPreviousWithCustomCalendar(4, calendarSetup);
    }

    private void testNextPreviousWithCustomCalendar(int hoursOffset, Consumer<Integer> calendarSetup) {
        try {
            calendarSetup.accept(hoursOffset);
=====================================================================
Found a 31 line (135 tokens) duplication in the following files: 
Starting at line 510 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/test/java/org/jfree/data/time/MonthTest.java
Starting at line 533 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/test/java/org/jfree/data/time/QuarterTest.java
Starting at line 445 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/test/java/org/jfree/data/time/YearTest.java

        assertNull(m.next());
    }

    /**
     * If a thread-local calendar was set, next() and previous() should use its time zone.
     */
    @Test
    public void testNextPreviousWithThreadLocalCalendar() {
        Consumer<Integer> calendarSetup = hours -> RegularTimePeriod.setThreadLocalCalendarInstance(
                Calendar.getInstance(TimeZone.getTimeZone(ZoneOffset.ofHours(hours)))
        );
        testNextPreviousWithCustomCalendar(3, calendarSetup);
        testNextPreviousWithCustomCalendar(4, calendarSetup);
    }

    /**
     * If a calendar prototype was set, next() should use its time zone.
     */
    @Test
    public void testNextPreviousWithCalendarPrototype() {
        Consumer<Integer> calendarSetup = hours -> RegularTimePeriod.setCalendarInstancePrototype(
                Calendar.getInstance(TimeZone.getTimeZone(ZoneOffset.ofHours(hours)))
        );
        testNextPreviousWithCustomCalendar(3, calendarSetup);
        testNextPreviousWithCustomCalendar(4, calendarSetup);
    }

    private void testNextPreviousWithCustomCalendar(int hoursOffset, Consumer<Integer> calendarSetup) {
        try {
            calendarSetup.accept(hoursOffset);
            long ms = -hoursOffset * 3_600_000L;
=====================================================================
Found a 29 line (134 tokens) duplication in the following files: 
Starting at line 1311 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/main/java/org/jfree/chart/axis/DateAxis.java
Starting at line 1363 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/main/java/org/jfree/chart/axis/DateAxis.java

        if (isVerticalTickLabels()) {
            // all tick labels have the same width (equal to the height of
            // the font)...
            result += lm.getHeight();
        }
        else {
            // look at lower and upper bounds...
            DateRange range = (DateRange) getRange();
            Date lower = range.getLowerDate();
            Date upper = range.getUpperDate();
            String lowerStr, upperStr;
            DateFormat formatter = getDateFormatOverride();
            if (formatter != null) {
                lowerStr = formatter.format(lower);
                upperStr = formatter.format(upper);
            }
            else {
                lowerStr = unit.dateToString(lower);
                upperStr = unit.dateToString(upper);
            }
            FontMetrics fm = g2.getFontMetrics(tickLabelFont);
            double w1 = fm.stringWidth(lowerStr);
            double w2 = fm.stringWidth(upperStr);
            result += Math.max(w1, w2);
        }

        return result;

    }
=====================================================================
Found a 47 line (133 tokens) duplication in the following files: 
Starting at line 488 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/main/java/org/jfree/chart/annotations/CategoryPointerAnnotation.java
Starting at line 502 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/main/java/org/jfree/chart/annotations/XYPointerAnnotation.java

        result = 37 * result + this.arrowStroke.hashCode();
        temp = Double.doubleToLongBits(this.labelOffset);
        result = 37 * result + (int) (temp ^ (temp >>> 32));
        return result;
    }

    /**
     * Returns a clone of the annotation.
     *
     * @return A clone.
     *
     * @throws CloneNotSupportedException  if the annotation can't be cloned.
     */
    @Override
    public Object clone() throws CloneNotSupportedException {
        return super.clone();
    }

    /**
     * Provides serialization support.
     *
     * @param stream  the output stream.
     *
     * @throws IOException if there is an I/O error.
     */
    private void writeObject(ObjectOutputStream stream) throws IOException {
        stream.defaultWriteObject();
        SerialUtils.writePaint(this.arrowPaint, stream);
        SerialUtils.writeStroke(this.arrowStroke, stream);
    }

    /**
     * Provides serialization support.
     *
     * @param stream  the input stream.
     *
     * @throws IOException  if there is an I/O error.
     * @throws ClassNotFoundException  if there is a classpath problem.
     */
    private void readObject(ObjectInputStream stream)
        throws IOException, ClassNotFoundException {
        stream.defaultReadObject();
        this.arrowPaint = SerialUtils.readPaint(stream);
        this.arrowStroke = SerialUtils.readStroke(stream);
    }

}
=====================================================================
Found a 96 line (133 tokens) duplication in the following files: 
Starting at line 246 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/main/java/org/jfree/chart/renderer/category/LineAndShapeRenderer.java
Starting at line 317 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/main/java/org/jfree/chart/renderer/xy/XYLineAndShapeRenderer.java

        fireChangeEvent();
    }

    // SHAPES VISIBLE

    /**
     * Returns the flag used to control whether or not the shape for an item is
     * visible.
     *
     * @param series  the series index (zero-based).
     * @param item  the item index (zero-based).
     *
     * @return A boolean.
     */
    public boolean getItemShapeVisible(int series, int item) {
        Boolean flag = getSeriesShapesVisible(series);
        if (flag != null) {
            return flag;
        }
        return this.defaultShapesVisible;
    }

    /**
     * Returns the flag used to control whether or not the shapes for a series
     * are visible.
     *
     * @param series  the series index (zero-based).
     *
     * @return A boolean.
     *
     * @see #setSeriesShapesVisible(int, Boolean)
     */
    public Boolean getSeriesShapesVisible(int series) {
        return this.seriesShapesVisibleMap.get(series);
    }

    /**
     * Sets the 'shapes visible' flag for a series and sends a
     * {@link RendererChangeEvent} to all registered listeners.
     *
     * @param series  the series index (zero-based).
     * @param visible  the flag.
     *
     * @see #getSeriesShapesVisible(int)
     */
    public void setSeriesShapesVisible(int series, boolean visible) {
        setSeriesShapesVisible(series, Boolean.valueOf(visible));
    }

    /**
     * Sets the 'shapes visible' flag for a series and sends a
     * {@link RendererChangeEvent} to all registered listeners.
     *
     * @param series  the series index (zero-based).
     * @param flag  the flag.
     *
     * @see #getSeriesShapesVisible(int)
     */
    public void setSeriesShapesVisible(int series, Boolean flag) {
        this.seriesShapesVisibleMap.put(series, flag);
        fireChangeEvent();
    }

    /**
     * Returns the default 'shape visible' attribute.
     *
     * @return The base flag.
     *
     * @see #setDefaultShapesVisible(boolean)
     */
    public boolean getDefaultShapesVisible() {
        return this.defaultShapesVisible;
    }

    /**
     * Sets the default 'shapes visible' flag and sends a
     * {@link RendererChangeEvent} to all registered listeners.
     *
     * @param flag  the flag.
     *
     * @see #getDefaultShapesVisible()
     */
    public void setDefaultShapesVisible(boolean flag) {
        this.defaultShapesVisible = flag;
        fireChangeEvent();
    }

    /**
     * Returns {@code true} if outlines should be drawn for shapes, and
     * {@code false} otherwise.
     *
     * @return A boolean.
     *
     * @see #setDrawOutlines(boolean)
     */
    public boolean getDrawOutlines() {
=====================================================================
Found a 15 line (133 tokens) duplication in the following files: 
Starting at line 882 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/test/java/org/jfree/chart/axis/DateAxisTest.java
Starting at line 956 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/test/java/org/jfree/chart/axis/DateAxisTest.java

    public void testPreviousStandardDateSecondA() {
        MyDateAxis axis = new MyDateAxis("Second");
        Second s0 = new Second(58, 31, 12, 1, 4, 2007);
        Second s1 = new Second(59, 31, 12, 1, 4, 2007);

        // five dates to check...
        Date d0 = new Date(s0.getFirstMillisecond());
        Date d1 = new Date(s0.getFirstMillisecond() + 50L);
        Date d2 = new Date(s0.getMiddleMillisecond());
        Date d3 = new Date(s0.getMiddleMillisecond() + 50L);
        Date d4 = new Date(s0.getLastMillisecond());

        Date end = new Date(s1.getLastMillisecond());

        DateTickUnit unit = new DateTickUnit(DateTickUnitType.SECOND, 1);
=====================================================================
Found a 81 line (132 tokens) duplication in the following files: 
Starting at line 310 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/main/java/org/jfree/data/category/DefaultCategoryDataset.java
Starting at line 293 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/test/java/org/jfree/data/general/TestIntervalCategoryDataset.java

        this.data.removeValue(rowKey, columnKey);
        fireDatasetChanged();
    }

    /**
     * Removes a row from the dataset and sends a {@link DatasetChangeEvent}
     * to all registered listeners.
     *
     * @param rowIndex  the row index.
     *
     * @see #removeColumn(int)
     */
    public void removeRow(int rowIndex) {
        this.data.removeRow(rowIndex);
        fireDatasetChanged();
    }

    /**
     * Removes a row from the dataset and sends a {@link DatasetChangeEvent}
     * to all registered listeners.
     *
     * @param rowKey  the row key.
     *
     * @see #removeColumn(Comparable)
     */
    public void removeRow(R rowKey) {
        this.data.removeRow(rowKey);
        fireDatasetChanged();
    }

    /**
     * Removes a column from the dataset and sends a {@link DatasetChangeEvent}
     * to all registered listeners.
     *
     * @param columnIndex  the column index.
     *
     * @see #removeRow(int)
     */
    public void removeColumn(int columnIndex) {
        this.data.removeColumn(columnIndex);
        fireDatasetChanged();
    }

    /**
     * Removes a column from the dataset and sends a {@link DatasetChangeEvent}
     * to all registered listeners.
     *
     * @param columnKey  the column key ({@code null} not permitted).
     *
     * @see #removeRow(Comparable)
     *
     * @throws UnknownKeyException if {@code columnKey} is not defined
     *         in the dataset.
     */
    public void removeColumn(C columnKey) {
        this.data.removeColumn(columnKey);
        fireDatasetChanged();
    }

    /**
     * Clears all data from the dataset and sends a {@link DatasetChangeEvent}
     * to all registered listeners.
     */
    public void clear() {
        this.data.clear();
        fireDatasetChanged();
    }

    /**
     * Tests this dataset for equality with an arbitrary object.
     *
     * @param obj  the object ({@code null} permitted).
     *
     * @return A boolean.
     */
    @Override
    public boolean equals(Object obj) {
        if (obj == this) {
            return true;
        }
        if (!(obj instanceof CategoryDataset)) {
=====================================================================
Found a 31 line (132 tokens) duplication in the following files: 
Starting at line 122 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/test/java/org/jfree/data/time/DayTest.java
Starting at line 144 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/test/java/org/jfree/data/time/MonthTest.java
Starting at line 141 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/test/java/org/jfree/data/time/QuarterTest.java
Starting at line 121 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/test/java/org/jfree/data/time/YearTest.java

        assertEquals(1078092000000L, d2.getFirstMillisecond(cal));
    }

    /**
     * If a thread-local calendar was set, the Date constructor should use it.
     */
    @Test
    public void testDateConstructorWithThreadLocalCalendar() {
        Consumer<Integer> calendarSetup = hours -> RegularTimePeriod.setThreadLocalCalendarInstance(
                Calendar.getInstance(TimeZone.getTimeZone(ZoneOffset.ofHours(hours)))
        );
        testDateConstructorWithCustomCalendar(3, calendarSetup);
        testDateConstructorWithCustomCalendar(4, calendarSetup);
    }

    /**
     * If a calendar prototype was set, the Date constructor should use it.
     */
    @Test
    public void testDateConstructorWithCalendarPrototype() {
        Consumer<Integer> calendarSetup = hours -> RegularTimePeriod.setCalendarInstancePrototype(
                Calendar.getInstance(TimeZone.getTimeZone(ZoneOffset.ofHours(hours)))
        );
        testDateConstructorWithCustomCalendar(3, calendarSetup);
        testDateConstructorWithCustomCalendar(4, calendarSetup);
    }

    private void testDateConstructorWithCustomCalendar(int hoursOffset, Consumer<Integer> calendarSetup) {
        try {
            calendarSetup.accept(hoursOffset);
            long ms = 86_400_000L - 3_600_000L * hoursOffset;
=====================================================================
Found a 25 line (131 tokens) duplication in the following files: 
Starting at line 66 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/test/java/org/jfree/chart/entity/CategoryLabelEntityTest.java
Starting at line 59 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/test/java/org/jfree/chart/entity/TickLabelEntityTest.java

        e2 = new CategoryLabelEntity<>("B", new Rectangle2D.Double(1.0, 2.0,
                3.0, 4.0), "ToolTip", "URL");
        assertEquals(e1, e2);

        e1.setArea(new Rectangle2D.Double(4.0, 3.0, 2.0, 1.0));
        assertNotEquals(e1, e2);
        e2.setArea(new Rectangle2D.Double(4.0, 3.0, 2.0, 1.0));
        assertEquals(e1, e2);

        e1.setToolTipText("New ToolTip");
        assertNotEquals(e1, e2);
        e2.setToolTipText("New ToolTip");
        assertEquals(e1, e2);

        e1.setURLText("New URL");
        assertNotEquals(e1, e2);
        e2.setURLText("New URL");
        assertEquals(e1, e2);
    }

    /**
     * Confirm that cloning works.
     */
    @Test
    public void testCloning() throws CloneNotSupportedException {
=====================================================================
Found a 31 line (131 tokens) duplication in the following files: 
Starting at line 482 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/test/java/org/jfree/data/time/DayTest.java
Starting at line 510 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/test/java/org/jfree/data/time/MonthTest.java
Starting at line 533 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/test/java/org/jfree/data/time/QuarterTest.java
Starting at line 445 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/test/java/org/jfree/data/time/YearTest.java

        assertNull(d.next());
    }

    /**
     * If a thread-local calendar was set, next() and previous() should use its time zone.
     */
    @Test
    public void testNextPreviousWithThreadLocalCalendar() {
        Consumer<Integer> calendarSetup = hours -> RegularTimePeriod.setThreadLocalCalendarInstance(
                Calendar.getInstance(TimeZone.getTimeZone(ZoneOffset.ofHours(hours)))
        );
        testNextPreviousWithCustomCalendar(3, calendarSetup);
        testNextPreviousWithCustomCalendar(4, calendarSetup);
    }

    /**
     * If a calendar prototype was set, next() should use its time zone.
     */
    @Test
    public void testNextPreviousWithCalendarPrototype() {
        Consumer<Integer> calendarSetup = hours -> RegularTimePeriod.setCalendarInstancePrototype(
                Calendar.getInstance(TimeZone.getTimeZone(ZoneOffset.ofHours(hours)))
        );
        testNextPreviousWithCustomCalendar(3, calendarSetup);
        testNextPreviousWithCustomCalendar(4, calendarSetup);
    }

    private void testNextPreviousWithCustomCalendar(int hoursOffset, Consumer<Integer> calendarSetup) {
        try {
            calendarSetup.accept(hoursOffset);
            long ms = 86_400_000L - hoursOffset * 3_600_000L;
=====================================================================
Found a 30 line (131 tokens) duplication in the following files: 
Starting at line 132 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/test/java/org/jfree/data/time/MillisecondTest.java
Starting at line 123 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/test/java/org/jfree/data/time/MinuteTest.java
Starting at line 144 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/test/java/org/jfree/data/time/MonthTest.java

        assertEquals(1016722559123L, m2.getFirstMillisecond(cal));
    }

    /**
     * If a thread-local calendar was set, the Date constructor should use it.
     */
    @Test
    public void testDateConstructorWithThreadLocalCalendar() {
        Consumer<Integer> calendarSetup = hours -> RegularTimePeriod.setThreadLocalCalendarInstance(
                Calendar.getInstance(TimeZone.getTimeZone(ZoneOffset.ofHours(hours)))
        );
        testDateConstructorWithCustomCalendar(3, calendarSetup);
        testDateConstructorWithCustomCalendar(4, calendarSetup);
    }

    /**
     * If a calendar prototype was set, the Date constructor should use it.
     */
    @Test
    public void testDateConstructorWithCalendarPrototype() {
        Consumer<Integer> calendarSetup = hours -> RegularTimePeriod.setCalendarInstancePrototype(
                Calendar.getInstance(TimeZone.getTimeZone(ZoneOffset.ofHours(hours)))
        );
        testDateConstructorWithCustomCalendar(3, calendarSetup);
        testDateConstructorWithCustomCalendar(4, calendarSetup);
    }

    private void testDateConstructorWithCustomCalendar(int hoursOffset, Consumer<Integer> calendarSetup) {
        try {
            calendarSetup.accept(hoursOffset);
=====================================================================
Found a 20 line (130 tokens) duplication in the following files: 
Starting at line 3346 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/main/java/org/jfree/chart/plot/CategoryPlot.java
Starting at line 2955 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/main/java/org/jfree/chart/plot/XYPlot.java

        }
        if (rangeAxisState != null) {
            drawRangeGridlines(g2, dataArea, rangeAxisState.getTicks());
            drawZeroRangeBaseline(g2, dataArea);
        }

        Graphics2D savedG2 = g2;
        BufferedImage dataImage = null;
        boolean suppressShadow = Boolean.TRUE.equals(g2.getRenderingHint(
                JFreeChart.KEY_SUPPRESS_SHADOW_GENERATION));
        if (this.shadowGenerator != null && !suppressShadow) {
            dataImage = new BufferedImage((int) dataArea.getWidth(),
                    (int)dataArea.getHeight(), BufferedImage.TYPE_INT_ARGB);
            g2 = dataImage.createGraphics();
            g2.translate(-dataArea.getX(), -dataArea.getY());
            g2.setRenderingHints(savedG2.getRenderingHints());
        }

        // draw the markers...
        for (CategoryItemRenderer renderer : this.renderers.values()) {
=====================================================================
Found a 34 line (130 tokens) duplication in the following files: 
Starting at line 158 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/main/java/org/jfree/data/time/Week.java
Starting at line 192 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/main/java/org/jfree/data/time/Week.java

        calendar.setTime(time);

        // sometimes the last few days of the year are considered to fall in
        // the *first* week of the following year.  Refer to the Javadocs for
        // GregorianCalendar.
        int tempWeek = calendar.get(Calendar.WEEK_OF_YEAR);
        if (tempWeek == 1
                && calendar.get(Calendar.MONTH) == Calendar.DECEMBER) {
            this.week = 1;
            this.year = (short) (calendar.get(Calendar.YEAR) + 1);
        }
        else {
            this.week = (byte) Math.min(tempWeek, LAST_WEEK_IN_YEAR);
            int yyyy = calendar.get(Calendar.YEAR);
            // alternatively, sometimes the first few days of the year are
            // considered to fall in the *last* week of the previous year...
            if (calendar.get(Calendar.MONTH) == Calendar.JANUARY
                    && this.week >= 52) {
                yyyy--;
            }
            this.year = (short) yyyy;
        }
        peg(calendar);
    }

    /**
     * Constructs a new instance, based on a particular date/time.
     * The time zone and locale are determined by the {@code calendar}
     * parameter.
     *
     * @param time the date/time ({@code null} not permitted).
     * @param calendar the calendar to use for calculations ({@code null} not permitted).
     */
    public Week(Date time, Calendar calendar) {
=====================================================================
Found a 22 line (130 tokens) duplication in the following files: 
Starting at line 202 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/test/java/org/jfree/chart/axis/LogAxisTest.java
Starting at line 223 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/test/java/org/jfree/chart/axis/LogAxisTest.java

    public void testXYAutoRange1() {
        XYSeries<String> series = new XYSeries<>("Series 1");
        series.add(1.0, 1.0);
        series.add(2.0, 2.0);
        series.add(3.0, 3.0);
        XYSeriesCollection<String> dataset = new XYSeriesCollection<>();
        dataset.addSeries(series);
        JFreeChart chart = ChartFactory.createScatterPlot("Test", "X", "Y",
                dataset);
        XYPlot<?> plot = (XYPlot) chart.getPlot();
        LogAxis axis = new LogAxis("Log(Y)");
        plot.setRangeAxis(axis);
        assertEquals(0.9465508226401592, axis.getLowerBound(), EPSILON);
        assertEquals(3.1694019256486126, axis.getUpperBound(), EPSILON);
    }

    /**
     * Checks that the auto-range for the range axis on an XYPlot is
     * working as expected.
     */
    @Test
    public void testXYAutoRange2() {
=====================================================================
Found a 46 line (129 tokens) duplication in the following files: 
Starting at line 815 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/main/java/org/jfree/chart/axis/LogAxis.java
Starting at line 674 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/main/java/org/jfree/chart/axis/NumberAxis.java

    }

    /**
     * Estimates the maximum tick label height.
     *
     * @param g2  the graphics device.
     *
     * @return The maximum height.
     */
    protected double estimateMaximumTickLabelHeight(Graphics2D g2) {
        RectangleInsets tickLabelInsets = getTickLabelInsets();
        double result = tickLabelInsets.getTop() + tickLabelInsets.getBottom();

        Font tickLabelFont = getTickLabelFont();
        FontRenderContext frc = g2.getFontRenderContext();
        result += tickLabelFont.getLineMetrics("123", frc).getHeight();
        return result;
    }

    /**
     * Estimates the maximum width of the tick labels, assuming the specified
     * tick unit is used.
     * <P>
     * Rather than computing the string bounds of every tick on the axis, we
     * just look at two values: the lower bound and the upper bound for the
     * axis.  These two values will usually be representative.
     *
     * @param g2  the graphics device.
     * @param unit  the tick unit to use for calculation.
     *
     * @return The estimated maximum width of the tick labels.
     */
    protected double estimateMaximumTickLabelWidth(Graphics2D g2, 
            TickUnit unit) {

        RectangleInsets tickLabelInsets = getTickLabelInsets();
        double result = tickLabelInsets.getLeft() + tickLabelInsets.getRight();

        if (isVerticalTickLabels()) {
            // all tick labels have the same width (equal to the height of the
            // font)...
            FontRenderContext frc = g2.getFontRenderContext();
            LineMetrics lm = getTickLabelFont().getLineMetrics("0", frc);
            result += lm.getHeight();
        }
        else {
=====================================================================
Found a 29 line (129 tokens) duplication in the following files: 
Starting at line 2451 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/main/java/org/jfree/chart/plot/CategoryPlot.java
Starting at line 2448 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/main/java/org/jfree/chart/plot/XYPlot.java

        Collection<Marker> markers;
        if (layer == Layer.FOREGROUND) {
            markers = this.foregroundRangeMarkers.get(index);
            if (markers == null) {
                markers = new ArrayList<>();
                this.foregroundRangeMarkers.put(index, markers);
            }
            markers.add(marker);
        } else if (layer == Layer.BACKGROUND) {
            markers = this.backgroundRangeMarkers.get(index);
            if (markers == null) {
                markers = new ArrayList<>();
                this.backgroundRangeMarkers.put(index, markers);
            }
            markers.add(marker);
        }
        marker.addChangeListener(this);
        if (notify) {
            fireChangeEvent();
        }
    }

    /**
     * Clears all the range markers for the plot and sends a
     * {@link PlotChangeEvent} to all registered listeners.
     *
     * @see #clearDomainMarkers()
     */
    public void clearRangeMarkers() {
=====================================================================
Found a 98 line (129 tokens) duplication in the following files: 
Starting at line 163 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/main/java/org/jfree/chart/renderer/category/LineAndShapeRenderer.java
Starting at line 209 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/main/java/org/jfree/chart/renderer/xy/XYLineAndShapeRenderer.java

    }

    // LINES VISIBLE

    /**
     * Returns the flag used to control whether or not the line for an item is
     * visible.
     *
     * @param series  the series index (zero-based).
     * @param item  the item index (zero-based).
     *
     * @return A boolean.
     */
    public boolean getItemLineVisible(int series, int item) {
        Boolean flag = getSeriesLinesVisible(series);
        if (flag != null) {
            return flag;
        }
        return this.defaultLinesVisible;
    }

    /**
     * Returns the flag used to control whether or not the lines for a series
     * are visible.
     *
     * @param series  the series index (zero-based).
     *
     * @return The flag (possibly {@code null}).
     *
     * @see #setSeriesLinesVisible(int, Boolean)
     */
    public Boolean getSeriesLinesVisible(int series) {
        return this.seriesLinesVisibleMap.get(series);
    }

    /**
     * Sets the 'lines visible' flag for a series and sends a
     * {@link RendererChangeEvent} to all registered listeners.
     *
     * @param series  the series index (zero-based).
     * @param flag  the flag ({@code null} permitted).
     *
     * @see #getSeriesLinesVisible(int)
     */
    public void setSeriesLinesVisible(int series, Boolean flag) {
        this.seriesLinesVisibleMap.put(series, flag);
        fireChangeEvent();
    }

    /**
     * Sets the 'lines visible' flag for a series and sends a
     * {@link RendererChangeEvent} to all registered listeners.
     *
     * @param series  the series index (zero-based).
     * @param visible  the flag.
     *
     * @see #getSeriesLinesVisible(int)
     */
    public void setSeriesLinesVisible(int series, boolean visible) {
        setSeriesLinesVisible(series, Boolean.valueOf(visible));
    }

    /**
     * Returns the default 'lines visible' attribute.
     *
     * @return The default flag.
     *
     * @see #getDefaultLinesVisible()
     */
    public boolean getDefaultLinesVisible() {
        return this.defaultLinesVisible;
    }

    /**
     * Sets the default 'lines visible' flag and sends a
     * {@link RendererChangeEvent} to all registered listeners.
     *
     * @param flag  the flag.
     *
     * @see #getDefaultLinesVisible()
     */
    public void setDefaultLinesVisible(boolean flag) {
        this.defaultLinesVisible = flag;
        fireChangeEvent();
    }

    // SHAPES VISIBLE

    /**
     * Returns the flag used to control whether or not the shape for an item is
     * visible.
     *
     * @param series  the series index (zero-based).
     * @param item  the item index (zero-based).
     *
     * @return A boolean.
     */
    public boolean getItemShapeVisible(int series, int item) {
=====================================================================
Found a 29 line (129 tokens) duplication in the following files: 
Starting at line 167 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/test/java/org/jfree/chart/axis/CategoryAxisTest.java
Starting at line 120 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/test/java/org/jfree/chart/axis/ExtendedCategoryAxisTest.java

        CategoryAxis a2 = (CategoryAxis) a1.clone();
        assertNotSame(a1, a2);
        assertSame(a1.getClass(), a2.getClass());
        assertEquals(a1, a2);

        // check that changing a tick label font in a1 doesn't change a2
        a1.setTickLabelFont("C1", null);
        assertNotEquals(a1, a2);
        a2.setTickLabelFont("C1", null);
        assertEquals(a1, a2);

        // check that changing a tick label paint in a1 doesn't change a2
        a1.setTickLabelPaint("C1", Color.YELLOW);
        assertNotEquals(a1, a2);
        a2.setTickLabelPaint("C1", Color.YELLOW);
        assertEquals(a1, a2);

        // check that changing a category label tooltip in a1 doesn't change a2
        a1.addCategoryLabelToolTip("C1", "XYZ");
        assertNotEquals(a1, a2);
        a2.addCategoryLabelToolTip("C1", "XYZ");
        assertEquals(a1, a2);
    }

    /**
     * Serialize an instance, restore it, and check for equality.
     */
    @Test
    public void testSerialization() {
=====================================================================
Found a 9 line (129 tokens) duplication in the following files: 
Starting at line 149 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/test/java/org/jfree/chart/renderer/xy/ClusteredXYBarRendererTest.java
Starting at line 124 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/test/java/org/jfree/data/general/DatasetUtilsTest.java
Starting at line 145 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/test/java/org/jfree/data/general/DatasetUtilsTest.java
Starting at line 238 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/test/java/org/jfree/data/xy/DefaultIntervalXYDatasetTest.java
Starting at line 329 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/test/java/org/jfree/data/xy/DefaultIntervalXYDatasetTest.java

        DefaultIntervalXYDataset<String> d = new DefaultIntervalXYDataset<>();
        double[] x1 = new double[] {1.0, 2.0, 3.0};
        double[] x1Start = new double[] {0.9, 1.9, 2.9};
        double[] x1End = new double[] {1.1, 2.1, 3.1};
        double[] y1 = new double[] {4.0, 5.0, 6.0};
        double[] y1Start = new double[] {1.09, 2.09, 3.09};
        double[] y1End = new double[] {1.11, 2.11, 3.11};
        double[][] data1 = new double[][] {x1, x1Start, x1End, y1, y1Start,
                y1End};
=====================================================================
Found a 18 line (129 tokens) duplication in the following files: 
Starting at line 83 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/test/java/org/jfree/data/gantt/SlidingGanttCategoryDatasetTest.java
Starting at line 80 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/test/java/org/jfree/data/gantt/XYTaskDatasetTest.java

        d2.setMaximumCategoryCount(99);
        assertEquals(d1, d2);

        s1.add(new Task("Task 2", new Date(10L), new Date(11L)));
        assertNotEquals(d1, d2);
        s2.add(new Task("Task 2", new Date(10L), new Date(11L)));
        assertEquals(d1, d2);
    }

    /**
     * Confirm that cloning works.
     */
    @Test
    public void testCloning() throws CloneNotSupportedException {
        TaskSeries<String> s1 = new TaskSeries<>("Series");
        s1.add(new Task("Task 1", new Date(0L), new Date(1L)));
        TaskSeriesCollection<String, String> u1 = new TaskSeriesCollection<>();
        u1.add(s1);
=====================================================================
Found a 30 line (129 tokens) duplication in the following files: 
Starting at line 122 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/test/java/org/jfree/data/time/DayTest.java
Starting at line 118 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/test/java/org/jfree/data/time/HourTest.java
Starting at line 132 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/test/java/org/jfree/data/time/MillisecondTest.java
Starting at line 123 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/test/java/org/jfree/data/time/MinuteTest.java
Starting at line 144 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/test/java/org/jfree/data/time/MonthTest.java
Starting at line 141 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/test/java/org/jfree/data/time/QuarterTest.java
Starting at line 124 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/test/java/org/jfree/data/time/SecondTest.java
Starting at line 121 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/test/java/org/jfree/data/time/YearTest.java

        assertEquals(1078092000000L, d2.getFirstMillisecond(cal));
    }

    /**
     * If a thread-local calendar was set, the Date constructor should use it.
     */
    @Test
    public void testDateConstructorWithThreadLocalCalendar() {
        Consumer<Integer> calendarSetup = hours -> RegularTimePeriod.setThreadLocalCalendarInstance(
                Calendar.getInstance(TimeZone.getTimeZone(ZoneOffset.ofHours(hours)))
        );
        testDateConstructorWithCustomCalendar(3, calendarSetup);
        testDateConstructorWithCustomCalendar(4, calendarSetup);
    }

    /**
     * If a calendar prototype was set, the Date constructor should use it.
     */
    @Test
    public void testDateConstructorWithCalendarPrototype() {
        Consumer<Integer> calendarSetup = hours -> RegularTimePeriod.setCalendarInstancePrototype(
                Calendar.getInstance(TimeZone.getTimeZone(ZoneOffset.ofHours(hours)))
        );
        testDateConstructorWithCustomCalendar(3, calendarSetup);
        testDateConstructorWithCustomCalendar(4, calendarSetup);
    }

    private void testDateConstructorWithCustomCalendar(int hoursOffset, Consumer<Integer> calendarSetup) {
        try {
            calendarSetup.accept(hoursOffset);
=====================================================================
Found a 20 line (129 tokens) duplication in the following files: 
Starting at line 154 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/test/java/org/jfree/data/time/SecondTest.java
Starting at line 196 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/test/java/org/jfree/data/time/SecondTest.java

            Second s = new Second(new Date(0L));
            assertEquals(1970, s.getMinute().getHour().getYear());
            assertEquals(1, s.getMinute().getHour().getMonth());
            assertEquals(1, s.getMinute().getHour().getDayOfMonth());
            assertEquals(hoursOffset, s.getMinute().getHour().getHour());
            assertEquals(0, s.getMinute().getMinute());
            assertEquals(0, s.getSecond());
            assertEquals(0L, s.getFirstMillisecond());
        } finally {
            // reset everything, to avoid affecting other tests
            RegularTimePeriod.setThreadLocalCalendarInstance(null);
            RegularTimePeriod.setCalendarInstancePrototype(null);
        }
    }

    /**
     * If a thread-local calendar was set, the second-minute constructor should use it.
     */
    @Test
    public void testSecondMinuteConstructorWithThreadLocalCalendar() {
=====================================================================
Found a 11 line (128 tokens) duplication in the following files: 
Starting at line 125 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/test/java/org/jfree/data/general/DatasetUtilsTest.java
Starting at line 167 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/test/java/org/jfree/data/general/DatasetUtilsTest.java

        double[] x1 = new double[] {1.0, 2.0, 3.0};
        double[] x1Start = new double[] {0.9, 1.9, 2.9};
        double[] x1End = new double[] {1.1, 2.1, 3.1};
        double[] y1 = new double[] {4.0, 5.0, 6.0};
        double[] y1Start = new double[] {1.09, 2.09, 3.09};
        double[] y1End = new double[] {1.11, 2.11, 3.11};
        double[][] data1 = new double[][] {x1, x1Start, x1End, y1, y1Start,
                y1End};
        dataset.addSeries("S1", data1);
        Range r = DatasetUtils.findDomainBounds(dataset);
        assertEquals(0.9, r.getLowerBound(), EPSILON);
=====================================================================
Found a 30 line (128 tokens) duplication in the following files: 
Starting at line 482 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/test/java/org/jfree/data/time/DayTest.java
Starting at line 429 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/test/java/org/jfree/data/time/HourTest.java
Starting at line 414 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/test/java/org/jfree/data/time/MillisecondTest.java
Starting at line 382 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/test/java/org/jfree/data/time/MinuteTest.java
Starting at line 510 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/test/java/org/jfree/data/time/MonthTest.java
Starting at line 533 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/test/java/org/jfree/data/time/QuarterTest.java
Starting at line 387 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/test/java/org/jfree/data/time/SecondTest.java
Starting at line 445 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/test/java/org/jfree/data/time/YearTest.java

        assertNull(d.next());
    }

    /**
     * If a thread-local calendar was set, next() and previous() should use its time zone.
     */
    @Test
    public void testNextPreviousWithThreadLocalCalendar() {
        Consumer<Integer> calendarSetup = hours -> RegularTimePeriod.setThreadLocalCalendarInstance(
                Calendar.getInstance(TimeZone.getTimeZone(ZoneOffset.ofHours(hours)))
        );
        testNextPreviousWithCustomCalendar(3, calendarSetup);
        testNextPreviousWithCustomCalendar(4, calendarSetup);
    }

    /**
     * If a calendar prototype was set, next() should use its time zone.
     */
    @Test
    public void testNextPreviousWithCalendarPrototype() {
        Consumer<Integer> calendarSetup = hours -> RegularTimePeriod.setCalendarInstancePrototype(
                Calendar.getInstance(TimeZone.getTimeZone(ZoneOffset.ofHours(hours)))
        );
        testNextPreviousWithCustomCalendar(3, calendarSetup);
        testNextPreviousWithCustomCalendar(4, calendarSetup);
    }

    private void testNextPreviousWithCustomCalendar(int hoursOffset, Consumer<Integer> calendarSetup) {
        try {
            calendarSetup.accept(hoursOffset);
=====================================================================
Found a 20 line (128 tokens) duplication in the following files: 
Starting at line 154 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/test/java/org/jfree/data/time/SecondTest.java
Starting at line 196 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/test/java/org/jfree/data/time/SecondTest.java
Starting at line 426 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/test/java/org/jfree/data/time/SecondTest.java

            Second s = new Second(new Date(0L));
            assertEquals(1970, s.getMinute().getHour().getYear());
            assertEquals(1, s.getMinute().getHour().getMonth());
            assertEquals(1, s.getMinute().getHour().getDayOfMonth());
            assertEquals(hoursOffset, s.getMinute().getHour().getHour());
            assertEquals(0, s.getMinute().getMinute());
            assertEquals(0, s.getSecond());
            assertEquals(0L, s.getFirstMillisecond());
        } finally {
            // reset everything, to avoid affecting other tests
            RegularTimePeriod.setThreadLocalCalendarInstance(null);
            RegularTimePeriod.setCalendarInstancePrototype(null);
        }
    }

    /**
     * If a thread-local calendar was set, the second-minute constructor should use it.
     */
    @Test
    public void testSecondMinuteConstructorWithThreadLocalCalendar() {
=====================================================================
Found a 47 line (127 tokens) duplication in the following files: 
Starting at line 56 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/main/java/org/jfree/chart/block/CenterArrangement.java
Starting at line 88 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/main/java/org/jfree/chart/block/ColumnArrangement.java

    }

    /**
     * Adds a block to be managed by this instance.  This method is usually
     * called by the {@link BlockContainer}, you shouldn't need to call it
     * directly.
     *
     * @param block  the block.
     * @param key  a key that controls the position of the block.
     */
    @Override
    public void add(Block block, Object key) {
        // since the flow layout is relatively straightforward,
        // no information needs to be recorded here
    }

    /**
     * Calculates and sets the bounds of all the items in the specified
     * container, subject to the given constraint.  The {@code Graphics2D}
     * can be used by some items (particularly items containing text) to
     * calculate sizing parameters.
     *
     * @param container  the container whose items are being arranged.
     * @param g2  the graphics device.
     * @param constraint  the size constraint.
     *
     * @return The size of the container after arrangement of the contents.
     */
    @Override
    public Size2D arrange(BlockContainer container, Graphics2D g2,
                          RectangleConstraint constraint) {

        LengthConstraintType w = constraint.getWidthConstraintType();
        LengthConstraintType h = constraint.getHeightConstraintType();
        if (w == LengthConstraintType.NONE) {
            if (h == LengthConstraintType.NONE) {
                return arrangeNN(container, g2);
            }
            else if (h == LengthConstraintType.FIXED) {
                throw new RuntimeException("Not implemented.");
            }
            else if (h == LengthConstraintType.RANGE) {
                throw new RuntimeException("Not implemented.");
            }
        }
        else if (w == LengthConstraintType.FIXED) {
            if (h == LengthConstraintType.NONE) {
=====================================================================
Found a 58 line (127 tokens) duplication in the following files: 
Starting at line 290 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/main/java/org/jfree/chart/plot/CombinedRangeCategoryPlot.java
Starting at line 326 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/main/java/org/jfree/chart/plot/CombinedRangeXYPlot.java

                    this.subplotArea[i], null);
            space.ensureAtLeast(subSpace);

        }

        return space;
    }

    /**
     * Receives a chart element visitor.  Many plot subclasses will override
     * this method to handle their subcomponents.
     * 
     * @param visitor  the visitor ({@code null} not permitted).
     */
    @Override
    public void receive(ChartElementVisitor visitor) {
        subplots.forEach(subplot -> {
            subplot.receive(visitor);
        });
        super.receive(visitor);
    }

    /**
     * Draws the plot on a Java 2D graphics device (such as the screen or a
     * printer).  Will perform all the placement calculations for each
     * sub-plots and then tell these to draw themselves.
     *
     * @param g2  the graphics device.
     * @param area  the area within which the plot (including axis labels)
     *              should be drawn.
     * @param anchor  the anchor point ({@code null} permitted).
     * @param parentState  the parent state.
     * @param info  collects information about the drawing ({@code null}
     *              permitted).
     */
    @Override
    public void draw(Graphics2D g2, Rectangle2D area, Point2D anchor,
            PlotState parentState, PlotRenderingInfo info) {

        // set up info collection...
        if (info != null) {
            info.setPlotArea(area);
        }

        // adjust the drawing area for plot insets (if any)...
        RectangleInsets insets = getInsets();
        insets.trim(area);

        // calculate the data area...
        AxisSpace space = calculateAxisSpace(g2, area);
        Rectangle2D dataArea = space.shrink(area, null);

        // set the width and height of non-shared axis of all sub-plots
        setFixedDomainAxisSpaceForSubplots(space);

        // draw the shared axis
        ValueAxis axis = getRangeAxis();
        RectangleEdge rangeEdge = getRangeAxisEdge();
=====================================================================
Found a 19 line (127 tokens) duplication in the following files: 
Starting at line 248 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/main/java/org/jfree/chart/renderer/category/StackedAreaRenderer.java
Starting at line 253 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/main/java/org/jfree/chart/renderer/xy/StackedXYAreaRenderer2.java

        float transY1;

        RectangleEdge edge1 = plot.getRangeAxisEdge();

        GeneralPath left = new GeneralPath();
        GeneralPath right = new GeneralPath();
        if (y1 >= 0.0) {  // handle positive value
            transY1 = (float) rangeAxis.valueToJava2D(y1 + stack1[1], dataArea,
                    edge1);
            float transStack1 = (float) rangeAxis.valueToJava2D(stack1[1],
                    dataArea, edge1);
            float transStackLeft = (float) rangeAxis.valueToJava2D(
                    adjStackLeft[1], dataArea, edge1);

            // LEFT POLYGON
            if (y0 >= 0.0) {
                double yleft = (y0 + y1) / 2.0 + stackLeft[1];
                float transYLeft
                    = (float) rangeAxis.valueToJava2D(yleft, dataArea, edge1);
=====================================================================
Found a 17 line (127 tokens) duplication in the following files: 
Starting at line 191 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/test/java/org/jfree/chart/annotations/XYBoxAnnotationTest.java
Starting at line 127 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/test/java/org/jfree/chart/annotations/XYTitleAnnotationTest.java
Starting at line 157 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/test/java/org/jfree/chart/renderer/xy/StackedXYAreaRendererTest.java
Starting at line 190 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/test/java/org/jfree/chart/renderer/xy/StackedXYAreaRendererTest.java
Starting at line 134 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/test/java/org/jfree/chart/renderer/xy/XYAreaRenderer2Test.java
Starting at line 179 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/test/java/org/jfree/chart/renderer/xy/XYAreaRendererTest.java
Starting at line 148 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/test/java/org/jfree/chart/renderer/xy/XYStepAreaRendererTest.java
Starting at line 129 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/test/java/org/jfree/chart/renderer/xy/XYStepRendererTest.java

    public void testDrawWithNullInfo() {
        try {
            DefaultTableXYDataset<String> dataset = new DefaultTableXYDataset<>();

            XYSeries<String> s1 = new XYSeries<>("Series 1", true, false);
            s1.add(5.0, 5.0);
            s1.add(10.0, 15.5);
            s1.add(15.0, 9.5);
            s1.add(20.0, 7.5);
            dataset.addSeries(s1);

            XYSeries<String> s2 = new XYSeries<>("Series 2", true, false);
            s2.add(5.0, 5.0);
            s2.add(10.0, 15.5);
            s2.add(15.0, 9.5);
            s2.add(20.0, 3.5);
            dataset.addSeries(s2);
=====================================================================
Found a 21 line (127 tokens) duplication in the following files: 
Starting at line 349 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/test/java/org/jfree/chart/plot/MarkerTest.java
Starting at line 373 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/test/java/org/jfree/chart/plot/MarkerTest.java

        ValueMarker marker2 = new ValueMarker(1.0);
        plot.addDomainMarker(marker1);
        plot.addRangeMarker(marker2);
        EventListener[] listeners1 = marker1.getListeners(
                MarkerChangeListener.class);
        assertTrue(Arrays.asList(listeners1).contains(plot));
        EventListener[] listeners2 = marker1.getListeners(
                MarkerChangeListener.class);
        assertTrue(Arrays.asList(listeners2).contains(plot));
        plot.clearDomainMarkers();
        plot.clearRangeMarkers();
        listeners1 = marker1.getListeners(MarkerChangeListener.class);
        assertFalse(Arrays.asList(listeners1).contains(plot));
        listeners2 = marker1.getListeners(MarkerChangeListener.class);
        assertFalse(Arrays.asList(listeners2).contains(plot));
    }

    /**
     * Checks that an XYPlot deregisters listeners when clearing markers.
     */
    @Test
=====================================================================
Found a 26 line (125 tokens) duplication in the following files: 
Starting at line 441 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/main/java/org/jfree/chart/annotations/CategoryPointerAnnotation.java
Starting at line 455 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/main/java/org/jfree/chart/annotations/XYPointerAnnotation.java

        CategoryPointerAnnotation that = (CategoryPointerAnnotation) obj;
        if (this.angle != that.angle) {
            return false;
        }
        if (this.tipRadius != that.tipRadius) {
            return false;
        }
        if (this.baseRadius != that.baseRadius) {
            return false;
        }
        if (this.arrowLength != that.arrowLength) {
            return false;
        }
        if (this.arrowWidth != that.arrowWidth) {
            return false;
        }
        if (!this.arrowPaint.equals(that.arrowPaint)) {
            return false;
        }
        if (!Objects.equals(this.arrowStroke, that.arrowStroke)) {
            return false;
        }
        if (this.labelOffset != that.labelOffset) {
            return false;
        }
        return true;
=====================================================================
Found a 17 line (125 tokens) duplication in the following files: 
Starting at line 1099 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/main/java/org/jfree/chart/renderer/xy/AbstractXYItemRenderer.java
Starting at line 1302 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/main/java/org/jfree/chart/renderer/xy/AbstractXYItemRenderer.java

                Point2D coords = calculateDomainMarkerTextAnchorPoint(
                        g2, orientation, dataArea, rect,
                        marker.getLabelOffset(), marker.getLabelOffsetType(),
                        anchor);
                Rectangle2D r = TextUtils.calcAlignedStringBounds(label, 
                        g2, (float) coords.getX(), (float) coords.getY(), 
                        marker.getLabelTextAnchor());
                g2.setPaint(marker.getLabelBackgroundColor());
                g2.fill(r);
                g2.setPaint(marker.getLabelPaint());
                TextUtils.drawAlignedString(label, g2,
                        (float) coords.getX(), (float) coords.getY(),
                        marker.getLabelTextAnchor());
            }
            g2.setComposite(originalComposite);
        }
    }
=====================================================================
Found a 15 line (125 tokens) duplication in the following files: 
Starting at line 734 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/test/java/org/jfree/chart/axis/DateAxisTest.java
Starting at line 808 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/test/java/org/jfree/chart/axis/DateAxisTest.java

    public void testPreviousStandardDateHourA() {
        MyDateAxis axis = new MyDateAxis("Hour");
        Hour h0 = new Hour(12, 1, 4, 2007);
        Hour h1 = new Hour(13, 1, 4, 2007);

        // five dates to check...
        Date d0 = new Date(h0.getFirstMillisecond());
        Date d1 = new Date(h0.getFirstMillisecond() + 500L);
        Date d2 = new Date(h0.getMiddleMillisecond());
        Date d3 = new Date(h0.getMiddleMillisecond() + 500L);
        Date d4 = new Date(h0.getLastMillisecond());

        Date end = new Date(h1.getLastMillisecond());

        DateTickUnit unit = new DateTickUnit(DateTickUnitType.HOUR, 1);
=====================================================================
Found a 10 line (125 tokens) duplication in the following files: 
Starting at line 146 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/test/java/org/jfree/data/general/DatasetUtilsTest.java
Starting at line 167 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/test/java/org/jfree/data/general/DatasetUtilsTest.java

        double[] x1 = new double[] {1.0, 2.0, 3.0};
        double[] x1Start = new double[] {0.9, 1.9, 2.9};
        double[] x1End = new double[] {1.1, 2.1, 3.1};
        double[] y1 = new double[] {4.0, 5.0, 6.0};
        double[] y1Start = new double[] {1.09, 2.09, 3.09};
        double[] y1End = new double[] {1.11, 2.11, 3.11};
        double[][] data1 = new double[][] {x1, x1Start, x1End, y1, y1Start,
                y1End};
        dataset.addSeries("S1", data1);
        Range r = DatasetUtils.findDomainBounds(dataset, false);
=====================================================================
Found a 29 line (124 tokens) duplication in the following files: 
Starting at line 2203 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/main/java/org/jfree/chart/plot/CategoryPlot.java
Starting at line 2266 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/main/java/org/jfree/chart/plot/XYPlot.java

        Collection<CategoryMarker> markers;
        if (layer == Layer.FOREGROUND) {
            markers = this.foregroundDomainMarkers.get(index);
            if (markers == null) {
                markers = new ArrayList<>();
                this.foregroundDomainMarkers.put(index, markers);
            }
            markers.add(marker);
        } else if (layer == Layer.BACKGROUND) {
            markers = this.backgroundDomainMarkers.get(index);
            if (markers == null) {
                markers = new ArrayList<>();
                this.backgroundDomainMarkers.put(index, markers);
            }
            markers.add(marker);
        }
        marker.addChangeListener(this);
        if (notify) {
            fireChangeEvent();
        }
    }

    /**
     * Clears all the domain markers for the plot and sends a
     * {@link PlotChangeEvent} to all registered listeners.
     *
     * @see #clearRangeMarkers()
     */
    public void clearDomainMarkers() {
=====================================================================
Found a 76 line (124 tokens) duplication in the following files: 
Starting at line 2554 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/main/java/org/jfree/chart/plot/CategoryPlot.java
Starting at line 2488 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/main/java/org/jfree/chart/plot/XYPlot.java

                = this.foregroundRangeMarkers.get(key);
            if (markers != null) {
                for (Marker m : markers) {
                    m.removeChangeListener(this);
                }
                markers.clear();
            }
        }
        fireChangeEvent();
    }

    /**
     * Removes a marker for the range axis and sends a {@link PlotChangeEvent}
     * to all registered listeners.
     *
     * @param marker the marker.
     *
     * @return A boolean indicating whether or not the marker was actually
     *         removed.
     *
     * @see #addRangeMarker(Marker)
     */
    public boolean removeRangeMarker(Marker marker) {
        return removeRangeMarker(marker, Layer.FOREGROUND);
    }

    /**
     * Removes a marker for the range axis in the specified layer and sends a
     * {@link PlotChangeEvent} to all registered listeners.
     *
     * @param marker the marker ({@code null} not permitted).
     * @param layer the layer (foreground or background).
     *
     * @return A boolean indicating whether or not the marker was actually
     *         removed.
     *
     * @see #addRangeMarker(Marker, Layer)
     */
    public boolean removeRangeMarker(Marker marker, Layer layer) {
        return removeRangeMarker(0, marker, layer);
    }

    /**
     * Removes a marker for a specific dataset/renderer and sends a
     * {@link PlotChangeEvent} to all registered listeners.
     *
     * @param index the dataset/renderer index.
     * @param marker the marker.
     * @param layer the layer (foreground or background).
     *
     * @return A boolean indicating whether or not the marker was actually
     *         removed.
     *
     * @see #addRangeMarker(int, Marker, Layer)
     */
    public boolean removeRangeMarker(int index, Marker marker, Layer layer) {
        return removeRangeMarker(index, marker, layer, true);
    }

    /**
     * Removes a marker for a specific dataset/renderer and sends a
     * {@link PlotChangeEvent} to all registered listeners.
     *
     * @param index  the dataset/renderer index.
     * @param marker  the marker.
     * @param layer  the layer (foreground or background).
     * @param notify  notify listeners.
     *
     * @return A boolean indicating whether or not the marker was actually
     *         removed.
     *
     * @see #addRangeMarker(int, Marker, Layer, boolean)
     */
    public boolean removeRangeMarker(int index, Marker marker, Layer layer,
            boolean notify) {
        Args.nullNotPermitted(marker, "marker");
=====================================================================
Found a 76 line (124 tokens) duplication in the following files: 
Starting at line 127 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/main/java/org/jfree/chart/plot/dial/ArcDialFrame.java
Starting at line 125 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/main/java/org/jfree/chart/plot/dial/StandardDialFrame.java

    }

    /**
     * Returns the background paint (never {@code null}).
     *
     * @return The background paint.
     *
     * @see #setBackgroundPaint(Paint)
     */
    public Paint getBackgroundPaint() {
        return this.backgroundPaint;
    }

    /**
     * Sets the background paint and sends a {@link DialLayerChangeEvent} to
     * all registered listeners.
     *
     * @param paint  the paint ({@code null} not permitted).
     *
     * @see #getBackgroundPaint()
     */
    public void setBackgroundPaint(Paint paint) {
        Args.nullNotPermitted(paint, "paint");
        this.backgroundPaint = paint;
        notifyListeners(new DialLayerChangeEvent(this));
    }

    /**
     * Returns the foreground paint.
     *
     * @return The foreground paint (never {@code null}).
     *
     * @see #setForegroundPaint(Paint)
     */
    public Paint getForegroundPaint() {
        return this.foregroundPaint;
    }

    /**
     * Sets the foreground paint and sends a {@link DialLayerChangeEvent} to
     * all registered listeners.
     *
     * @param paint  the paint ({@code null} not permitted).
     *
     * @see #getForegroundPaint()
     */
    public void setForegroundPaint(Paint paint) {
        Args.nullNotPermitted(paint, "paint");
        this.foregroundPaint = paint;
        notifyListeners(new DialLayerChangeEvent(this));
    }

    /**
     * Returns the stroke.
     *
     * @return The stroke (never {@code null}).
     *
     * @see #setStroke(Stroke)
     */
    public Stroke getStroke() {
        return this.stroke;
    }

    /**
     * Sets the stroke and sends a {@link DialLayerChangeEvent} to
     * all registered listeners.
     *
     * @param stroke  the stroke ({@code null} not permitted).
     *
     * @see #getStroke()
     */
    public void setStroke(Stroke stroke) {
        Args.nullNotPermitted(stroke, "stroke");
        this.stroke = stroke;
        notifyListeners(new DialLayerChangeEvent(this));
    }
=====================================================================
Found a 22 line (124 tokens) duplication in the following files: 
Starting at line 336 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/main/java/org/jfree/chart/renderer/category/GanttRenderer.java
Starting at line 474 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/main/java/org/jfree/chart/renderer/category/GanttRenderer.java

                            * rectBreadth, translatedValue0, rectBreadth
                            * (end - start), rectLength * (1 - p));
                }

            }

            if (getShadowsVisible()) {
                getBarPainter().paintBarShadow(g2, this, row, column, bar,
                        barBase, true);
            }
            getBarPainter().paintBar(g2, this, row, column, bar, barBase);

            if (completeBar != null) {
                g2.setPaint(getCompletePaint());
                g2.fill(completeBar);
            }
            if (incompleteBar != null) {
                g2.setPaint(getIncompletePaint());
                g2.fill(incompleteBar);
            }
            if (isDrawBarOutline()
                    && state.getBarWidth() > BAR_OUTLINE_WIDTH_THRESHOLD) {
=====================================================================
Found a 21 line (124 tokens) duplication in the following files: 
Starting at line 293 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/main/java/org/jfree/chart/swing/CrosshairOverlay.java
Starting at line 352 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/main/java/org/jfree/chart/swing/CrosshairOverlay.java

                        alignPt = textAlignPtForLabelAnchorH(anchor);
                        hotspot = TextUtils.calculateRotatedStringBounds(
                               label, g2, xx, yy, alignPt, 0.0, TextAnchor.CENTER);
                    }

                    g2.setPaint(crosshair.getLabelBackgroundPaint());
                    g2.fill(hotspot);
                    if (crosshair.isLabelOutlineVisible()) {
                        g2.setPaint(crosshair.getLabelOutlinePaint());
                        g2.setStroke(crosshair.getLabelOutlineStroke());
                        g2.draw(hotspot);
                    }
                    g2.setPaint(crosshair.getLabelPaint());
                    TextUtils.drawAlignedString(label, g2, xx, yy, alignPt);
                    g2.setFont(savedFont);
                }
            }
            g2.setPaint(savedPaint);
            g2.setStroke(savedStroke);
        }
    }
=====================================================================
Found a 21 line (124 tokens) duplication in the following files: 
Starting at line 992 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/test/java/org/jfree/chart/plot/CategoryPlotTest.java
Starting at line 1096 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/test/java/org/jfree/chart/plot/XYPlotTest.java

        CategoryAxis xAxis2 = new CategoryAxis("X2");
        plot.setDomainAxis(1, xAxis2);
        assertEquals(xAxis, plot.getDomainAxisForDataset(0));

        plot.mapDatasetToDomainAxis(0, 1);
        assertEquals(xAxis2, plot.getDomainAxisForDataset(0));

        List<Integer> axisIndices = Arrays.asList(new Integer[] {0, 1});
        plot.mapDatasetToDomainAxes(0, axisIndices);
        assertEquals(xAxis, plot.getDomainAxisForDataset(0));

        axisIndices = Arrays.asList(new Integer[] {1, 2});
        plot.mapDatasetToDomainAxes(0, axisIndices);
        assertEquals(xAxis2, plot.getDomainAxisForDataset(0));
    }

    /**
     * Some tests for the getRangeAxisForDataset() method.
     */
    @Test
    public void testGetRangeAxisForDataset() {
=====================================================================
Found a 12 line (124 tokens) duplication in the following files: 
Starting at line 247 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/test/java/org/jfree/chart/renderer/xy/XYBarRendererTest.java
Starting at line 302 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/test/java/org/jfree/chart/renderer/xy/XYBarRendererTest.java

    public void testFindDomainBounds2() {
        XYIntervalSeries<String> s1 = new XYIntervalSeries<>("S1");
        s1.add(1.0, 0.5, 1.5, 10.0, 9.5, 10.5);
        s1.add(2.0, 1.9, 2.1, 20.0, 19.8, 20.3);
        XYIntervalSeries<String> s2 = new XYIntervalSeries<>("S2");
        s2.add(3.0, 2.5, 3.5, 30.0, 29.5, 30.5);
        s2.add(4.0, 3.9, 4.1, 9.0, 9.0, 9.0);
        XYIntervalSeriesCollection<String> dataset = new XYIntervalSeriesCollection<>();
        dataset.addSeries(s1);
        dataset.addSeries(s2);
        
        XYBarRenderer renderer = new XYBarRenderer();
=====================================================================
Found a 8 line (124 tokens) duplication in the following files: 
Starting at line 397 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/test/java/org/jfree/data/time/MillisecondTest.java
Starting at line 405 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/test/java/org/jfree/data/time/MillisecondTest.java

        m = (Millisecond) m.next();
        assertEquals(2000, m.getSecond().getMinute().getHour().getYear());
        assertEquals(12, m.getSecond().getMinute().getHour().getMonth());
        assertEquals(12, m.getSecond().getMinute().getHour().getDayOfMonth());
        assertEquals(1, m.getSecond().getMinute().getHour().getHour());
        assertEquals(30, m.getSecond().getMinute().getMinute());
        assertEquals(55, m.getSecond().getSecond());
        assertEquals(556, m.getMillisecond());
=====================================================================
Found a 8 line (124 tokens) duplication in the following files: 
Starting at line 445 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/test/java/org/jfree/data/time/MillisecondTest.java
Starting at line 454 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/test/java/org/jfree/data/time/MillisecondTest.java

            m = (Millisecond) m.next();
            assertEquals(1970, m.getSecond().getMinute().getHour().getYear());
            assertEquals(1, m.getSecond().getMinute().getHour().getMonth());
            assertEquals(1, m.getSecond().getMinute().getHour().getDayOfMonth());
            assertEquals(hoursOffset, m.getSecond().getMinute().getHour().getHour());
            assertEquals(0, m.getSecond().getMinute().getMinute());
            assertEquals(0, m.getSecond().getSecond());
            assertEquals(1L, m.getMillisecond());
=====================================================================
Found a 37 line (123 tokens) duplication in the following files: 
Starting at line 828 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/main/java/org/jfree/chart/renderer/xy/StandardXYItemRenderer.java
Starting at line 976 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/main/java/org/jfree/chart/renderer/xy/XYLineAndShapeRenderer.java

            }

        }

        double xx = transX1;
        double yy = transY1;
        if (orientation == PlotOrientation.HORIZONTAL) {
            xx = transY1;
            yy = transX1;
        }

        // draw the item label if there is one...
        if (isItemLabelVisible(series, item)) {
            drawItemLabel(g2, orientation, dataset, series, item, xx, yy,
                    (y1 < 0.0));
        }

        int datasetIndex = plot.indexOf(dataset);
        updateCrosshairValues(crosshairState, x1, y1, datasetIndex,
                transX1, transY1, orientation);

        // add an entity for the item...
        if (entities != null && ShapeUtils.isPointInRect(dataArea, xx, yy)) {
            addEntity(entities, entityArea, dataset, series, item, xx, yy);
        }

    }

    /**
     * Tests this renderer for equality with another object.
     *
     * @param obj  the object ({@code null} permitted).
     *
     * @return A boolean.
     */
    @Override
    public boolean equals(Object obj) {
=====================================================================
Found a 82 line (123 tokens) duplication in the following files: 
Starting at line 195 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/main/java/org/jfree/data/statistics/DefaultBoxAndWhiskerCategoryDataset.java
Starting at line 466 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/main/java/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java

                && this.minimumRangeValueColumn == c))  {
            updateBounds();
        }

        fireDatasetChanged();
    }

    /**
     * Removes a row from the dataset and sends a {@link DatasetChangeEvent}
     * to all registered listeners.
     *
     * @param rowIndex  the row index.
     *
     * @see #removeColumn(int)
     *
     * @since 1.0.7
     */
    public void removeRow(int rowIndex) {
        this.data.removeRow(rowIndex);
        updateBounds();
        fireDatasetChanged();
    }

    /**
     * Removes a row from the dataset and sends a {@link DatasetChangeEvent}
     * to all registered listeners.
     *
     * @param rowKey  the row key.
     *
     * @see #removeColumn(Comparable)
     *
     * @since 1.0.7
     */
    public void removeRow(R rowKey) {
        this.data.removeRow(rowKey);
        updateBounds();
        fireDatasetChanged();
    }

    /**
     * Removes a column from the dataset and sends a {@link DatasetChangeEvent}
     * to all registered listeners.
     *
     * @param columnIndex  the column index.
     *
     * @see #removeRow(int)
     *
     * @since 1.0.7
     */
    public void removeColumn(int columnIndex) {
        this.data.removeColumn(columnIndex);
        updateBounds();
        fireDatasetChanged();
    }

    /**
     * Removes a column from the dataset and sends a {@link DatasetChangeEvent}
     * to all registered listeners.
     *
     * @param columnKey  the column key.
     *
     * @see #removeRow(Comparable)
     *
     * @since 1.0.7
     */
    public void removeColumn(C columnKey) {
        this.data.removeColumn(columnKey);
        updateBounds();
        fireDatasetChanged();
    }

    /**
     * Clears all data from the dataset and sends a {@link DatasetChangeEvent}
     * to all registered listeners.
     *
     * @since 1.0.7
     */
    public void clear() {
        this.data.clear();
        updateBounds();
        fireDatasetChanged();
    }
=====================================================================
Found a 8 line (123 tokens) duplication in the following files: 
Starting at line 162 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/test/java/org/jfree/data/time/MillisecondTest.java
Starting at line 205 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/test/java/org/jfree/data/time/MillisecondTest.java
Starting at line 445 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/test/java/org/jfree/data/time/MillisecondTest.java
Starting at line 454 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/test/java/org/jfree/data/time/MillisecondTest.java

            Millisecond m = new Millisecond(new Date(0L));
            assertEquals(1970, m.getSecond().getMinute().getHour().getYear());
            assertEquals(1, m.getSecond().getMinute().getHour().getMonth());
            assertEquals(1, m.getSecond().getMinute().getHour().getDayOfMonth());
            assertEquals(hoursOffset, m.getSecond().getMinute().getHour().getHour());
            assertEquals(0, m.getSecond().getMinute().getMinute());
            assertEquals(0, m.getSecond().getSecond());
            assertEquals(0, m.getMillisecond());
=====================================================================
Found a 15 line (122 tokens) duplication in the following files: 
Starting at line 303 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/test/java/org/jfree/chart/renderer/category/AbstractCategoryItemRendererTest.java
Starting at line 262 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/test/java/org/jfree/chart/renderer/category/LineAndShapeRendererTest.java

        AbstractCategoryItemRenderer r = new LineAndShapeRenderer();
        assertNull(r.findRangeBounds(null));

        // an empty dataset should return a null range
        DefaultCategoryDataset<String, String> dataset = new DefaultCategoryDataset<>();
        assertNull(r.findRangeBounds(dataset));

        dataset.addValue(1.0, "R1", "C1");
        assertEquals(new Range(1.0, 1.0), r.findRangeBounds(dataset));

        dataset.addValue(-2.0, "R1", "C2");
        assertEquals(new Range(-2.0, 1.0), r.findRangeBounds(dataset));

        dataset.addValue(null, "R1", "C3");
        assertEquals(new Range(-2.0, 1.0), r.findRangeBounds(dataset));
=====================================================================
Found a 17 line (122 tokens) duplication in the following files: 
Starting at line 268 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/test/java/org/jfree/chart/renderer/category/StatisticalBarRendererTest.java
Starting at line 182 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/test/java/org/jfree/chart/renderer/category/StatisticalLineAndShapeRendererTest.java

        r.setIncludeBaseInRange(true);

        dataset.add(-2.0, 0.2, "R1", "C2");
        assertEquals(new Range(-2.2, 1.5), r.findRangeBounds(dataset));

        dataset.add(null, null, "R1", "C3");
        assertEquals(new Range(-2.2, 1.5), r.findRangeBounds(dataset));

        dataset.add(5.0, 1.0, "R2", "C3");
        assertEquals(new Range(-2.2, 6.0), r.findRangeBounds(dataset));

        // check that the series visible flag is observed
        r.setSeriesVisible(1, Boolean.FALSE);
        assertEquals(new Range(-2.2, 1.5), r.findRangeBounds(dataset));
    }

}
=====================================================================
Found a 9 line (122 tokens) duplication in the following files: 
Starting at line 421 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/test/java/org/jfree/data/gantt/TaskSeriesCollectionTest.java
Starting at line 55 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/test/java/org/jfree/data/gantt/TaskSeriesTest.java

    @Test
    public void testEquals() {

        TaskSeries<String> s1 = new TaskSeries<>("S");
        s1.add(new Task("T1", new Date(1), new Date(2)));
        s1.add(new Task("T2", new Date(11), new Date(22)));
        TaskSeries<String> s2 = new TaskSeries<>("S");
        s2.add(new Task("T1", new Date(1), new Date(2)));
        s2.add(new Task("T2", new Date(11), new Date(22)));
=====================================================================
Found a 10 line (122 tokens) duplication in the following files: 
Starting at line 125 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/test/java/org/jfree/data/general/DatasetUtilsTest.java
Starting at line 146 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/test/java/org/jfree/data/general/DatasetUtilsTest.java
Starting at line 1059 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/test/java/org/jfree/data/general/DatasetUtilsTest.java

        double[] x1 = new double[] {1.0, 2.0, 3.0};
        double[] x1Start = new double[] {0.9, 1.9, 2.9};
        double[] x1End = new double[] {1.1, 2.1, 3.1};
        double[] y1 = new double[] {4.0, 5.0, 6.0};
        double[] y1Start = new double[] {1.09, 2.09, 3.09};
        double[] y1End = new double[] {1.11, 2.11, 3.11};
        double[][] data1 = new double[][] {x1, x1Start, x1End, y1, y1Start,
                y1End};
        dataset.addSeries("S1", data1);
        Range r = DatasetUtils.findDomainBounds(dataset);
=====================================================================
Found a 28 line (122 tokens) duplication in the following files: 
Starting at line 89 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/test/java/org/jfree/data/xy/XIntervalSeriesTest.java
Starting at line 90 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/test/java/org/jfree/data/xy/YIntervalSeriesTest.java

        s2 = new XIntervalSeries<>("s2", false, false);
        assertEquals(s1, s2);

        // add a value
        s1.add(1.0, 0.5, 1.5, 2.0);
        assertNotEquals(s1, s2);
        s2.add(1.0, 0.5, 1.5, 2.0);
        assertEquals(s2, s1);

        // add another value
        s1.add(2.0, 0.5, 1.5, 2.0);
        assertNotEquals(s1, s2);
        s2.add(2.0, 0.5, 1.5, 2.0);
        assertEquals(s2, s1);

        // remove a value
        s1.remove(1.0);
        assertNotEquals(s1, s2);
        s2.remove(1.0);
        assertEquals(s2, s1);
    }

    /**
     * Confirm that cloning works.
     * @throws java.lang.CloneNotSupportedException
     */
    @Test
    public void testCloning() throws CloneNotSupportedException {
=====================================================================
Found a 15 line (121 tokens) duplication in the following files: 
Starting at line 1071 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/main/java/org/jfree/chart/renderer/category/AbstractCategoryItemRenderer.java
Starting at line 1099 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/main/java/org/jfree/chart/renderer/xy/AbstractXYItemRenderer.java

                Point2D coords = calculateRangeMarkerTextAnchorPoint(
                        g2, orientation, dataArea, rect,
                        marker.getLabelOffset(), marker.getLabelOffsetType(),
                        anchor);
                Rectangle2D r = TextUtils.calcAlignedStringBounds(label, 
                        g2, (float) coords.getX(), (float) coords.getY(), 
                        marker.getLabelTextAnchor());
                g2.setPaint(marker.getLabelBackgroundColor());
                g2.fill(r);
                g2.setPaint(marker.getLabelPaint());
                TextUtils.drawAlignedString(label, g2,
                        (float) coords.getX(), (float) coords.getY(),
                        marker.getLabelTextAnchor());
            }
            g2.setComposite(savedComposite);
=====================================================================
Found a 20 line (121 tokens) duplication in the following files: 
Starting at line 668 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/main/java/org/jfree/chart/renderer/category/BarRenderer.java
Starting at line 183 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/main/java/org/jfree/chart/renderer/category/LevelRenderer.java

    protected void calculateBarWidth(CategoryPlot plot,
                                     Rectangle2D dataArea,
                                     int rendererIndex,
                                     CategoryItemRendererState state) {

        CategoryAxis domainAxis = getDomainAxis(plot, rendererIndex);
        CategoryDataset dataset = plot.getDataset(rendererIndex);
        if (dataset != null) {
            int columns = dataset.getColumnCount();
            int rows = state.getVisibleSeriesCount() >= 0
                    ? state.getVisibleSeriesCount() : dataset.getRowCount();
            double space = 0.0;
            PlotOrientation orientation = plot.getOrientation();
            if (orientation == PlotOrientation.HORIZONTAL) {
                space = dataArea.getHeight();
            }
            else if (orientation == PlotOrientation.VERTICAL) {
                space = dataArea.getWidth();
            }
            double maxWidth = space * getMaximumBarWidth();
=====================================================================
Found a 15 line (121 tokens) duplication in the following files: 
Starting at line 586 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/test/java/org/jfree/chart/axis/DateAxisTest.java
Starting at line 660 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/test/java/org/jfree/chart/axis/DateAxisTest.java

    public void testPreviousStandardDateDayA() {
        MyDateAxis axis = new MyDateAxis("Day");
        Day apr12007 = new Day(1, 4, 2007);
        Day apr22007 = new Day(2, 4, 2007);

        // five dates to check...
        Date d0 = new Date(apr12007.getFirstMillisecond());
        Date d1 = new Date(apr12007.getFirstMillisecond() + 500L);
        Date d2 = new Date(apr12007.getMiddleMillisecond());
        Date d3 = new Date(apr12007.getMiddleMillisecond() + 500L);
        Date d4 = new Date(apr12007.getLastMillisecond());

        Date end = new Date(apr22007.getLastMillisecond());

        DateTickUnit unit = new DateTickUnit(DateTickUnitType.DAY, 1);
=====================================================================
Found a 59 line (120 tokens) duplication in the following files: 
Starting at line 150 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/main/java/org/jfree/chart/entity/AxisEntity.java
Starting at line 149 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/main/java/org/jfree/chart/entity/JFreeChartEntity.java
Starting at line 149 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/main/java/org/jfree/chart/entity/PlotEntity.java

        if (!(this.axis.equals(that.axis))) {
            return false;
        }
        return true;
    }

    /**
     * Returns a hash code for this instance.
     *
     * @return A hash code.
     */
    @Override
    public int hashCode() {
        int result = 39;
        result = HashUtils.hashCode(result, getToolTipText());
        result = HashUtils.hashCode(result, getURLText());
        return result;
    }

    /**
     * Returns a clone of the entity.
     *
     * @return A clone.
     *
     * @throws CloneNotSupportedException if there is a problem cloning the
     *         entity.
     */
    @Override
    public Object clone() throws CloneNotSupportedException {
        return super.clone();
    }

    /**
     * Provides serialization support.
     *
     * @param stream  the output stream.
     *
     * @throws IOException  if there is an I/O error.
     */
    private void writeObject(ObjectOutputStream stream) throws IOException {
        stream.defaultWriteObject();
        SerialUtils.writeShape(getArea(), stream);
    }

    /**
     * Provides serialization support.
     *
     * @param stream  the input stream.
     *
     * @throws IOException  if there is an I/O error.
     * @throws ClassNotFoundException  if there is a classpath problem.
     */
    private void readObject(ObjectInputStream stream)
            throws IOException, ClassNotFoundException {
        stream.defaultReadObject();
        setArea(SerialUtils.readShape(stream));
    }

}
=====================================================================
Found a 22 line (120 tokens) duplication in the following files: 
Starting at line 4767 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/main/java/org/jfree/chart/plot/CategoryPlot.java
Starting at line 5233 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/main/java/org/jfree/chart/plot/XYPlot.java

        for (CategoryAxis axis : clone.domainAxes.values()) {
            if (axis != null) {
                axis.setPlot(clone);
                axis.addChangeListener(clone);
            }
        }
        clone.rangeAxes = CloneUtils.cloneMapValues(this.rangeAxes);
        for (ValueAxis axis : clone.rangeAxes.values()) {
            if (axis != null) {
                axis.setPlot(clone);
                axis.addChangeListener(clone);
            }
        }

        // AxisLocation is immutable, so we can just copy the maps
        clone.domainAxisLocations = new HashMap<>(
                this.domainAxisLocations);
        clone.rangeAxisLocations = new HashMap<>(
                this.rangeAxisLocations);

        clone.datasets = new HashMap<>(this.datasets);
        for (CategoryDataset<R, C> dataset : clone.datasets.values()) {
=====================================================================
Found a 13 line (120 tokens) duplication in the following files: 
Starting at line 458 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/main/java/org/jfree/data/xy/DefaultIntervalXYDataset.java
Starting at line 357 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/main/java/org/jfree/data/xy/DefaultXYZDataset.java

        DefaultIntervalXYDataset<String> that = (DefaultIntervalXYDataset) obj;
        if (!this.seriesKeys.equals(that.seriesKeys)) {
            return false;
        }
        for (int i = 0; i < this.seriesList.size(); i++) {
            double[][] d1 = (double[][]) this.seriesList.get(i);
            double[][] d2 = (double[][]) that.seriesList.get(i);
            double[] d1x = d1[0];
            double[] d2x = d2[0];
            if (!Arrays.equals(d1x, d2x)) {
                return false;
            }
            double[] d1xs = d1[1];
=====================================================================
Found a 26 line (119 tokens) duplication in the following files: 
Starting at line 393 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/main/java/org/jfree/chart/axis/LogAxis.java
Starting at line 464 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/main/java/org/jfree/chart/axis/NumberAxis.java

        value = calculateLog(value);

        double min = 0.0;
        double max = 0.0;
        if (RectangleEdge.isTopOrBottom(edge)) {
            min = area.getX();
            max = area.getMaxX();
        } else if (RectangleEdge.isLeftOrRight(edge)) {
            max = area.getMinY();
            min = area.getMaxY();
        }
        if (isInverted()) {
            return max
                   - ((value - axisMin) / (axisMax - axisMin)) * (max - min);
        } else {
            return min
                   + ((value - axisMin) / (axisMax - axisMin)) * (max - min);
        }
    }

    /**
     * Configures the axis.  This method is typically called when an axis
     * is assigned to a new plot.
     */
    @Override
    public void configure() {
=====================================================================
Found a 37 line (119 tokens) duplication in the following files: 
Starting at line 2040 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/main/java/org/jfree/chart/plot/pie/PiePlot.java
Starting at line 946 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/main/java/org/jfree/chart/plot/SpiderWebPlot.java

    }

    /**
     * Draws the plot on a Java 2D graphics device (such as the screen or a
     * printer).
     *
     * @param g2  the graphics device.
     * @param area  the area within which the plot should be drawn.
     * @param anchor  the anchor point ({@code null} permitted).
     * @param parentState  the state from the parent plot, if there is one.
     * @param info  collects info about the drawing
     *              ({@code null} permitted).
     */
    @Override
    public void draw(Graphics2D g2, Rectangle2D area, Point2D anchor,
                     PlotState parentState, PlotRenderingInfo info) {

        // adjust for insets...
        RectangleInsets insets = getInsets();
        insets.trim(area);

        if (info != null) {
            info.setPlotArea(area);
            info.setDataArea(area);
        }

        drawBackground(g2, area);
        drawOutline(g2, area);

        Shape savedClip = g2.getClip();
        g2.clip(area);

        Composite originalComposite = g2.getComposite();
        g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,
                getForegroundAlpha()));

        if (!DatasetUtils.isEmptyOrNull(this.dataset)) {
=====================================================================
Found a 21 line (119 tokens) duplication in the following files: 
Starting at line 1034 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/main/java/org/jfree/chart/renderer/category/BoxAndWhiskerRenderer.java
Starting at line 727 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/main/java/org/jfree/chart/renderer/xy/XYBoxAndWhiskerRenderer.java

    private void drawLowFarOut(double aRadius, Graphics2D g2, double xx,
                               double m) {
        double side = aRadius * 2;
        g2.draw(new Line2D.Double(xx - side, m - side, xx + side, m - side));
        g2.draw(new Line2D.Double(xx - side, m - side, xx, m));
        g2.draw(new Line2D.Double(xx + side, m - side, xx, m));
    }

    /**
     * Tests this renderer for equality with an arbitrary object.
     *
     * @param obj  the object ({@code null} permitted).
     *
     * @return {@code true} or {@code false}.
     */
    @Override
    public boolean equals(Object obj) {
        if (obj == this) {
            return true;
        }
        if (!(obj instanceof BoxAndWhiskerRenderer)) {
=====================================================================
Found a 62 line (118 tokens) duplication in the following files: 
Starting at line 462 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/main/java/org/jfree/data/statistics/DefaultBoxAndWhiskerXYDataset.java
Starting at line 324 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/main/java/org/jfree/data/statistics/DefaultMultiValueCategoryDataset.java

    }

    /**
     * Returns the minimum y-value in the dataset.
     *
     * @param includeInterval  a flag that determines whether or not the
     *                         y-interval is taken into account.
     *
     * @return The minimum value.
     */
    @Override
    public double getRangeLowerBound(boolean includeInterval) {
        double result = Double.NaN;
        if (this.minimumRangeValue != null) {
            result = this.minimumRangeValue.doubleValue();
        }
        return result;
    }

    /**
     * Returns the maximum y-value in the dataset.
     *
     * @param includeInterval  a flag that determines whether or not the
     *                         y-interval is taken into account.
     *
     * @return The maximum value.
     */
    @Override
    public double getRangeUpperBound(boolean includeInterval) {
        double result = Double.NaN;
        if (this.maximumRangeValue != null) {
            result = this.maximumRangeValue.doubleValue();
        }
        return result;
    }

    /**
     * Returns the range of the values in this dataset's range.
     *
     * @param includeInterval  a flag that determines whether or not the
     *                         y-interval is taken into account.
     *
     * @return The range.
     */
    @Override
    public Range getRangeBounds(boolean includeInterval) {
        return this.rangeBounds;
    }

    /**
     * Tests this dataset for equality with an arbitrary object.
     *
     * @param obj  the object ({@code null} permitted).
     *
     * @return A boolean.
     */
    @Override
    public boolean equals(Object obj) {
        if (obj == this) {
            return true;
        }
        if (!(obj instanceof DefaultBoxAndWhiskerXYDataset)) {
=====================================================================
Found a 15 line (118 tokens) duplication in the following files: 
Starting at line 148 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/test/java/org/jfree/chart/renderer/category/GroupedStackedBarRendererTest.java
Starting at line 59 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/test/java/org/jfree/chart/renderer/category/StackedAreaRendererTest.java
Starting at line 121 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/test/java/org/jfree/chart/renderer/category/StackedBarRendererTest.java

        GroupedStackedBarRenderer r = new GroupedStackedBarRenderer();
        assertNull(r.findRangeBounds(null));

        // an empty dataset should return a null range
        DefaultCategoryDataset<String, String> dataset = new DefaultCategoryDataset<>();
        assertNull(r.findRangeBounds(dataset));

        dataset.addValue(1.0, "R1", "C1");
        assertEquals(new Range(0.0, 1.0), r.findRangeBounds(dataset));

        dataset.addValue(-2.0, "R1", "C2");
        assertEquals(new Range(-2.0, 1.0), r.findRangeBounds(dataset));

        dataset.addValue(null, "R1", "C3");
        assertEquals(new Range(-2.0, 1.0), r.findRangeBounds(dataset));
=====================================================================
Found a 22 line (118 tokens) duplication in the following files: 
Starting at line 141 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/test/java/org/jfree/chart/urls/CustomCategoryURLGeneratorTest.java
Starting at line 140 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/test/java/org/jfree/chart/urls/CustomXYURLGeneratorTest.java

        CustomCategoryURLGenerator g1 = new CustomCategoryURLGenerator();
        // you can add a null list - it would have been better if this
        // required EMPTY_LIST
        g1.addURLSeries(null);
        assertEquals(1, g1.getListCount());
        assertEquals(0, g1.getURLCount(0));

        List<String> list1 = new ArrayList<>();
        list1.add("URL1");
        g1.addURLSeries(list1);
        assertEquals(2, g1.getListCount());
        assertEquals(0, g1.getURLCount(0));
        assertEquals(1, g1.getURLCount(1));
        assertEquals("URL1", g1.getURL(1, 0));

        // if we modify the original list, it's best if the URL generator is
        // not affected
        list1.clear();
        assertEquals("URL1", g1.getURL(1, 0));
    }

}
=====================================================================
Found a 46 line (117 tokens) duplication in the following files: 
Starting at line 81 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/main/java/org/jfree/chart/block/ColumnArrangement.java
Starting at line 82 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/main/java/org/jfree/chart/block/FlowArrangement.java

    public ColumnArrangement(HorizontalAlignment hAlign,
                             VerticalAlignment vAlign,
                             double hGap, double vGap) {
        this.horizontalAlignment = hAlign;
        this.verticalAlignment = vAlign;
        this.horizontalGap = hGap;
        this.verticalGap = vGap;
    }

    /**
     * Adds a block to be managed by this instance.  This method is usually
     * called by the {@link BlockContainer}, you shouldn't need to call it
     * directly.
     *
     * @param block  the block.
     * @param key  a key that controls the position of the block.
     */
    @Override
    public void add(Block block, Object key) {
        // since the flow layout is relatively straightforward, no information
        // needs to be recorded here
    }

    /**
     * Calculates and sets the bounds of all the items in the specified
     * container, subject to the given constraint.  The {@code Graphics2D}
     * can be used by some items (particularly items containing text) to
     * calculate sizing parameters.
     *
     * @param container  the container whose items are being arranged.
     * @param g2  the graphics device.
     * @param constraint  the size constraint.
     *
     * @return The size of the container after arrangement of the contents.
     */
    @Override
    public Size2D arrange(BlockContainer container, Graphics2D g2,
                          RectangleConstraint constraint) {

        LengthConstraintType w = constraint.getWidthConstraintType();
        LengthConstraintType h = constraint.getHeightConstraintType();
        if (w == LengthConstraintType.NONE) {
            if (h == LengthConstraintType.NONE) {
                return arrangeNN(container, g2);
            }
            else if (h == LengthConstraintType.FIXED) {
=====================================================================
Found a 15 line (117 tokens) duplication in the following files: 
Starting at line 438 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/test/java/org/jfree/chart/axis/DateAxisTest.java
Starting at line 512 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/test/java/org/jfree/chart/axis/DateAxisTest.java

    public void testPreviousStandardDateMonthA() {
        MyDateAxis axis = new MyDateAxis("Month");
        Month nov2006 = new Month(11, 2006);
        Month dec2006 = new Month(12, 2006);

        // five dates to check...
        Date d0 = new Date(nov2006.getFirstMillisecond());
        Date d1 = new Date(nov2006.getFirstMillisecond() + 500L);
        Date d2 = new Date(nov2006.getMiddleMillisecond());
        Date d3 = new Date(nov2006.getMiddleMillisecond() + 500L);
        Date d4 = new Date(nov2006.getLastMillisecond());

        Date end = new Date(dec2006.getLastMillisecond());

        DateTickUnit unit = new DateTickUnit(DateTickUnitType.MONTH, 1);
=====================================================================
Found a 16 line (117 tokens) duplication in the following files: 
Starting at line 288 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/test/java/org/jfree/chart/renderer/category/BarRendererTest.java
Starting at line 270 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/test/java/org/jfree/chart/renderer/category/LineAndShapeRendererTest.java

        r.setIncludeBaseInRange(true);

        dataset.addValue(-2.0, "R1", "C2");
        assertEquals(new Range(-2.0, 1.0), r.findRangeBounds(dataset));

        dataset.addValue(null, "R1", "C3");
        assertEquals(new Range(-2.0, 1.0), r.findRangeBounds(dataset));

        dataset.addValue(-6.0, "R2", "C1");
        assertEquals(new Range(-6.0, 1.0), r.findRangeBounds(dataset));

        r.setSeriesVisible(1, Boolean.FALSE);
        assertEquals(new Range(-2.0, 1.0), r.findRangeBounds(dataset));
    }

}
=====================================================================
Found a 7 line (117 tokens) duplication in the following files: 
Starting at line 483 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/test/java/org/jfree/data/gantt/TaskSeriesCollectionTest.java
Starting at line 56 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/test/java/org/jfree/data/gantt/TaskSeriesTest.java

    public void testSerialization() {
        TaskSeries<String> s1 = new TaskSeries<>("S");
        s1.add(new Task("T1", new Date(1), new Date(2)));
        s1.add(new Task("T2", new Date(11), new Date(22)));
        TaskSeries<String> s2 = new TaskSeries<>("S");
        s2.add(new Task("T1", new Date(1), new Date(2)));
        s2.add(new Task("T2", new Date(11), new Date(22)));
=====================================================================
Found a 80 line (116 tokens) duplication in the following files: 
Starting at line 1807 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/main/java/org/jfree/chart/plot/CategoryPlot.java
Starting at line 386 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/main/java/org/jfree/chart/plot/FastScatterPlot.java
Starting at line 1712 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/main/java/org/jfree/chart/plot/XYPlot.java

        this.rangeZeroBaselinePaint = paint;
        fireChangeEvent();
    }

    /**
     * Returns the flag that controls whether the range grid-lines are visible.
     *
     * @return The flag.
     *
     * @see #setRangeGridlinesVisible(boolean)
     */
    public boolean isRangeGridlinesVisible() {
        return this.rangeGridlinesVisible;
    }

    /**
     * Sets the flag that controls whether or not grid-lines are drawn against
     * the range axis.  If the flag changes value, a {@link PlotChangeEvent} is
     * sent to all registered listeners.
     *
     * @param visible  the new value of the flag.
     *
     * @see #isRangeGridlinesVisible()
     */
    public void setRangeGridlinesVisible(boolean visible) {
        if (this.rangeGridlinesVisible != visible) {
            this.rangeGridlinesVisible = visible;
            fireChangeEvent();
        }
    }

    /**
     * Returns the stroke used to draw the grid-lines against the range axis.
     *
     * @return The stroke (never {@code null}).
     *
     * @see #setRangeGridlineStroke(Stroke)
     */
    public Stroke getRangeGridlineStroke() {
        return this.rangeGridlineStroke;
    }

    /**
     * Sets the stroke used to draw the grid-lines against the range axis and
     * sends a {@link PlotChangeEvent} to all registered listeners.
     *
     * @param stroke  the stroke ({@code null} not permitted).
     *
     * @see #getRangeGridlineStroke()
     */
    public void setRangeGridlineStroke(Stroke stroke) {
        Args.nullNotPermitted(stroke, "stroke");
        this.rangeGridlineStroke = stroke;
        fireChangeEvent();
    }

    /**
     * Returns the paint used to draw the grid-lines against the range axis.
     *
     * @return The paint (never {@code null}).
     *
     * @see #setRangeGridlinePaint(Paint)
     */
    public Paint getRangeGridlinePaint() {
        return this.rangeGridlinePaint;
    }

    /**
     * Sets the paint used to draw the grid lines against the range axis and
     * sends a {@link PlotChangeEvent} to all registered listeners.
     *
     * @param paint  the paint ({@code null} not permitted).
     *
     * @see #getRangeGridlinePaint()
     */
    public void setRangeGridlinePaint(Paint paint) {
        Args.nullNotPermitted(paint, "paint");
        this.rangeGridlinePaint = paint;
        fireChangeEvent();
    }
=====================================================================
Found a 19 line (116 tokens) duplication in the following files: 
Starting at line 281 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/main/java/org/jfree/chart/renderer/category/LayeredBarRenderer.java
Starting at line 295 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/main/java/org/jfree/chart/renderer/category/StatisticalBarRenderer.java
Starting at line 443 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/main/java/org/jfree/chart/renderer/category/StatisticalBarRenderer.java

        Paint itemPaint = getItemPaint(row, column);
        GradientPaintTransformer t = getGradientPaintTransformer();
        if (t != null && itemPaint instanceof GradientPaint) {
            itemPaint = t.transform((GradientPaint) itemPaint, bar);
        }
        g2.setPaint(itemPaint);
        g2.fill(bar);

        // draw the outline...
        if (isDrawBarOutline()
                && state.getBarWidth() > BAR_OUTLINE_WIDTH_THRESHOLD) {
            Stroke stroke = getItemOutlineStroke(row, column);
            Paint paint = getItemOutlinePaint(row, column);
            if (stroke != null && paint != null) {
                g2.setStroke(stroke);
                g2.setPaint(paint);
                g2.draw(bar);
            }
        }
=====================================================================
Found a 47 line (115 tokens) duplication in the following files: 
Starting at line 330 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/main/java/org/jfree/chart/annotations/XYBoxAnnotation.java
Starting at line 304 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/main/java/org/jfree/chart/annotations/XYPolygonAnnotation.java

        return result;
    }

    /**
     * Returns a clone.
     *
     * @return A clone.
     *
     * @throws CloneNotSupportedException not thrown by this class, but may be
     *                                    by subclasses.
     */
    @Override
    public Object clone() throws CloneNotSupportedException {
        return super.clone();
    }

    /**
     * Provides serialization support.
     *
     * @param stream  the output stream ({@code null} not permitted).
     *
     * @throws IOException if there is an I/O error.
     */
    private void writeObject(ObjectOutputStream stream) throws IOException {
        stream.defaultWriteObject();
        SerialUtils.writeStroke(this.stroke, stream);
        SerialUtils.writePaint(this.outlinePaint, stream);
        SerialUtils.writePaint(this.fillPaint, stream);
    }

    /**
     * Provides serialization support.
     *
     * @param stream  the input stream ({@code null} not permitted).
     *
     * @throws IOException  if there is an I/O error.
     * @throws ClassNotFoundException  if there is a classpath problem.
     */
    private void readObject(ObjectInputStream stream)
            throws IOException, ClassNotFoundException {
        stream.defaultReadObject();
        this.stroke = SerialUtils.readStroke(stream);
        this.outlinePaint = SerialUtils.readPaint(stream);
        this.fillPaint = SerialUtils.readPaint(stream);
    }

}
=====================================================================
Found a 17 line (115 tokens) duplication in the following files: 
Starting at line 767 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/main/java/org/jfree/chart/axis/ValueAxis.java
Starting at line 815 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/main/java/org/jfree/chart/axis/ValueAxis.java

        if (vertical) {
            FontMetrics fm = g2.getFontMetrics(font);
            for (Object o : ticks) {
                Tick tick = (Tick) o;
                Rectangle2D labelBounds = null;
                if (tick instanceof LogTick) {
                    LogTick lt = (LogTick) tick;
                    if (lt.getAttributedLabel() != null) {
                        labelBounds = AttrStringUtils.getTextBounds(
                                lt.getAttributedLabel(), g2);
                    }
                } else if (tick.getText() != null) {
                    labelBounds = TextUtils.getTextBounds(
                            tick.getText(), g2, fm);
                }
                if (labelBounds != null && labelBounds.getWidth()
                        + insets.getTop() + insets.getBottom() > maxHeight) {
=====================================================================
Found a 30 line (115 tokens) duplication in the following files: 
Starting at line 160 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/main/java/org/jfree/chart/plot/CombinedDomainCategoryPlot.java
Starting at line 158 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/main/java/org/jfree/chart/plot/CombinedRangeCategoryPlot.java

        CategoryAxis axis = getDomainAxis();
        if (axis != null) {
            axis.configure();
        }
        fireChangeEvent();
    }

    /**
     * Removes a subplot from the combined chart.  Potentially, this removes
     * some unique categories from the overall union of the datasets...so the
     * domain axis is reconfigured, then a {@link PlotChangeEvent} is sent to
     * all registered listeners.
     *
     * @param subplot  the subplot ({@code null} not permitted).
     */
    public void remove(CategoryPlot subplot) {
        Args.nullNotPermitted(subplot, "subplot");
        int position = -1;
        int size = this.subplots.size();
        int i = 0;
        while (position == -1 && i < size) {
            if (this.subplots.get(i) == subplot) {
                position = i;
            }
            i++;
        }
        if (position != -1) {
            this.subplots.remove(position);
            subplot.setParent(null);
            subplot.removeChangeListener(this);
=====================================================================
Found a 29 line (114 tokens) duplication in the following files: 
Starting at line 782 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/main/java/org/jfree/chart/axis/LogarithmicAxis.java
Starting at line 539 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/main/java/org/jfree/chart/axis/SymbolAxis.java

                    TextAnchor anchor;
                    TextAnchor rotationAnchor;
                    double angle = 0.0;
                    if (isVerticalTickLabels()) {
                        anchor = TextAnchor.CENTER_RIGHT;
                        rotationAnchor = TextAnchor.CENTER_RIGHT;
                        if (edge == RectangleEdge.TOP) {
                            angle = Math.PI / 2.0;
                        }
                        else {
                            angle = -Math.PI / 2.0;
                        }
                    }
                    else {
                        if (edge == RectangleEdge.TOP) {
                            anchor = TextAnchor.BOTTOM_CENTER;
                            rotationAnchor = TextAnchor.BOTTOM_CENTER;
                        }
                        else {
                            anchor = TextAnchor.TOP_CENTER;
                            rotationAnchor = TextAnchor.TOP_CENTER;
                        }
                    }

                    Tick tick = new NumberTick(currentTickValue, tickLabel, 
                            anchor, rotationAnchor, angle);
                    ticks.add(tick);
                }
            }
=====================================================================
Found a 15 line (114 tokens) duplication in the following files: 
Starting at line 347 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/main/java/org/jfree/chart/plot/CombinedDomainCategoryPlot.java
Starting at line 358 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/main/java/org/jfree/chart/plot/CombinedDomainXYPlot.java

            CategoryPlot sub = (CategoryPlot) this.subplots.get(i);
            totalWeight += sub.getWeight();
        }
        this.subplotAreas = new Rectangle2D[n];
        double x = adjustedPlotArea.getX();
        double y = adjustedPlotArea.getY();
        double usableSize = 0.0;
        if (orientation == PlotOrientation.HORIZONTAL) {
            usableSize = adjustedPlotArea.getWidth() - this.gap * (n - 1);
        }
        else if (orientation == PlotOrientation.VERTICAL) {
            usableSize = adjustedPlotArea.getHeight() - this.gap * (n - 1);
        }

        for (int i = 0; i < n; i++) {
=====================================================================
Found a 24 line (114 tokens) duplication in the following files: 
Starting at line 69 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/test/java/org/jfree/chart/entity/CategoryItemEntityTest.java
Starting at line 67 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/test/java/org/jfree/chart/entity/CategoryLabelEntityTest.java
Starting at line 60 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/test/java/org/jfree/chart/entity/TickLabelEntityTest.java

                "R2", "C2");
        assertEquals(e1, e2);

        e1.setArea(new Rectangle2D.Double(4.0, 3.0, 2.0, 1.0));
        assertNotEquals(e1, e2);
        e2.setArea(new Rectangle2D.Double(4.0, 3.0, 2.0, 1.0));
        assertEquals(e1, e2);

        e1.setToolTipText("New ToolTip");
        assertNotEquals(e1, e2);
        e2.setToolTipText("New ToolTip");
        assertEquals(e1, e2);

        e1.setURLText("New URL");
        assertNotEquals(e1, e2);
        e2.setURLText("New URL");
        assertEquals(e1, e2);
    }

    /**
     * Confirm that cloning works.
     */
    @Test
    public void testCloning() throws CloneNotSupportedException {
=====================================================================
Found a 20 line (114 tokens) duplication in the following files: 
Starting at line 128 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/test/java/org/jfree/chart/ScatterPlotTest.java
Starting at line 127 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/test/java/org/jfree/chart/TimeSeriesChartTest.java
Starting at line 127 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/test/java/org/jfree/chart/XYLineChartTest.java
Starting at line 126 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/test/java/org/jfree/chart/XYStepAreaChartTest.java
Starting at line 129 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/test/java/org/jfree/chart/XYStepChartTest.java

        XYPlot<?> plot = (XYPlot) this.chart.getPlot();
        XYItemRenderer renderer = plot.getRenderer();
        StandardXYToolTipGenerator tt = new StandardXYToolTipGenerator();
        renderer.setSeriesToolTipGenerator(0, tt);
        XYToolTipGenerator tt2 = renderer.getToolTipGenerator(0, 0);
        assertSame(tt2, tt);
    }

    /**
     * Create a horizontal bar chart with sample data in the range -3 to +3.
     *
     * @return The chart.
     */
    private static JFreeChart createChart() {
        XYSeries<String> series1 = new XYSeries<>("Series 1");
        series1.add(1.0, 1.0);
        series1.add(2.0, 2.0);
        series1.add(3.0, 3.0);
        XYDataset<String> dataset = new XYSeriesCollection<>(series1);
        return ChartFactory.createScatterPlot("Scatter Plot", "Domain",
=====================================================================
Found a 9 line (114 tokens) duplication in the following files: 
Starting at line 57 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/test/java/org/jfree/data/gantt/SlidingGanttCategoryDatasetTest.java
Starting at line 146 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/test/java/org/jfree/data/gantt/SlidingGanttCategoryDatasetTest.java

    public void testEquals() {
        TaskSeries<String> s1 = new TaskSeries<>("Series");
        s1.add(new Task("Task 1", new Date(0L), new Date(1L)));
        s1.add(new Task("Task 2", new Date(10L), new Date(11L)));
        s1.add(new Task("Task 3", new Date(20L), new Date(21L)));
        TaskSeriesCollection<String, String> u1 = new TaskSeriesCollection<>();
        u1.add(s1);
        SlidingGanttCategoryDataset d1 = new SlidingGanttCategoryDataset(
                u1, 0, 5);
=====================================================================
Found a 15 line (114 tokens) duplication in the following files: 
Starting at line 280 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/test/java/org/jfree/data/time/TimeSeriesCollectionTest.java
Starting at line 290 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/test/java/org/jfree/data/xy/XYSeriesCollectionTest.java

        TimeSeriesCollection<String> dataset = new TimeSeriesCollection<>();
        assertEquals(-1, dataset.indexOf(s1));
        assertEquals(-1, dataset.indexOf(s2));

        dataset.addSeries(s1);
        assertEquals(0, dataset.indexOf(s1));
        assertEquals(-1, dataset.indexOf(s2));

        dataset.addSeries(s2);
        assertEquals(0, dataset.indexOf(s1));
        assertEquals(1, dataset.indexOf(s2));

        dataset.removeSeries(s1);
        assertEquals(-1, dataset.indexOf(s1));
        assertEquals(0, dataset.indexOf(s2));
=====================================================================
Found a 44 line (113 tokens) duplication in the following files: 
Starting at line 917 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/main/java/org/jfree/chart/plot/CategoryPlot.java
Starting at line 981 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/main/java/org/jfree/chart/plot/XYPlot.java

        ValueAxis existing = this.rangeAxes.get(index);
        if (existing != null) {
            existing.removeChangeListener(this);
        }
        if (axis != null) {
            axis.setPlot(this);
        }
        this.rangeAxes.put(index, axis);
        if (axis != null) {
            axis.configure();
            axis.addChangeListener(this);
        }
        if (notify) {
            fireChangeEvent();
        }
    }

    /**
     * Sets the range axes for this plot and sends a {@link PlotChangeEvent}
     * to all registered listeners.
     *
     * @param axes  the axes ({@code null} not permitted).
     *
     * @see #setDomainAxes(CategoryAxis[])
     */
    public void setRangeAxes(ValueAxis[] axes) {
        for (int i = 0; i < axes.length; i++) {
            setRangeAxis(i, axes[i], false);
        }
        fireChangeEvent();
    }

    /**
     * Returns the index of the specified axis, or {@code -1} if the axis
     * is not assigned to the plot.
     *
     * @param axis  the axis ({@code null} not permitted).
     *
     * @return The axis index.
     *
     * @see #getRangeAxis(int)
     * @see #getDomainAxisIndex(CategoryAxis)
     */
    public int getRangeAxisIndex(ValueAxis axis) {
=====================================================================
Found a 32 line (113 tokens) duplication in the following files: 
Starting at line 156 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/main/java/org/jfree/data/statistics/Regression.java
Starting at line 200 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/main/java/org/jfree/data/statistics/Regression.java

            double y = Math.log(data[i][1]);
            sumX += x;
            sumY += y;
            double xx = x * x;
            sumXX += xx;
            double xy = x * y;
            sumXY += xy;
        }
        double sxx = sumXX - (sumX * sumX) / n;
        double sxy = sumXY - (sumX * sumY) / n;
        double xbar = sumX / n;
        double ybar = sumY / n;

        double[] result = new double[2];
        result[1] = sxy / sxx;
        result[0] = Math.pow(Math.exp(1.0), ybar - result[1] * xbar);

        return result;

    }

    /**
     * Returns the parameters 'a' and 'b' for an equation y = ax^b, fitted to
     * the data using a power regression equation.  The result is returned as
     * an array, where double[0] --&gt; a, and double[1] --&gt; b.
     *
     * @param data  the data.
     * @param series  the series to fit the regression line against.
     *
     * @return The parameters.
     */
    public static double[] getPowerRegression(XYDataset data, int series) {
=====================================================================
Found a 15 line (113 tokens) duplication in the following files: 
Starting at line 290 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/test/java/org/jfree/chart/axis/DateAxisTest.java
Starting at line 364 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/test/java/org/jfree/chart/axis/DateAxisTest.java

    public void testPreviousStandardDateYearA() {
        MyDateAxis axis = new MyDateAxis("Year");
        Year y2006 = new Year(2006);
        Year y2007 = new Year(2007);

        // five dates to check...
        Date d0 = new Date(y2006.getFirstMillisecond());
        Date d1 = new Date(y2006.getFirstMillisecond() + 500L);
        Date d2 = new Date(y2006.getMiddleMillisecond());
        Date d3 = new Date(y2006.getMiddleMillisecond() + 500L);
        Date d4 = new Date(y2006.getLastMillisecond());

        Date end = new Date(y2007.getLastMillisecond());

        DateTickUnit unit = new DateTickUnit(DateTickUnitType.YEAR, 1);
=====================================================================
Found a 22 line (112 tokens) duplication in the following files: 
Starting at line 3170 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/main/java/org/jfree/chart/plot/CategoryPlot.java
Starting at line 2781 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/main/java/org/jfree/chart/plot/XYPlot.java

                    space = yAxis.reserveSpace(g2, this, plotArea, edge, space);
                }
            }
        }
        return space;

    }

    /**
     * Trims a rectangle to integer coordinates.
     *
     * @param rect  the incoming rectangle.
     *
     * @return A rectangle with integer coordinates.
     */
    private Rectangle integerise(Rectangle2D rect) {
        int x0 = (int) Math.ceil(rect.getMinX());
        int y0 = (int) Math.ceil(rect.getMinY());
        int x1 = (int) Math.floor(rect.getMaxX());
        int y1 = (int) Math.floor(rect.getMaxY());
        return new Rectangle(x0, y0, (x1 - x0), (y1 - y0));
    }
=====================================================================
Found a 17 line (112 tokens) duplication in the following files: 
Starting at line 2520 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/main/java/org/jfree/chart/plot/pie/PiePlot.java
Starting at line 2580 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/main/java/org/jfree/chart/plot/pie/PiePlot.java

                    this.dataset, leftKeys.getKey(i));
            if (label != null) {
                TextBlock block = TextUtils.createTextBlock(label,
                        this.labelFont, this.labelPaint, maxLabelWidth,
                        new G2TextMeasurer(g2));
                TextBox labelBox = new TextBox(block);
                labelBox.setBackgroundPaint(this.labelBackgroundPaint);
                labelBox.setOutlinePaint(this.labelOutlinePaint);
                labelBox.setOutlineStroke(this.labelOutlineStroke);
                if (this.shadowGenerator == null) {
                    labelBox.setShadowPaint(this.labelShadowPaint);
                }
                else {
                    labelBox.setShadowPaint(null);
                }
                labelBox.setInteriorGap(this.labelPadding);
                double theta = Math.toRadians(
=====================================================================
Found a 30 line (112 tokens) duplication in the following files: 
Starting at line 189 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/main/java/org/jfree/data/statistics/DefaultMultiValueCategoryDataset.java
Starting at line 218 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/main/java/org/jfree/data/statistics/DefaultMultiValueCategoryDataset.java

    public Number getValue(Comparable row, Comparable column) {
        List l = (List) this.data.getObject(row, column);
        double average = 0.0d;
        int count = 0;
        if (l != null && l.size() > 0) {
            for (int i = 0; i < l.size(); i++) {
                Number n = (Number) l.get(i);
                average += n.doubleValue();
                count += 1;
            }
            if (count > 0) {
                average = average / count;
            }
        }
        if (count == 0) {
            return null;
        }
        return average;
    }

    /**
     * Returns the average value for the specified item.
     *
     * @param row  the row index.
     * @param column  the column index.
     *
     * @return The average value.
     */
    @Override
    public Number getValue(int row, int column) {
=====================================================================
Found a 15 line (112 tokens) duplication in the following files: 
Starting at line 107 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/test/java/org/jfree/chart/annotations/XYBoxAnnotationTest.java
Starting at line 87 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/test/java/org/jfree/chart/annotations/XYShapeAnnotationTest.java

        a2 = new XYBoxAnnotation(1.0, 2.0, 3.0, 4.0, new BasicStroke(2.3f),
                Color.RED, Color.BLUE);
        assertEquals(a1, a2);

        GradientPaint gp1a = new GradientPaint(1.0f, 2.0f, Color.BLUE,
                3.0f, 4.0f, Color.RED);
        GradientPaint gp1b = new GradientPaint(1.0f, 2.0f, Color.BLUE,
                3.0f, 4.0f, Color.RED);
        GradientPaint gp2a = new GradientPaint(5.0f, 6.0f, Color.pink,
                7.0f, 8.0f, Color.WHITE);
        GradientPaint gp2b = new GradientPaint(5.0f, 6.0f, Color.pink,
                7.0f, 8.0f, Color.WHITE);

        // outlinePaint
        a1 = new XYBoxAnnotation(1.0, 2.0, 3.0, 4.0, new BasicStroke(2.3f),
=====================================================================
Found a 16 line (112 tokens) duplication in the following files: 
Starting at line 228 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/test/java/org/jfree/data/xy/XIntervalSeriesTest.java
Starting at line 229 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/test/java/org/jfree/data/xy/YIntervalSeriesTest.java

        XIntervalSeries<String> s1 = new XIntervalSeries<>("S1");
        assertEquals(Integer.MAX_VALUE, s1.getMaximumItemCount());
        s1.setMaximumItemCount(2);
        assertEquals(2, s1.getMaximumItemCount());
        s1.add(1.0, 1.1, 1.1, 1.1);
        s1.add(2.0, 2.2, 2.2, 2.2);
        s1.add(3.0, 3.3, 3.3, 3.3);
        assertEquals(2.0, s1.getX(0).doubleValue(), EPSILON);
        assertEquals(3.0, s1.getX(1).doubleValue(), EPSILON);
    }

    /**
     * Check that the maximum item count can be applied retrospectively.
     */
    @Test
    public void testSetMaximumItemCount2() {
=====================================================================
Found a 23 line (110 tokens) duplication in the following files: 
Starting at line 946 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/main/java/org/jfree/chart/axis/NumberAxis.java
Starting at line 1046 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/main/java/org/jfree/chart/axis/NumberAxis.java

                    }
                }

                Tick tick = new NumberTick(currentTickValue,
                        tickLabel, anchor, rotationAnchor, angle);
                result.add(tick);
                double nextTickValue = lowestTickValue + ((i + 1) * size);
                for (int minorTick = 1; minorTick < minorTickSpaces;
                        minorTick++) {
                    double minorTickValue = currentTickValue
                            + (nextTickValue - currentTickValue)
                            * minorTick / minorTickSpaces;
                    if (getRange().contains(minorTickValue)) {
                        result.add(new NumberTick(TickType.MINOR,
                                minorTickValue, "", TextAnchor.TOP_CENTER,
                                TextAnchor.CENTER, 0.0));
                    }
                }
            }
        }
        return result;

    }
=====================================================================
Found a 19 line (110 tokens) duplication in the following files: 
Starting at line 286 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/main/java/org/jfree/chart/renderer/category/LayeredBarRenderer.java
Starting at line 374 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/main/java/org/jfree/chart/renderer/category/WaterfallBarRenderer.java

        g2.setPaint(itemPaint);
        g2.fill(bar);

        // draw the outline...
        if (isDrawBarOutline()
                && state.getBarWidth() > BAR_OUTLINE_WIDTH_THRESHOLD) {
            Stroke stroke = getItemOutlineStroke(row, column);
            Paint paint = getItemOutlinePaint(row, column);
            if (stroke != null && paint != null) {
                g2.setStroke(stroke);
                g2.setPaint(paint);
                g2.draw(bar);
            }
        }

        CategoryItemLabelGenerator generator = getItemLabelGenerator(row, 
                column);
        if (generator != null && isItemLabelVisible(row, column)) {
            drawItemLabel(g2, dataset, row, column, plot, generator, bar,
=====================================================================
Found a 23 line (110 tokens) duplication in the following files: 
Starting at line 556 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/main/java/org/jfree/chart/renderer/xy/StackedXYAreaRenderer.java
Starting at line 334 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/main/java/org/jfree/chart/renderer/xy/XYAreaRenderer2.java

                    Area dataAreaHotspot = new Area(shape);
                    dataAreaHotspot.intersect(new Area(dataArea));
                    if (!dataAreaHotspot.isEmpty()) {
                        String tip = null;
                        XYToolTipGenerator generator = getToolTipGenerator(
                                series, item);
                        if (generator != null) {
                            tip = generator.generateToolTip(dataset, series, 
                                    item);
                        }
                        String url = null;
                        if (getURLGenerator() != null) {
                            url = getURLGenerator().generateURL(dataset, series, 
                                    item);
                        }
                        XYItemEntity entity = new XYItemEntity(dataAreaHotspot, 
                                dataset, series, item, tip, url);
                        entities.add(entity);
                    }
                }
            }

        }
=====================================================================
Found a 16 line (110 tokens) duplication in the following files: 
Starting at line 464 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/main/java/org/jfree/chart/renderer/xy/XYAreaRenderer.java
Starting at line 273 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/main/java/org/jfree/chart/renderer/xy/XYAreaRenderer2.java

                plot.getRangeAxisEdge());

        double x2 = dataset.getXValue(series, Math.min(item + 1,
                itemCount - 1));
        double y2 = dataset.getYValue(series, Math.min(item + 1,
                itemCount - 1));
        if (Double.isNaN(y2)) {
            y2 = 0.0;
        }
        double transX2 = domainAxis.valueToJava2D(x2, dataArea,
                plot.getDomainAxisEdge());
        double transY2 = rangeAxis.valueToJava2D(y2, dataArea,
                plot.getRangeAxisEdge());

        double transZero = rangeAxis.valueToJava2D(0.0, dataArea,
                plot.getRangeAxisEdge());
=====================================================================
Found a 16 line (109 tokens) duplication in the following files: 
Starting at line 3952 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/main/java/org/jfree/chart/plot/CategoryPlot.java
Starting at line 3934 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/main/java/org/jfree/chart/plot/XYPlot.java

        Line2D line;
        if (orientation == PlotOrientation.HORIZONTAL) {
            double xx = axis.valueToJava2D(value, dataArea,
                    RectangleEdge.BOTTOM);
            line = new Line2D.Double(xx, dataArea.getMinY(), xx,
                    dataArea.getMaxY());
        }
        else {
            double yy = axis.valueToJava2D(value, dataArea,
                    RectangleEdge.LEFT);
            line = new Line2D.Double(dataArea.getMinX(), yy,
                    dataArea.getMaxX(), yy);
        }
        g2.setStroke(stroke);
        g2.setPaint(paint);
        g2.draw(line);
=====================================================================
Found a 20 line (109 tokens) duplication in the following files: 
Starting at line 736 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/main/java/org/jfree/chart/renderer/category/LineAndShapeRenderer.java
Starting at line 423 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/main/java/org/jfree/chart/renderer/category/ScatterRenderer.java

                if (getItemShapeFilled(row, column)) {
                    if (this.useFillPaint) {
                        g2.setPaint(getItemFillPaint(row, column));
                    }
                    else {
                        g2.setPaint(getItemPaint(row, column));
                    }
                    g2.fill(shape);
                }
                if (this.drawOutlines) {
                    if (this.useOutlinePaint) {
                        g2.setPaint(getItemOutlinePaint(row, column));
                    }
                    else {
                        g2.setPaint(getItemPaint(row, column));
                    }
                    g2.setStroke(getItemOutlineStroke(row, column));
                    g2.draw(shape);
                }
            }
=====================================================================
Found a 45 line (109 tokens) duplication in the following files: 
Starting at line 488 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/main/java/org/jfree/data/time/Month.java
Starting at line 583 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/main/java/org/jfree/data/time/Week.java

        return result;
    }

    /**
     * Finds the first occurrence of '-', or if that character is not found,
     * the first occurrence of ',', or the first occurrence of ' ' or '.'
     *
     * @param s  the string to parse.
     *
     * @return The position of the separator character, or {@code -1} if
     *     none of the characters were found.
     */
    private static int findSeparator(String s) {
        int result = s.indexOf('-');
        if (result == -1) {
            result = s.indexOf(',');
        }
        if (result == -1) {
            result = s.indexOf(' ');
        }
        if (result == -1) {
            result = s.indexOf('.');
        }
        return result;
    }

    /**
     * Creates a year from a string, or returns {@code null} (format
     * exceptions suppressed).
     *
     * @param s  the string to parse.
     *
     * @return {@code null} if the string is not parseable, the year
     *         otherwise.
     */
    private static Year evaluateAsYear(String s) {
        Year result = null;
        try {
            result = Year.parseYear(s);
        }
        catch (TimePeriodFormatException e) {
            // suppress
        }
        return result;
    }
=====================================================================
Found a 24 line (109 tokens) duplication in the following files: 
Starting at line 123 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/main/java/org/jfree/data/xy/Vector.java
Starting at line 103 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/main/java/org/jfree/data/xy/XYCoordinate.java

        Vector that = (Vector) obj;
        if (this.x != that.x) {
            return false;
        }
        if (this.y != that.y) {
            return false;
        }
        return true;
    }

    /**
     * Returns a hash code for this instance.
     *
     * @return A hash code.
     */
    @Override
    public int hashCode() {
        int result = 193;
        long temp = Double.doubleToLongBits(this.x);
        result = 37 * result + (int) (temp ^ (temp >>> 32));
        temp = Double.doubleToLongBits(this.y);
        result = 37 * result + (int) (temp ^ (temp >>> 32));
        return result;
    }
=====================================================================
Found a 19 line (109 tokens) duplication in the following files: 
Starting at line 64 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/test/java/org/jfree/chart/entity/PieSectionEntityTest.java
Starting at line 63 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/test/java/org/jfree/chart/entity/XYItemEntityTest.java

                new DefaultPieDataset<String>(), 1, 2, "Key", "ToolTip", "URL");
        assertEquals(e1, e2);

        e1.setArea(new Rectangle2D.Double(4.0, 3.0, 2.0, 1.0));
        assertNotEquals(e1, e2);
        e2.setArea(new Rectangle2D.Double(4.0, 3.0, 2.0, 1.0));
        assertEquals(e1, e2);

        e1.setToolTipText("New ToolTip");
        assertNotEquals(e1, e2);
        e2.setToolTipText("New ToolTip");
        assertEquals(e1, e2);

        e1.setURLText("New URL");
        assertNotEquals(e1, e2);
        e2.setURLText("New URL");
        assertEquals(e1, e2);

        e1.setDataset(null);
=====================================================================
Found a 18 line (109 tokens) duplication in the following files: 
Starting at line 122 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/test/java/org/jfree/chart/renderer/category/AreaRendererTest.java
Starting at line 228 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/test/java/org/jfree/chart/renderer/category/LineAndShapeRendererTest.java

        AreaRenderer r2 = TestUtils.serialised(r1);
        assertEquals(r1, r2);
        TestUtils.checkIndependence(r1, r2);
    }

    /**
     * A check for the datasetIndex and seriesIndex fields in the LegendItem
     * returned by the getLegendItem() method.
     */
    @Test
    public void testGetLegendItemSeriesIndex() {
        DefaultCategoryDataset<String,String> dataset0 = new DefaultCategoryDataset<>();
        dataset0.addValue(21.0, "R1", "C1");
        dataset0.addValue(22.0, "R2", "C1");
        DefaultCategoryDataset<String,String> dataset1 = new DefaultCategoryDataset<>();
        dataset1.addValue(23.0, "R3", "C1");
        dataset1.addValue(24.0, "R4", "C1");
        dataset1.addValue(25.0, "R5", "C1");
=====================================================================
Found a 19 line (109 tokens) duplication in the following files: 
Starting at line 199 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/test/java/org/jfree/chart/renderer/category/BoxAndWhiskerRendererTest.java
Starting at line 243 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/test/java/org/jfree/chart/renderer/category/BoxAndWhiskerRendererTest.java

                = new DefaultBoxAndWhiskerCategoryDataset<>() {

            @Override
            public Number getQ1Value(int row, int column) {
                return null;
            }

            @Override
            public Number getQ1Value(String rowKey, String columnKey) {
                return null;
            }
        };
        List<Double> values = new ArrayList<>();
        values.add(1.0);
        values.add(10.0);
        values.add(100.0);
        dataset.add(values, "row", "column");
        CategoryPlot<String, String> plot = new CategoryPlot<>(dataset, new CategoryAxis("x"),
                new NumberAxis("y"), new BoxAndWhiskerRenderer());
=====================================================================
Found a 8 line (109 tokens) duplication in the following files: 
Starting at line 150 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/test/java/org/jfree/chart/renderer/xy/ClusteredXYBarRendererTest.java
Starting at line 167 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/test/java/org/jfree/data/general/DatasetUtilsTest.java
Starting at line 1059 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/test/java/org/jfree/data/general/DatasetUtilsTest.java
Starting at line 239 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/test/java/org/jfree/data/xy/DefaultIntervalXYDatasetTest.java
Starting at line 330 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/test/java/org/jfree/data/xy/DefaultIntervalXYDatasetTest.java

        double[] x1 = new double[] {1.0, 2.0, 3.0};
        double[] x1Start = new double[] {0.9, 1.9, 2.9};
        double[] x1End = new double[] {1.1, 2.1, 3.1};
        double[] y1 = new double[] {4.0, 5.0, 6.0};
        double[] y1Start = new double[] {1.09, 2.09, 3.09};
        double[] y1End = new double[] {1.11, 2.11, 3.11};
        double[][] data1 = new double[][] {x1, x1Start, x1End, y1, y1Start,
                y1End};
=====================================================================
Found a 20 line (109 tokens) duplication in the following files: 
Starting at line 128 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/test/java/org/jfree/chart/ScatterPlotTest.java
Starting at line 127 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/test/java/org/jfree/chart/TimeSeriesChartTest.java
Starting at line 126 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/test/java/org/jfree/chart/XYAreaChartTest.java
Starting at line 127 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/test/java/org/jfree/chart/XYLineChartTest.java
Starting at line 126 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/test/java/org/jfree/chart/XYStepAreaChartTest.java
Starting at line 129 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/test/java/org/jfree/chart/XYStepChartTest.java

        XYPlot<?> plot = (XYPlot) this.chart.getPlot();
        XYItemRenderer renderer = plot.getRenderer();
        StandardXYToolTipGenerator tt = new StandardXYToolTipGenerator();
        renderer.setSeriesToolTipGenerator(0, tt);
        XYToolTipGenerator tt2 = renderer.getToolTipGenerator(0, 0);
        assertSame(tt2, tt);
    }

    /**
     * Create a horizontal bar chart with sample data in the range -3 to +3.
     *
     * @return The chart.
     */
    private static JFreeChart createChart() {
        XYSeries<String> series1 = new XYSeries<>("Series 1");
        series1.add(1.0, 1.0);
        series1.add(2.0, 2.0);
        series1.add(3.0, 3.0);
        XYDataset<String> dataset = new XYSeriesCollection<>(series1);
        return ChartFactory.createScatterPlot("Scatter Plot", "Domain",
=====================================================================
Found a 8 line (109 tokens) duplication in the following files: 
Starting at line 58 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/test/java/org/jfree/data/category/DefaultIntervalCategoryDatasetTest.java
Starting at line 108 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/test/java/org/jfree/data/category/DefaultIntervalCategoryDatasetTest.java

    public void testGetValue() {
        double[] starts_S1 = new double[] {0.1, 0.2, 0.3};
        double[] starts_S2 = new double[] {0.3, 0.4, 0.5};
        double[] ends_S1 = new double[] {0.5, 0.6, 0.7};
        double[] ends_S2 = new double[] {0.7, 0.8, 0.9};
        double[][] starts = new double[][] {starts_S1, starts_S2};
        double[][] ends = new double[][] {ends_S1, ends_S2};
        DefaultIntervalCategoryDataset d = new DefaultIntervalCategoryDataset(
=====================================================================
Found a 9 line (109 tokens) duplication in the following files: 
Starting at line 162 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/test/java/org/jfree/data/category/DefaultIntervalCategoryDatasetTest.java
Starting at line 226 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/test/java/org/jfree/data/category/DefaultIntervalCategoryDatasetTest.java
Starting at line 264 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/test/java/org/jfree/data/category/DefaultIntervalCategoryDatasetTest.java

    public void testSerialization() {
        double[] starts_S1 = new double[] {0.1, 0.2, 0.3};
        double[] starts_S2 = new double[] {0.3, 0.4, 0.5};
        double[] ends_S1 = new double[] {0.5, 0.6, 0.7};
        double[] ends_S2 = new double[] {0.7, 0.8, 0.9};
        double[][] starts = new double[][] {starts_S1, starts_S2};
        double[][] ends = new double[][] {ends_S1, ends_S2};
        DefaultIntervalCategoryDataset d1
                = new DefaultIntervalCategoryDataset(starts, ends);
=====================================================================
Found a 80 line (108 tokens) duplication in the following files: 
Starting at line 4083 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/main/java/org/jfree/chart/plot/CategoryPlot.java
Starting at line 4543 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/main/java/org/jfree/chart/plot/XYPlot.java

        fireChangeEvent();
    }

    /**
     * Returns the fixed domain axis space.
     *
     * @return The fixed domain axis space (possibly {@code null}).
     *
     * @see #setFixedDomainAxisSpace(AxisSpace)
     */
    public AxisSpace getFixedDomainAxisSpace() {
        return this.fixedDomainAxisSpace;
    }

    /**
     * Sets the fixed domain axis space and sends a {@link PlotChangeEvent} to
     * all registered listeners.
     *
     * @param space  the space ({@code null} permitted).
     *
     * @see #getFixedDomainAxisSpace()
     */
    public void setFixedDomainAxisSpace(AxisSpace space) {
        setFixedDomainAxisSpace(space, true);
    }

    /**
     * Sets the fixed domain axis space and sends a {@link PlotChangeEvent} to
     * all registered listeners.
     *
     * @param space  the space ({@code null} permitted).
     * @param notify  notify listeners?
     *
     * @see #getFixedDomainAxisSpace()
     */
    public void setFixedDomainAxisSpace(AxisSpace space, boolean notify) {
        this.fixedDomainAxisSpace = space;
        if (notify) {
            fireChangeEvent();
        }
    }

    /**
     * Returns the fixed range axis space.
     *
     * @return The fixed range axis space (possibly {@code null}).
     *
     * @see #setFixedRangeAxisSpace(AxisSpace)
     */
    public AxisSpace getFixedRangeAxisSpace() {
        return this.fixedRangeAxisSpace;
    }

    /**
     * Sets the fixed range axis space and sends a {@link PlotChangeEvent} to
     * all registered listeners.
     *
     * @param space  the space ({@code null} permitted).
     *
     * @see #getFixedRangeAxisSpace()
     */
    public void setFixedRangeAxisSpace(AxisSpace space) {
        setFixedRangeAxisSpace(space, true);
    }

    /**
     * Sets the fixed range axis space and sends a {@link PlotChangeEvent} to
     * all registered listeners.
     *
     * @param space  the space ({@code null} permitted).
     * @param notify  notify listeners?
     *
     * @see #getFixedRangeAxisSpace()
     */
    public void setFixedRangeAxisSpace(AxisSpace space, boolean notify) {
        this.fixedRangeAxisSpace = space;
        if (notify) {
            fireChangeEvent();
        }
    }
=====================================================================
Found a 19 line (108 tokens) duplication in the following files: 
Starting at line 1019 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/main/java/org/jfree/chart/renderer/category/AbstractCategoryItemRenderer.java
Starting at line 1048 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/main/java/org/jfree/chart/renderer/xy/AbstractXYItemRenderer.java

            Paint p = marker.getPaint();
            if (p instanceof GradientPaint) {
                GradientPaint gp = (GradientPaint) p;
                GradientPaintTransformer t = im.getGradientPaintTransformer();
                if (t != null) {
                    gp = t.transform(gp, rect);
                }
                g2.setPaint(gp);
            }
            else {
                g2.setPaint(p);
            }
            g2.fill(rect);

            // now draw the outlines, if visible...
            if (im.getOutlinePaint() != null && im.getOutlineStroke() != null) {
                if (orientation == PlotOrientation.VERTICAL) {
                    Line2D line = new Line2D.Double();
                    double x0 = dataArea.getMinX();
=====================================================================
Found a 13 line (108 tokens) duplication in the following files: 
Starting at line 137 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/test/java/org/jfree/chart/plot/CombinedDomainCategoryPlotTest.java
Starting at line 149 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/test/java/org/jfree/chart/plot/CombinedDomainXYPlotTest.java

        CategoryPlot<String, String> subplot1 = plot.getSubplots().get(0);
        NumberAxis yAxis = (NumberAxis) subplot1.getRangeAxis();
        yAxis.setAutoRangeIncludesZero(!yAxis.getAutoRangeIncludesZero());
        assertEquals(1, this.events.size());

        // a redraw should NOT trigger another change event
        BufferedImage image = new BufferedImage(200, 100,
                BufferedImage.TYPE_INT_RGB);
        Graphics2D g2 = image.createGraphics();
        this.events.clear();
        chart.draw(g2, new Rectangle2D.Double(0.0, 0.0, 200.0, 100.0));
        assertTrue(this.events.isEmpty());
    }
=====================================================================
Found a 13 line (108 tokens) duplication in the following files: 
Starting at line 51 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/test/java/org/jfree/data/gantt/SlidingGanttCategoryDatasetTest.java
Starting at line 50 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/test/java/org/jfree/data/gantt/XYTaskDatasetTest.java

public class SlidingGanttCategoryDatasetTest {

    /**
     * Some checks for the equals() method.
     */
    @Test
    public void testEquals() {
        TaskSeries<String> s1 = new TaskSeries<>("Series");
        s1.add(new Task("Task 1", new Date(0L), new Date(1L)));
        s1.add(new Task("Task 2", new Date(10L), new Date(11L)));
        s1.add(new Task("Task 3", new Date(20L), new Date(21L)));
        TaskSeriesCollection<String, String> u1 = new TaskSeriesCollection<>();
        u1.add(s1);
=====================================================================
Found a 11 line (108 tokens) duplication in the following files: 
Starting at line 288 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/test/java/org/jfree/data/time/TimeSeriesTest.java
Starting at line 381 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/test/java/org/jfree/data/time/TimeSeriesTest.java

    public void testCreateCopy1() {
        TimeSeries<String> series = new TimeSeries<>("Series");
        series.add(new Month(MonthConstants.JANUARY, 2003), 45.0);
        series.add(new Month(MonthConstants.FEBRUARY, 2003), 55.0);
        series.add(new Month(MonthConstants.JUNE, 2003), 35.0);
        series.add(new Month(MonthConstants.NOVEMBER, 2003), 85.0);
        series.add(new Month(MonthConstants.DECEMBER, 2003), 75.0);

        try {
            // copy a range before the start of the series data...
            TimeSeries<String> result1 = series.createCopy(
=====================================================================
Found a 67 line (107 tokens) duplication in the following files: 
Starting at line 638 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/main/java/org/jfree/chart/ChartUtils.java
Starting at line 98 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/main/java/org/jfree/chart/imagemap/ImageMapUtils.java

        ImageMapUtils.writeImageMap(writer, name, info,
                toolTipTagFragmentGenerator,
                new StandardURLTagFragmentGenerator());

    }

    /**
     * Writes an image map to the specified writer.
     *
     * @param writer  the writer ({@code null} not permitted).
     * @param name  the map name ({@code null} not permitted).
     * @param info  the chart rendering info ({@code null} not permitted).
     * @param toolTipTagFragmentGenerator  a generator for the HTML fragment
     *     that will contain the tooltip text ({@code null} not permitted
     *     if {@code info} contains tooltip information).
     * @param urlTagFragmentGenerator  a generator for the HTML fragment that
     *     will contain the URL reference ({@code null} not permitted if
     *     {@code info} contains URLs).
     *
     * @throws IOException if there are any I/O errors.
     */
    public static void writeImageMap(PrintWriter writer, String name,
            ChartRenderingInfo info,
            ToolTipTagFragmentGenerator toolTipTagFragmentGenerator,
            URLTagFragmentGenerator urlTagFragmentGenerator)
            throws IOException {

        writer.println(ImageMapUtils.getImageMap(name, info,
                toolTipTagFragmentGenerator, urlTagFragmentGenerator));
    }

    /**
     * Creates an HTML image map.  This method maps to
     * {@link ImageMapUtils#getImageMap(String, ChartRenderingInfo,
     * ToolTipTagFragmentGenerator, URLTagFragmentGenerator)}, using default
     * generators.
     *
     * @param name  the map name ({@code null} not permitted).
     * @param info  the chart rendering info ({@code null} not permitted).
     *
     * @return The map tag.
     */
    public static String getImageMap(String name, ChartRenderingInfo info) {
        return ImageMapUtils.getImageMap(name, info,
                new StandardToolTipTagFragmentGenerator(),
                new StandardURLTagFragmentGenerator());
    }

    /**
     * Creates an HTML image map.  This method maps directly to
     * {@link ImageMapUtils#getImageMap(String, ChartRenderingInfo,
     * ToolTipTagFragmentGenerator, URLTagFragmentGenerator)}.
     *
     * @param name  the map name ({@code null} not permitted).
     * @param info  the chart rendering info ({@code null} not permitted).
     * @param toolTipTagFragmentGenerator  a generator for the HTML fragment
     *     that will contain the tooltip text ({@code null} not permitted
     *     if {@code info} contains tooltip information).
     * @param urlTagFragmentGenerator  a generator for the HTML fragment that
     *     will contain the URL reference ({@code null} not permitted if
     *     {@code info} contains URLs).
     *
     * @return The map tag.
     */
    public static String getImageMap(String name, ChartRenderingInfo info,
            ToolTipTagFragmentGenerator toolTipTagFragmentGenerator,
            URLTagFragmentGenerator urlTagFragmentGenerator) {
=====================================================================
Found a 36 line (107 tokens) duplication in the following files: 
Starting at line 1223 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/main/java/org/jfree/chart/plot/CategoryPlot.java
Starting at line 1219 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/main/java/org/jfree/chart/plot/XYPlot.java

            if (entry.getValue() == dataset) {
                return entry.getKey();
            }
        }
        return -1;
    }

    /**
     * Maps a dataset to a particular domain axis.
     *
     * @param index  the dataset index (zero-based).
     * @param axisIndex  the axis index (zero-based).
     *
     * @see #getDomainAxisForDataset(int)
     */
    public void mapDatasetToDomainAxis(int index, int axisIndex) {
        List<Integer> axisIndices = new ArrayList<>(1);
        axisIndices.add(axisIndex);
        mapDatasetToDomainAxes(index, axisIndices);
    }

    /**
     * Maps the specified dataset to the axes in the list.  Note that the
     * conversion of data values into Java2D space is always performed using
     * the first axis in the list.
     *
     * @param index  the dataset index (zero-based).
     * @param axisIndices  the axis indices ({@code null} permitted).
     */
    public void mapDatasetToDomainAxes(int index, List<Integer> axisIndices) {
        Args.requireNonNegative(index, "index");
        checkAxisIndices(axisIndices);
        this.datasetToDomainAxesMap.put(index, new ArrayList<>(axisIndices));
        // fake a dataset change event to update axes...
        datasetChanged(new DatasetChangeEvent(this, getDataset(index)));
    }
=====================================================================
Found a 89 line (107 tokens) duplication in the following files: 
Starting at line 1730 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/main/java/org/jfree/chart/plot/CategoryPlot.java
Starting at line 1953 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/main/java/org/jfree/chart/plot/XYPlot.java

        this.domainGridlinePaint = paint;
        fireChangeEvent();
    }

    /**
     * Returns a flag that controls whether or not a zero baseline is
     * displayed for the range axis.
     *
     * @return A boolean.
     *
     * @see #setRangeZeroBaselineVisible(boolean)
     */
    public boolean isRangeZeroBaselineVisible() {
        return this.rangeZeroBaselineVisible;
    }

    /**
     * Sets the flag that controls whether or not the zero baseline is
     * displayed for the range axis, and sends a {@link PlotChangeEvent} to
     * all registered listeners.
     *
     * @param visible  the flag.
     *
     * @see #isRangeZeroBaselineVisible()
     */
    public void setRangeZeroBaselineVisible(boolean visible) {
        this.rangeZeroBaselineVisible = visible;
        fireChangeEvent();
    }

    /**
     * Returns the stroke used for the zero baseline against the range axis.
     *
     * @return The stroke (never {@code null}).
     *
     * @see #setRangeZeroBaselineStroke(Stroke)
     */
    public Stroke getRangeZeroBaselineStroke() {
        return this.rangeZeroBaselineStroke;
    }

    /**
     * Sets the stroke for the zero baseline for the range axis,
     * and sends a {@link PlotChangeEvent} to all registered listeners.
     *
     * @param stroke  the stroke ({@code null} not permitted).
     *
     * @see #getRangeZeroBaselineStroke()
     */
    public void setRangeZeroBaselineStroke(Stroke stroke) {
        Args.nullNotPermitted(stroke, "stroke");
        this.rangeZeroBaselineStroke = stroke;
        fireChangeEvent();
    }

    /**
     * Returns the paint for the zero baseline (if any) plotted against the
     * range axis.
     *
     * @return The paint (never {@code null}).
     *
     * @see #setRangeZeroBaselinePaint(Paint)
     */
    public Paint getRangeZeroBaselinePaint() {
        return this.rangeZeroBaselinePaint;
    }

    /**
     * Sets the paint for the zero baseline plotted against the range axis and
     * sends a {@link PlotChangeEvent} to all registered listeners.
     *
     * @param paint  the paint ({@code null} not permitted).
     *
     * @see #getRangeZeroBaselinePaint()
     */
    public void setRangeZeroBaselinePaint(Paint paint) {
        Args.nullNotPermitted(paint, "paint");
        this.rangeZeroBaselinePaint = paint;
        fireChangeEvent();
    }

    /**
     * Returns the flag that controls whether the range grid-lines are visible.
     *
     * @return The flag.
     *
     * @see #setRangeGridlinesVisible(boolean)
     */
    public boolean isRangeGridlinesVisible() {
=====================================================================
Found a 60 line (107 tokens) duplication in the following files: 
Starting at line 2372 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/main/java/org/jfree/chart/plot/CategoryPlot.java
Starting at line 2345 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/main/java/org/jfree/chart/plot/XYPlot.java

        Collection<CategoryMarker> markers;
        if (layer == Layer.FOREGROUND) {
            markers = this.foregroundDomainMarkers.get(index);
        } else {
            markers = this.backgroundDomainMarkers.get(index);
        }
        if (markers == null) {
            return false;
        }
        boolean removed = markers.remove(marker);
        if (removed && notify) {
            fireChangeEvent();
        }
        return removed;
    }

    /**
     * Adds a marker for display (in the foreground) against the range axis and
     * sends a {@link PlotChangeEvent} to all registered listeners. Typically a
     * marker will be drawn by the renderer as a line perpendicular to the
     * range axis, however this is entirely up to the renderer.
     *
     * @param marker  the marker ({@code null} not permitted).
     *
     * @see #removeRangeMarker(Marker)
     */
    public void addRangeMarker(Marker marker) {
        addRangeMarker(marker, Layer.FOREGROUND);
    }

    /**
     * Adds a marker for display against the range axis and sends a
     * {@link PlotChangeEvent} to all registered listeners.  Typically a marker
     * will be drawn by the renderer as a line perpendicular to the range axis,
     * however this is entirely up to the renderer.
     *
     * @param marker  the marker ({@code null} not permitted).
     * @param layer  the layer (foreground or background) ({@code null}
     *               not permitted).
     *
     * @see #removeRangeMarker(Marker, Layer)
     */
    public void addRangeMarker(Marker marker, Layer layer) {
        addRangeMarker(0, marker, layer);
    }

    /**
     * Adds a marker for display by a particular renderer and sends a
     * {@link PlotChangeEvent} to all registered listeners.
     * <P>
     * Typically a marker will be drawn by the renderer as a line perpendicular
     * to a range axis, however this is entirely up to the renderer.
     *
     * @param index  the renderer index.
     * @param marker  the marker.
     * @param layer  the layer.
     *
     * @see #removeRangeMarker(int, Marker, Layer)
     */
    public void addRangeMarker(int index, Marker marker, Layer layer) {
=====================================================================
Found a 19 line (107 tokens) duplication in the following files: 
Starting at line 503 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/main/java/org/jfree/chart/title/TextTitle.java
Starting at line 575 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/main/java/org/jfree/chart/title/TextTitle.java

            g2.setFont(this.font);
            this.content = TextUtils.createTextBlock(this.text, this.font,
                    this.paint, maxWidth, this.maximumLinesToDisplay,
                    new G2TextMeasurer(g2));
            this.content.setLineAlignment(this.textAlignment);
            Size2D contentSize = this.content.calculateDimensions(g2);

            // transpose the dimensions, because the title is rotated
            if (this.expandToFitSpace) {
                return new Size2D(contentSize.getHeight(), maxWidth);
            }
            else {
                return new Size2D(contentSize.height, contentSize.width);
            }
        }
        else {
            throw new RuntimeException("Unrecognised exception.");
        }
    }
=====================================================================
Found a 13 line (107 tokens) duplication in the following files: 
Starting at line 700 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/test/java/org/jfree/chart/block/BorderArrangementTest.java
Starting at line 721 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/test/java/org/jfree/chart/block/BorderArrangementTest.java

        container.add(new EmptyBlock(21.0, 12.3), RectangleEdge.RIGHT);
        container.add(new EmptyBlock(10.0, 20.0), RectangleEdge.TOP);
        container.add(new EmptyBlock(12.3, 45.6), RectangleEdge.BOTTOM);
        size = container.arrange(g2, constraint);
        assertEquals(10.0, size.width, EPSILON);
        assertEquals(77.9, size.height, EPSILON);

        // TBLRC
        // 11011
        container.clear();
        container.add(new EmptyBlock(1.0, 2.0), RectangleEdge.TOP);
        container.add(new EmptyBlock(3.0, 4.0), RectangleEdge.BOTTOM);
        container.add(new EmptyBlock(7.0, 8.0), RectangleEdge.RIGHT);
=====================================================================
Found a 17 line (107 tokens) duplication in the following files: 
Starting at line 67 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/test/java/org/jfree/chart/entity/CategoryLabelEntityTest.java
Starting at line 64 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/test/java/org/jfree/chart/entity/PieSectionEntityTest.java
Starting at line 60 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/test/java/org/jfree/chart/entity/TickLabelEntityTest.java
Starting at line 63 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/test/java/org/jfree/chart/entity/XYItemEntityTest.java

                3.0, 4.0), "ToolTip", "URL");
        assertEquals(e1, e2);

        e1.setArea(new Rectangle2D.Double(4.0, 3.0, 2.0, 1.0));
        assertNotEquals(e1, e2);
        e2.setArea(new Rectangle2D.Double(4.0, 3.0, 2.0, 1.0));
        assertEquals(e1, e2);

        e1.setToolTipText("New ToolTip");
        assertNotEquals(e1, e2);
        e2.setToolTipText("New ToolTip");
        assertEquals(e1, e2);

        e1.setURLText("New URL");
        assertNotEquals(e1, e2);
        e2.setURLText("New URL");
        assertEquals(e1, e2);
=====================================================================
Found a 19 line (107 tokens) duplication in the following files: 
Starting at line 62 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/test/java/org/jfree/chart/entity/LegendItemEntityTest.java
Starting at line 64 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/test/java/org/jfree/chart/entity/PieSectionEntityTest.java

                new Rectangle2D.Double(1.0, 2.0, 3.0, 4.0));
        assertEquals(e1, e2);

        e1.setArea(new Rectangle2D.Double(4.0, 3.0, 2.0, 1.0));
        assertNotEquals(e1, e2);
        e2.setArea(new Rectangle2D.Double(4.0, 3.0, 2.0, 1.0));
        assertEquals(e1, e2);

        e1.setToolTipText("New ToolTip");
        assertNotEquals(e1, e2);
        e2.setToolTipText("New ToolTip");
        assertEquals(e1, e2);

        e1.setURLText("New URL");
        assertNotEquals(e1, e2);
        e2.setURLText("New URL");
        assertEquals(e1, e2);

        e1.setDataset(new DefaultCategoryDataset<String, String>());
=====================================================================
Found a 13 line (107 tokens) duplication in the following files: 
Starting at line 149 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/test/java/org/jfree/chart/plot/CombinedDomainXYPlotTest.java
Starting at line 137 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/test/java/org/jfree/chart/plot/CombinedRangeCategoryPlotTest.java

        XYPlot<String> subplot1 = plot.getSubplots().get(0);
        NumberAxis yAxis = (NumberAxis) subplot1.getRangeAxis();
        yAxis.setAutoRangeIncludesZero(!yAxis.getAutoRangeIncludesZero());
        assertEquals(1, this.events.size());

        // a redraw should NOT trigger another change event
        BufferedImage image = new BufferedImage(200, 100,
                BufferedImage.TYPE_INT_RGB);
        Graphics2D g2 = image.createGraphics();
        this.events.clear();
        chart.draw(g2, new Rectangle2D.Double(0.0, 0.0, 200.0, 100.0));
        assertTrue(this.events.isEmpty());
    }
=====================================================================
Found a 9 line (107 tokens) duplication in the following files: 
Starting at line 162 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/test/java/org/jfree/data/category/DefaultIntervalCategoryDatasetTest.java
Starting at line 181 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/test/java/org/jfree/data/category/DefaultIntervalCategoryDatasetTest.java

    public void testSerialization() {
        double[] starts_S1 = new double[] {0.1, 0.2, 0.3};
        double[] starts_S2 = new double[] {0.3, 0.4, 0.5};
        double[] ends_S1 = new double[] {0.5, 0.6, 0.7};
        double[] ends_S2 = new double[] {0.7, 0.8, 0.9};
        double[][] starts = new double[][] {starts_S1, starts_S2};
        double[][] ends = new double[][] {ends_S1, ends_S2};
        DefaultIntervalCategoryDataset d1
                = new DefaultIntervalCategoryDataset(starts, ends);
=====================================================================
Found a 15 line (107 tokens) duplication in the following files: 
Starting at line 213 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/test/java/org/jfree/data/xy/XIntervalSeriesTest.java
Starting at line 213 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/test/java/org/jfree/data/xy/XYIntervalSeriesTest.java
Starting at line 214 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/test/java/org/jfree/data/xy/YIntervalSeriesTest.java

        series.add(1.0, 1.1, 1.1, 1.1);
        assertEquals(5.5, series.getYValue(0), EPSILON);
        assertEquals(5.51, series.getYValue(1), EPSILON);
        assertEquals(6.6, series.getYValue(2), EPSILON);
        assertEquals(3.3, series.getYValue(3), EPSILON);
        assertEquals(4.4, series.getYValue(4), EPSILON);
        assertEquals(2.2, series.getYValue(5), EPSILON);
        assertEquals(1.1, series.getYValue(6), EPSILON);
    }

    /**
     * A simple check that the maximumItemCount attribute is working.
     */
    @Test
    public void testSetMaximumItemCount() {
=====================================================================
Found a 16 line (106 tokens) duplication in the following files: 
Starting at line 739 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/main/java/org/jfree/chart/renderer/category/BarRenderer.java
Starting at line 252 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/main/java/org/jfree/chart/renderer/category/LevelRenderer.java

        int categoryCount = getColumnCount();
        if (seriesCount > 1) {
            double seriesGap = space * getItemMargin()
                               / (categoryCount * (seriesCount - 1));
            double seriesW = calculateSeriesWidth(space, domainAxis,
                    categoryCount, seriesCount);
            barW0 = barW0 + row * (seriesW + seriesGap)
                          + (seriesW / 2.0) - (state.getBarWidth() / 2.0);
        }
        else {
            barW0 = domainAxis.getCategoryMiddle(column, getColumnCount(),
                    dataArea, plot.getDomainAxisEdge()) - state.getBarWidth()
                    / 2.0;
        }
        return barW0;
    }
=====================================================================
Found a 30 line (106 tokens) duplication in the following files: 
Starting at line 348 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/main/java/org/jfree/chart/renderer/category/LayeredBarRenderer.java
Starting at line 252 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/main/java/org/jfree/chart/renderer/category/StatisticalBarRenderer.java
Starting at line 400 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/main/java/org/jfree/chart/renderer/category/StatisticalBarRenderer.java

        double lclip = getLowerClip();
        double uclip = getUpperClip();

        if (uclip <= 0.0) {  // cases 1, 2, 3 and 4
            if (value >= uclip) {
                return; // bar is not visible
            }
            base = uclip;
            if (value <= lclip) {
                value = lclip;
            }
        } else if (lclip <= 0.0) { // cases 5, 6, 7 and 8
            if (value >= uclip) {
                value = uclip;
            } else {
                if (value <= lclip) {
                    value = lclip;
                }
            }
        } else { // cases 9, 10, 11 and 12
            if (value <= lclip) {
                return; // bar is not visible
            }
            base = getLowerClip();
            if (value >= uclip) {
               value = uclip;
            }
        }

        RectangleEdge edge = plot.getRangeAxisEdge();
=====================================================================
Found a 88 line (106 tokens) duplication in the following files: 
Starting at line 330 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/main/java/org/jfree/chart/renderer/category/LineAndShapeRenderer.java
Starting at line 188 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/main/java/org/jfree/chart/renderer/category/ScatterRenderer.java

        fireChangeEvent();
    }

    /**
     * Returns {@code true} if outlines should be drawn for shapes, and
     * {@code false} otherwise.
     *
     * @return A boolean.
     *
     * @see #setDrawOutlines(boolean)
     */
    public boolean getDrawOutlines() {
        return this.drawOutlines;
    }

    /**
     * Sets the flag that controls whether outlines are drawn for
     * shapes, and sends a {@link RendererChangeEvent} to all registered
     * listeners.
     * <P>
     * In some cases, shapes look better if they do NOT have an outline, but
     * this flag allows you to set your own preference.
     *
     * @param flag  the flag.
     *
     * @see #getDrawOutlines()
     */
    public void setDrawOutlines(boolean flag) {
        this.drawOutlines = flag;
        fireChangeEvent();
    }

    /**
     * Returns the flag that controls whether the outline paint is used for
     * shape outlines.  If not, the regular series paint is used.
     *
     * @return A boolean.
     *
     * @see #setUseOutlinePaint(boolean)
     */
    public boolean getUseOutlinePaint() {
        return this.useOutlinePaint;
    }

    /**
     * Sets the flag that controls whether the outline paint is used for shape
     * outlines, and sends a {@link RendererChangeEvent} to all registered
     * listeners.
     *
     * @param use  the flag.
     *
     * @see #getUseOutlinePaint()
     */
    public void setUseOutlinePaint(boolean use) {
        this.useOutlinePaint = use;
        fireChangeEvent();
    }

    // SHAPES FILLED

    /**
     * Returns the flag used to control whether or not the shape for an item
     * is filled. The default implementation passes control to the
     * {@code getSeriesShapesFilled} method. You can override this method
     * if you require different behaviour.
     *
     * @param series  the series index (zero-based).
     * @param item  the item index (zero-based).
     *
     * @return A boolean.
     */
    public boolean getItemShapeFilled(int series, int item) {
        return getSeriesShapesFilled(series);
    }

    /**
     * Returns the flag used to control whether or not the shapes for a series
     * are filled.
     *
     * @param series  the series index (zero-based).
     *
     * @return A boolean.
     */
    public boolean getSeriesShapesFilled(int series) {
        Boolean flag = this.seriesShapesFilledMap.get(series);
        if (flag != null) {
            return flag;
        }
=====================================================================
Found a 16 line (106 tokens) duplication in the following files: 
Starting at line 487 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/main/java/org/jfree/chart/title/TextTitle.java
Starting at line 559 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/main/java/org/jfree/chart/title/TextTitle.java

            g2.setFont(this.font);
            this.content = TextUtils.createTextBlock(this.text, this.font,
                    this.paint, maxWidth, this.maximumLinesToDisplay,
                    new G2TextMeasurer(g2));
            this.content.setLineAlignment(this.textAlignment);
            Size2D contentSize = this.content.calculateDimensions(g2);
            if (this.expandToFitSpace) {
                return new Size2D(maxWidth, contentSize.getHeight());
            }
            else {
                return contentSize;
            }
        }
        else if (position == RectangleEdge.LEFT || position
                == RectangleEdge.RIGHT) {
            float maxWidth = Float.MAX_VALUE;
=====================================================================
Found a 15 line (106 tokens) duplication in the following files: 
Starting at line 112 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/test/java/org/jfree/data/gantt/SlidingGanttCategoryDatasetTest.java
Starting at line 107 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/test/java/org/jfree/data/gantt/XYTaskDatasetTest.java

                = (TaskSeriesCollection) d2.getUnderlyingDataset();
        TaskSeries<String> s2 = u2.getSeries("Series");
        s2.add(new Task("Task 2", new Date(10L), new Date(11L)));
        assertEquals(d1, d2);
    }

    /**
     * Serialize an instance, restore it, and check for equality.
     */
    @Test
    public void testSerialization() {
        TaskSeries<String> s1 = new TaskSeries<>("Series");
        s1.add(new Task("Task 1", new Date(0L), new Date(1L)));
        TaskSeriesCollection<String, String> u1 = new TaskSeriesCollection<>();
        u1.add(s1);
=====================================================================
Found a 10 line (106 tokens) duplication in the following files: 
Starting at line 127 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/test/java/org/jfree/data/general/DatasetUtilsTest.java
Starting at line 189 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/test/java/org/jfree/data/general/DatasetUtilsTest.java

        double[] x1End = new double[] {1.1, 2.1, 3.1};
        double[] y1 = new double[] {4.0, 5.0, 6.0};
        double[] y1Start = new double[] {1.09, 2.09, 3.09};
        double[] y1End = new double[] {1.11, 2.11, 3.11};
        double[][] data1 = new double[][] {x1, x1Start, x1End, y1, y1Start,
                y1End};
        dataset.addSeries("S1", data1);
        Range r = DatasetUtils.findDomainBounds(dataset);
        assertEquals(0.9, r.getLowerBound(), EPSILON);
        assertEquals(3.1, r.getUpperBound(), EPSILON);
=====================================================================
Found a 19 line (105 tokens) duplication in the following files: 
Starting at line 622 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/main/java/org/jfree/chart/legend/LegendGraphic.java
Starting at line 946 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/main/java/org/jfree/chart/legend/LegendItem.java

        if (this.shapeVisible != that.shapeVisible) {
            return false;
        }
        if (!ShapeUtils.equal(this.shape, that.shape)) {
            return false;
        }
        if (this.shapeFilled != that.shapeFilled) {
            return false;
        }
        if (!PaintUtils.equal(this.fillPaint, that.fillPaint)) {
            return false;
        }
        if (!Objects.equals(this.fillPaintTransformer, that.fillPaintTransformer)) {
            return false;
        }
        if (this.shapeOutlineVisible != that.shapeOutlineVisible) {
            return false;
        }
        if (!PaintUtils.equal(this.outlinePaint, that.outlinePaint)) {
=====================================================================
Found a 15 line (105 tokens) duplication in the following files: 
Starting at line 1035 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/main/java/org/jfree/chart/renderer/category/AbstractCategoryItemRenderer.java
Starting at line 1077 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/main/java/org/jfree/chart/renderer/xy/AbstractXYItemRenderer.java
Starting at line 1266 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/main/java/org/jfree/chart/renderer/xy/AbstractXYItemRenderer.java

                if (orientation == PlotOrientation.VERTICAL) {
                    Line2D line = new Line2D.Double();
                    double x0 = dataArea.getMinX();
                    double x1 = dataArea.getMaxX();
                    g2.setPaint(im.getOutlinePaint());
                    g2.setStroke(im.getOutlineStroke());
                    if (range.contains(start)) {
                        line.setLine(x0, start2d, x1, start2d);
                        g2.draw(line);
                    }
                    if (range.contains(end)) {
                        line.setLine(x0, end2d, x1, end2d);
                        g2.draw(line);
                    }
                } else { // PlotOrientation.HORIZONTAL
=====================================================================
Found a 15 line (105 tokens) duplication in the following files: 
Starting at line 1049 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/main/java/org/jfree/chart/renderer/category/AbstractCategoryItemRenderer.java
Starting at line 1063 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/main/java/org/jfree/chart/renderer/xy/AbstractXYItemRenderer.java
Starting at line 1280 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/main/java/org/jfree/chart/renderer/xy/AbstractXYItemRenderer.java

                } else { // PlotOrientation.HORIZONTAL
                    Line2D line = new Line2D.Double();
                    double y0 = dataArea.getMinY();
                    double y1 = dataArea.getMaxY();
                    g2.setPaint(im.getOutlinePaint());
                    g2.setStroke(im.getOutlineStroke());
                    if (range.contains(start)) {
                        line.setLine(start2d, y0, start2d, y1);
                        g2.draw(line);
                    }
                    if (range.contains(end)) {
                        line.setLine(end2d, y0, end2d, y1);
                        g2.draw(line);
                    }
                }
=====================================================================
Found a 19 line (105 tokens) duplication in the following files: 
Starting at line 978 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/main/java/org/jfree/chart/renderer/xy/AbstractXYItemRenderer.java
Starting at line 1181 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/main/java/org/jfree/chart/renderer/xy/AbstractXYItemRenderer.java

                            dataArea.getMaxY());
                    break;
                default:
                    throw new IllegalStateException("Unrecognised orientation.");
            }

            final Composite originalComposite = g2.getComposite();
            g2.setComposite(AlphaComposite.getInstance(
                    AlphaComposite.SRC_OVER, marker.getAlpha()));
            g2.setPaint(marker.getPaint());
            g2.setStroke(marker.getStroke());
            g2.draw(line);

            String label = marker.getLabel();
            RectangleAnchor anchor = marker.getLabelAnchor();
            if (label != null) {
                Font labelFont = marker.getLabelFont();
                g2.setFont(labelFont);
                Point2D coords = calculateDomainMarkerTextAnchorPoint(
=====================================================================
Found a 17 line (105 tokens) duplication in the following files: 
Starting at line 685 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/main/java/org/jfree/data/general/DatasetUtils.java
Starting at line 1163 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/main/java/org/jfree/data/general/DatasetUtils.java

                    uvalue = intervalXYData.getEndXValue(series, item);
                    if (!Double.isNaN(value)) {
                        minimum = Math.min(minimum, value);
                        maximum = Math.max(maximum, value);
                    }
                    if (!Double.isNaN(lvalue)) {
                        minimum = Math.min(minimum, lvalue);
                        maximum = Math.max(maximum, lvalue);
                    }
                    if (!Double.isNaN(uvalue)) {
                        minimum = Math.min(minimum, uvalue);
                        maximum = Math.max(maximum, uvalue);
                    }
                }
            }
        }
        else {
=====================================================================
Found a 13 line (105 tokens) duplication in the following files: 
Starting at line 382 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/test/java/org/jfree/chart/block/BorderArrangementTest.java
Starting at line 403 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/test/java/org/jfree/chart/block/BorderArrangementTest.java

        container.add(new EmptyBlock(21.0, 12.3), RectangleEdge.RIGHT);
        container.add(new EmptyBlock(10.0, 20.0), RectangleEdge.TOP);
        container.add(new EmptyBlock(12.3, 45.6), RectangleEdge.BOTTOM);
        size = container.arrange(g2);
        assertEquals(21.0, size.width, EPSILON);
        assertEquals(77.9, size.height, EPSILON);

        // TBLRC
        // 11011
        container.clear();
        container.add(new EmptyBlock(1.0, 2.0), RectangleEdge.TOP);
        container.add(new EmptyBlock(3.0, 4.0), RectangleEdge.BOTTOM);
        container.add(new EmptyBlock(7.0, 8.0), RectangleEdge.RIGHT);
=====================================================================
Found a 12 line (105 tokens) duplication in the following files: 
Starting at line 429 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/test/java/org/jfree/chart/block/BorderArrangementTest.java
Starting at line 747 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/test/java/org/jfree/chart/block/BorderArrangementTest.java

        assertEquals(12.0, size.width, EPSILON);
        assertEquals(14.0, size.height, EPSILON);

        // TBLRC
        // 11111 - all
        container.clear();
        container.add(new EmptyBlock(1.0, 2.0), RectangleEdge.TOP);
        container.add(new EmptyBlock(3.0, 4.0), RectangleEdge.BOTTOM);
        container.add(new EmptyBlock(5.0, 6.0), RectangleEdge.LEFT);
        container.add(new EmptyBlock(7.0, 8.0), RectangleEdge.RIGHT);
        container.add(new EmptyBlock(9.0, 10.0));
        size = container.arrange(g2);
=====================================================================
Found a 19 line (105 tokens) duplication in the following files: 
Starting at line 62 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/test/java/org/jfree/chart/entity/LegendItemEntityTest.java
Starting at line 64 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/test/java/org/jfree/chart/entity/XYItemEntityTest.java

                new Rectangle2D.Double(1.0, 2.0, 3.0, 4.0));
        assertEquals(e1, e2);

        e1.setArea(new Rectangle2D.Double(4.0, 3.0, 2.0, 1.0));
        assertNotEquals(e1, e2);
        e2.setArea(new Rectangle2D.Double(4.0, 3.0, 2.0, 1.0));
        assertEquals(e1, e2);

        e1.setToolTipText("New ToolTip");
        assertNotEquals(e1, e2);
        e2.setToolTipText("New ToolTip");
        assertEquals(e1, e2);

        e1.setURLText("New URL");
        assertNotEquals(e1, e2);
        e2.setURLText("New URL");
        assertEquals(e1, e2);

        e1.setDataset(new DefaultCategoryDataset<String, String>());
=====================================================================
Found a 30 line (104 tokens) duplication in the following files: 
Starting at line 296 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/main/java/org/jfree/chart/plot/CombinedDomainCategoryPlot.java
Starting at line 314 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/main/java/org/jfree/chart/plot/CombinedDomainXYPlot.java

    }

    /**
     * Calculates the space required for the axes.
     *
     * @param g2  the graphics device.
     * @param plotArea  the plot area.
     *
     * @return The space required for the axes.
     */
    @Override
    protected AxisSpace calculateAxisSpace(Graphics2D g2,
                                           Rectangle2D plotArea) {

        AxisSpace space = new AxisSpace();
        PlotOrientation orientation = getOrientation();

        // work out the space required by the domain axis...
        AxisSpace fixed = getFixedDomainAxisSpace();
        if (fixed != null) {
            if (orientation == PlotOrientation.HORIZONTAL) {
                space.setLeft(fixed.getLeft());
                space.setRight(fixed.getRight());
            }
            else if (orientation == PlotOrientation.VERTICAL) {
                space.setTop(fixed.getTop());
                space.setBottom(fixed.getBottom());
            }
        }
        else {
=====================================================================
Found a 26 line (104 tokens) duplication in the following files: 
Starting at line 215 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/main/java/org/jfree/chart/renderer/category/LayeredBarRenderer.java
Starting at line 346 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/main/java/org/jfree/chart/renderer/category/LayeredBarRenderer.java

        double value = dataValue.doubleValue();
        double base = getBase();
        double lclip = getLowerClip();
        double uclip = getUpperClip();
        if (uclip <= 0.0) {  // cases 1, 2, 3 and 4
            if (value >= uclip) {
                return; // bar is not visible
            }
            base = uclip;
            if (value <= lclip) {
                value = lclip;
            }
        } else if (lclip <= 0.0) { // cases 5, 6, 7 and 8
            if (value >= uclip) {
                value = uclip;
            }
            else {
                if (value <= lclip) {
                    value = lclip;
                }
            }
        } else { // cases 9, 10, 11 and 12
            if (value <= lclip) {
                return; // bar is not visible
            }
            base = lclip;
=====================================================================
Found a 13 line (104 tokens) duplication in the following files: 
Starting at line 999 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/main/java/org/jfree/chart/renderer/xy/AbstractXYItemRenderer.java
Starting at line 1101 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/main/java/org/jfree/chart/renderer/xy/AbstractXYItemRenderer.java
Starting at line 1202 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/main/java/org/jfree/chart/renderer/xy/AbstractXYItemRenderer.java
Starting at line 1304 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/main/java/org/jfree/chart/renderer/xy/AbstractXYItemRenderer.java

                        LengthAdjustmentType.EXPAND, anchor);
                Rectangle2D r = TextUtils.calcAlignedStringBounds(label, 
                        g2, (float) coords.getX(), (float) coords.getY(), 
                        marker.getLabelTextAnchor());
                g2.setPaint(marker.getLabelBackgroundColor());
                g2.fill(r);
                g2.setPaint(marker.getLabelPaint());
                TextUtils.drawAlignedString(label, g2,
                        (float) coords.getX(), (float) coords.getY(),
                        marker.getLabelTextAnchor());
            }
            g2.setComposite(originalComposite);
        } else if (marker instanceof IntervalMarker) {
=====================================================================
Found a 8 line (104 tokens) duplication in the following files: 
Starting at line 58 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/test/java/org/jfree/data/category/DefaultIntervalCategoryDatasetTest.java
Starting at line 108 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/test/java/org/jfree/data/category/DefaultIntervalCategoryDatasetTest.java
Starting at line 162 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/test/java/org/jfree/data/category/DefaultIntervalCategoryDatasetTest.java
Starting at line 226 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/test/java/org/jfree/data/category/DefaultIntervalCategoryDatasetTest.java
Starting at line 264 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/test/java/org/jfree/data/category/DefaultIntervalCategoryDatasetTest.java

    public void testGetValue() {
        double[] starts_S1 = new double[] {0.1, 0.2, 0.3};
        double[] starts_S2 = new double[] {0.3, 0.4, 0.5};
        double[] ends_S1 = new double[] {0.5, 0.6, 0.7};
        double[] ends_S2 = new double[] {0.7, 0.8, 0.9};
        double[][] starts = new double[][] {starts_S1, starts_S2};
        double[][] ends = new double[][] {ends_S1, ends_S2};
        DefaultIntervalCategoryDataset d = new DefaultIntervalCategoryDataset(
=====================================================================
Found a 25 line (103 tokens) duplication in the following files: 
Starting at line 783 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/main/java/org/jfree/chart/axis/LogarithmicAxis.java
Starting at line 926 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/main/java/org/jfree/chart/axis/NumberAxis.java
Starting at line 540 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/main/java/org/jfree/chart/axis/SymbolAxis.java

                    TextAnchor rotationAnchor;
                    double angle = 0.0;
                    if (isVerticalTickLabels()) {
                        anchor = TextAnchor.CENTER_RIGHT;
                        rotationAnchor = TextAnchor.CENTER_RIGHT;
                        if (edge == RectangleEdge.TOP) {
                            angle = Math.PI / 2.0;
                        }
                        else {
                            angle = -Math.PI / 2.0;
                        }
                    }
                    else {
                        if (edge == RectangleEdge.TOP) {
                            anchor = TextAnchor.BOTTOM_CENTER;
                            rotationAnchor = TextAnchor.BOTTOM_CENTER;
                        }
                        else {
                            anchor = TextAnchor.TOP_CENTER;
                            rotationAnchor = TextAnchor.TOP_CENTER;
                        }
                    }

                    Tick tick = new NumberTick(currentTickValue, tickLabel, 
                            anchor, rotationAnchor, angle);
=====================================================================
Found a 10 line (103 tokens) duplication in the following files: 
Starting at line 212 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/main/java/org/jfree/chart/block/BorderArrangement.java
Starting at line 379 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/main/java/org/jfree/chart/block/BorderArrangement.java

        if (this.topBlock != null) {
            this.topBlock.setBounds(new Rectangle2D.Double(0.0, 0.0, width,
                    h[0]));
        }
        if (this.bottomBlock != null) {
            this.bottomBlock.setBounds(new Rectangle2D.Double(0.0,
                    height - h[1], width, h[1]));
        }
        if (this.leftBlock != null) {
            this.leftBlock.setBounds(new Rectangle2D.Double(0.0, h[0], w[2],
=====================================================================
Found a 42 line (103 tokens) duplication in the following files: 
Starting at line 88 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/main/java/org/jfree/chart/block/FlowArrangement.java
Starting at line 67 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/main/java/org/jfree/chart/block/GridArrangement.java

    }

    /**
     * Adds a block to be managed by this instance.  This method is usually
     * called by the {@link BlockContainer}, you shouldn't need to call it
     * directly.
     *
     * @param block  the block.
     * @param key  a key that controls the position of the block.
     */
    @Override
    public void add(Block block, Object key) {
        // since the flow layout is relatively straightforward,
        // no information needs to be recorded here
    }

    /**
     * Calculates and sets the bounds of all the items in the specified
     * container, subject to the given constraint.  The {@code Graphics2D}
     * can be used by some items (particularly items containing text) to
     * calculate sizing parameters.
     *
     * @param container  the container whose items are being arranged.
     * @param constraint  the size constraint.
     * @param g2  the graphics device.
     *
     * @return The size of the container after arrangement of the contents.
     */
    @Override
    public Size2D arrange(BlockContainer container, Graphics2D g2,
                          RectangleConstraint constraint) {

        LengthConstraintType w = constraint.getWidthConstraintType();
        LengthConstraintType h = constraint.getHeightConstraintType();
        if (w == LengthConstraintType.NONE) {
            if (h == LengthConstraintType.NONE) {
                return arrangeNN(container, g2);
            }
            else if (h == LengthConstraintType.FIXED) {
                return arrangeNF(container, g2, constraint);
            }
            else if (h == LengthConstraintType.RANGE) {
=====================================================================
Found a 15 line (103 tokens) duplication in the following files: 
Starting at line 496 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/main/java/org/jfree/chart/renderer/category/GanttRenderer.java
Starting at line 290 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/main/java/org/jfree/chart/renderer/category/LayeredBarRenderer.java
Starting at line 378 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/main/java/org/jfree/chart/renderer/category/WaterfallBarRenderer.java

        if (isDrawBarOutline()
                && state.getBarWidth() > BAR_OUTLINE_WIDTH_THRESHOLD) {
            Stroke stroke = getItemOutlineStroke(row, column);
            Paint paint = getItemOutlinePaint(row, column);
            if (stroke != null && paint != null) {
                g2.setStroke(stroke);
                g2.setPaint(paint);
                g2.draw(bar);
            }
        }

        CategoryItemLabelGenerator generator = getItemLabelGenerator(row,
                column);
        if (generator != null && isItemLabelVisible(row, column)) {
            drawItemLabel(g2, dataset, row, column, plot, generator, bar,
=====================================================================
Found a 25 line (103 tokens) duplication in the following files: 
Starting at line 298 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/main/java/org/jfree/data/category/CategoryToPieDataset.java
Starting at line 399 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/main/java/org/jfree/data/DefaultKeyedValues.java

        if (that.getItemCount() != count) {
            return false;
        }
        for (int i = 0; i < count; i++) {
            Comparable k1 = getKey(i);
            Comparable k2 = that.getKey(i);
            if (!k1.equals(k2)) {
                return false;
            }

            Number v1 = getValue(i);
            Number v2 = that.getValue(i);
            if (v1 == null) {
                if (v2 != null) {
                    return false;
                }
            }
            else {
                if (!v1.equals(v2)) {
                    return false;
                }
            }
        }
        return true;
    }
=====================================================================
Found a 40 line (103 tokens) duplication in the following files: 
Starting at line 505 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/main/java/org/jfree/data/DefaultKeyedValues2D.java
Starting at line 449 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/main/java/org/jfree/data/KeyedObjects2D.java

                Number v2 = kv2D.getValue(r, c);
                if (v1 == null) {
                    if (v2 != null) {
                        return false;
                    }
                }
                else {
                    if (!v1.equals(v2)) {
                        return false;
                    }
                }
            }
        }
        return true;
    }

    /**
     * Returns a hash code.
     *
     * @return A hash code.
     */
    @Override
    public int hashCode() {
        int result;
        result = this.rowKeys.hashCode();
        result = 29 * result + this.columnKeys.hashCode();
        result = 29 * result + this.rows.hashCode();
        return result;
    }

    /**
     * Returns a clone.
     *
     * @return A clone.
     *
     * @throws CloneNotSupportedException  this class will not throw this
     *         exception, but subclasses (if any) might.
     */
    @Override
    public Object clone() throws CloneNotSupportedException {
=====================================================================
Found a 17 line (103 tokens) duplication in the following files: 
Starting at line 69 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/test/java/org/jfree/chart/entity/CategoryItemEntityTest.java
Starting at line 67 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/test/java/org/jfree/chart/entity/CategoryLabelEntityTest.java
Starting at line 62 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/test/java/org/jfree/chart/entity/LegendItemEntityTest.java
Starting at line 64 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/test/java/org/jfree/chart/entity/PieSectionEntityTest.java
Starting at line 60 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/test/java/org/jfree/chart/entity/TickLabelEntityTest.java
Starting at line 64 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/test/java/org/jfree/chart/entity/XYItemEntityTest.java

                "R2", "C2");
        assertEquals(e1, e2);

        e1.setArea(new Rectangle2D.Double(4.0, 3.0, 2.0, 1.0));
        assertNotEquals(e1, e2);
        e2.setArea(new Rectangle2D.Double(4.0, 3.0, 2.0, 1.0));
        assertEquals(e1, e2);

        e1.setToolTipText("New ToolTip");
        assertNotEquals(e1, e2);
        e2.setToolTipText("New ToolTip");
        assertEquals(e1, e2);

        e1.setURLText("New URL");
        assertNotEquals(e1, e2);
        e2.setURLText("New URL");
        assertEquals(e1, e2);
=====================================================================
Found a 22 line (103 tokens) duplication in the following files: 
Starting at line 62 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/test/java/org/jfree/chart/urls/CustomCategoryURLGeneratorTest.java
Starting at line 62 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/test/java/org/jfree/chart/urls/CustomXYURLGeneratorTest.java

        CustomCategoryURLGenerator g2 = new CustomCategoryURLGenerator();
        assertEquals(g1, g2);
        List<String> u1 = new ArrayList<>();
        u1.add("URL A1");
        u1.add("URL A2");
        u1.add("URL A3");
        g1.addURLSeries(u1);
        assertNotEquals(g1, g2);
        List<String> u2 = new ArrayList<>();
        u2.add("URL A1");
        u2.add("URL A2");
        u2.add("URL A3");
        g2.addURLSeries(u2);
        assertEquals(g1, g2);
    }

    /**
     * Confirm that cloning works.
     * @throws java.lang.CloneNotSupportedException
     */
    @Test
    public void testCloning() throws CloneNotSupportedException {
=====================================================================
Found a 47 line (102 tokens) duplication in the following files: 
Starting at line 389 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/main/java/org/jfree/chart/plot/CombinedDomainXYPlot.java
Starting at line 325 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/main/java/org/jfree/chart/plot/CombinedRangeXYPlot.java

            AxisSpace subSpace = plot.calculateRangeAxisSpace(g2,
                    this.subplotAreas[i], null);
            space.ensureAtLeast(subSpace);

        }

        return space;
    }

    /**
     * Receives a chart element visitor.  Many plot subclasses will override
     * this method to handle their subcomponents.
     * 
     * @param visitor  the visitor ({@code null} not permitted).
     */
    @Override
    public void receive(ChartElementVisitor visitor) {
        subplots.forEach(subplot -> {
            subplot.receive(visitor);
        });
        super.receive(visitor);
    }

    /**
     * Draws the plot within the specified area on a graphics device.
     *
     * @param g2  the graphics device.
     * @param area  the plot area (in Java2D space).
     * @param anchor  an anchor point in Java2D space ({@code null}
     *                permitted).
     * @param parentState  the state from the parent plot, if there is one
     *                     ({@code null} permitted).
     * @param info  collects chart drawing information ({@code null}
     *              permitted).
     */
    @Override
    public void draw(Graphics2D g2, Rectangle2D area, Point2D anchor,
            PlotState parentState, PlotRenderingInfo info) {

        // set up info collection...
        if (info != null) {
            info.setPlotArea(area);
        }

        // adjust the drawing area for plot insets (if any)...
        RectangleInsets insets = getInsets();
        insets.trim(area);
=====================================================================
Found a 32 line (102 tokens) duplication in the following files: 
Starting at line 643 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/main/java/org/jfree/chart/plot/CombinedDomainXYPlot.java
Starting at line 626 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/main/java/org/jfree/chart/plot/CombinedRangeXYPlot.java

            p.setFixedRangeAxisSpace(space, false);
        }
    }

    /**
     * Handles a 'click' on the plot by updating the anchor values.
     *
     * @param x  x-coordinate, where the click occurred.
     * @param y  y-coordinate, where the click occurred.
     * @param info  object containing information about the plot dimensions.
     */
    @Override
    public void handleClick(int x, int y, PlotRenderingInfo info) {
        Rectangle2D dataArea = info.getDataArea();
        if (dataArea.contains(x, y)) {
            for (int i = 0; i < this.subplots.size(); i++) {
                XYPlot subplot = (XYPlot) this.subplots.get(i);
                PlotRenderingInfo subplotInfo = info.getSubplotInfo(i);
                subplot.handleClick(x, y, subplotInfo);
            }
        }
    }

    /**
     * Receives notification of a change to the plot's dataset.
     * <P>
     * The axis ranges are updated if necessary.
     *
     * @param event  information about the event (not used here).
     */
    @Override
    public void datasetChanged(DatasetChangeEvent event) {
=====================================================================
Found a 27 line (102 tokens) duplication in the following files: 
Starting at line 266 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/main/java/org/jfree/chart/renderer/category/GroupedStackedBarRenderer.java
Starting at line 275 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/main/java/org/jfree/chart/renderer/category/StackedBarRenderer.java

                }
            }
        }

        double translatedBase;
        double translatedValue;
        boolean positive = (value > 0.0);
        boolean inverted = rangeAxis.isInverted();
        RectangleEdge barBase;
        if (orientation == PlotOrientation.HORIZONTAL) {
            if (positive && inverted || !positive && !inverted) {
                barBase = RectangleEdge.RIGHT;
            }
            else {
                barBase = RectangleEdge.LEFT;
            }
        }
        else {
            if (positive && !inverted || !positive && inverted) {
                barBase = RectangleEdge.BOTTOM;
            }
            else {
                barBase = RectangleEdge.TOP;
            }
        }
        RectangleEdge location = plot.getRangeAxisEdge();
        if (value > 0.0) {
=====================================================================
Found a 17 line (102 tokens) duplication in the following files: 
Starting at line 514 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/main/java/org/jfree/chart/renderer/xy/StandardXYItemRenderer.java
Starting at line 268 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/main/java/org/jfree/chart/renderer/xy/XYBubbleRenderer.java

        XYDataset dataset = plot.getDataset(datasetIndex);
        if (dataset != null) {
            if (getItemVisible(series, 0)) {
                String label = getLegendItemLabelGenerator().generateLabel(
                        dataset, series);
                String description = label;
                String toolTipText = null;
                if (getLegendItemToolTipGenerator() != null) {
                    toolTipText = getLegendItemToolTipGenerator().generateLabel(
                            dataset, series);
                }
                String urlText = null;
                if (getLegendItemURLGenerator() != null) {
                    urlText = getLegendItemURLGenerator().generateLabel(
                            dataset, series);
                }
                Shape shape = lookupLegendShape(series);
=====================================================================
Found a 23 line (102 tokens) duplication in the following files: 
Starting at line 375 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/main/java/org/jfree/chart/renderer/xy/XYBoxAndWhiskerRenderer.java
Starting at line 522 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/main/java/org/jfree/chart/renderer/xy/XYBoxAndWhiskerRenderer.java

        double dataAreaX = dataArea.getHeight();
        double maxBoxPercent = 0.1;
        double maxBoxWidth = dataAreaX * maxBoxPercent;
        if (exactBoxWidth <= 0.0) {
            int itemCount = boxAndWhiskerData.getItemCount(series);
            exactBoxWidth = dataAreaX / itemCount * 4.5 / 7;
            if (exactBoxWidth < 3) {
                width = 3;
            }
            else if (exactBoxWidth > maxBoxWidth) {
                width = maxBoxWidth;
            }
            else {
                width = exactBoxWidth;
            }
        }

        g2.setPaint(getItemPaint(series, item));
        Stroke s = getItemStroke(series, item);
        g2.setStroke(s);

        // draw the upper shadow
        g2.draw(new Line2D.Double(yyMax, xx, yyQ3Median, xx));
=====================================================================
Found a 14 line (102 tokens) duplication in the following files: 
Starting at line 135 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/main/java/org/jfree/chart/swing/editor/LCBLayout.java
Starting at line 174 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/main/java/org/jfree/chart/swing/editor/LCBLayout.java

                    Dimension d = component.getMinimumSize();
                    if (this.colWidth[c] < d.width) {
                        this.colWidth[c] = d.width;
                    }
                    if (this.rowHeight[r] < d.height) {
                        this.rowHeight[r] = d.height;
                    }
                }
            }
            int totalHeight = this.vGap * (nrows - 1);
            for (int r = 0; r < nrows; r++) {
                totalHeight = totalHeight + this.rowHeight[r];
            }
            int totalWidth = this.colWidth[0] + this.labelGap 
=====================================================================
Found a 18 line (102 tokens) duplication in the following files: 
Starting at line 194 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/test/java/org/jfree/chart/axis/LogAxisTest.java
Starting at line 285 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/test/java/org/jfree/chart/axis/NumberAxisTest.java

        assertEquals(1005.2819262292991, axis.getUpperBound(), EPSILON);
    }

    /**
     * Checks that the auto-range for the domain axis on an XYPlot is
     * working as expected.
     */
    @Test
    public void testXYAutoRange1() {
        XYSeries<String> series = new XYSeries<>("Series 1");
        series.add(1.0, 1.0);
        series.add(2.0, 2.0);
        series.add(3.0, 3.0);
        XYSeriesCollection<String> dataset = new XYSeriesCollection<>();
        dataset.addSeries(series);
        JFreeChart chart = ChartFactory.createScatterPlot("Test", "X", "Y",
                dataset);
        XYPlot<?> plot = (XYPlot) chart.getPlot();
=====================================================================
Found a 18 line (102 tokens) duplication in the following files: 
Starting at line 215 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/test/java/org/jfree/chart/axis/LogAxisTest.java
Starting at line 306 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/test/java/org/jfree/chart/axis/NumberAxisTest.java

        assertEquals(3.1694019256486126, axis.getUpperBound(), EPSILON);
    }

    /**
     * Checks that the auto-range for the range axis on an XYPlot is
     * working as expected.
     */
    @Test
    public void testXYAutoRange2() {
        XYSeries<String> series = new XYSeries<>("Series 1");
        series.add(1.0, 1.0);
        series.add(2.0, 2.0);
        series.add(3.0, 3.0);
        XYSeriesCollection<String> dataset = new XYSeriesCollection<>();
        dataset.addSeries(series);
        JFreeChart chart = ChartFactory.createScatterPlot("Test", "X", "Y",
                dataset);
        XYPlot<?> plot = (XYPlot) chart.getPlot();
=====================================================================
Found a 10 line (102 tokens) duplication in the following files: 
Starting at line 58 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/test/java/org/jfree/chart/entity/CategoryItemEntityTest.java
Starting at line 111 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/test/java/org/jfree/chart/entity/CategoryItemEntityTest.java

    public void testEquals() {
        DefaultCategoryDataset<String, String> d = new DefaultCategoryDataset<>();
        d.addValue(1.0, "R1", "C1");
        d.addValue(2.0, "R1", "C2");
        d.addValue(3.0, "R2", "C1");
        d.addValue(4.0, "R2", "C2");
        CategoryItemEntity<String, String> e1 = new CategoryItemEntity<>(
                new Rectangle2D.Double(1.0, 2.0, 3.0, 4.0), "ToolTip", "URL", d, 
                "R2", "C2");
        CategoryItemEntity<String, String> e2 = new CategoryItemEntity<>(
=====================================================================
Found a 8 line (102 tokens) duplication in the following files: 
Starting at line 58 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/test/java/org/jfree/data/category/DefaultIntervalCategoryDatasetTest.java
Starting at line 108 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/test/java/org/jfree/data/category/DefaultIntervalCategoryDatasetTest.java
Starting at line 181 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/test/java/org/jfree/data/category/DefaultIntervalCategoryDatasetTest.java

    public void testGetValue() {
        double[] starts_S1 = new double[] {0.1, 0.2, 0.3};
        double[] starts_S2 = new double[] {0.3, 0.4, 0.5};
        double[] ends_S1 = new double[] {0.5, 0.6, 0.7};
        double[] ends_S2 = new double[] {0.7, 0.8, 0.9};
        double[][] starts = new double[][] {starts_S1, starts_S2};
        double[][] ends = new double[][] {ends_S1, ends_S2};
        DefaultIntervalCategoryDataset d = new DefaultIntervalCategoryDataset(
=====================================================================
Found a 7 line (102 tokens) duplication in the following files: 
Starting at line 146 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/test/java/org/jfree/data/gantt/SlidingGanttCategoryDatasetTest.java
Starting at line 56 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/test/java/org/jfree/data/gantt/XYTaskDatasetTest.java

    public void testKeys() {
        TaskSeries<String> s1 = new TaskSeries<>("Series");
        s1.add(new Task("Task 1", new Date(0L), new Date(1L)));
        s1.add(new Task("Task 2", new Date(10L), new Date(11L)));
        s1.add(new Task("Task 3", new Date(20L), new Date(21L)));
        TaskSeriesCollection<String, String> u1 = new TaskSeriesCollection<>();
        u1.add(s1);
=====================================================================
Found a 13 line (101 tokens) duplication in the following files: 
Starting at line 1073 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/main/java/org/jfree/chart/renderer/category/AbstractCategoryItemRenderer.java
Starting at line 999 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/main/java/org/jfree/chart/renderer/xy/AbstractXYItemRenderer.java
Starting at line 1202 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/main/java/org/jfree/chart/renderer/xy/AbstractXYItemRenderer.java

                        marker.getLabelOffset(), marker.getLabelOffsetType(),
                        anchor);
                Rectangle2D r = TextUtils.calcAlignedStringBounds(label, 
                        g2, (float) coords.getX(), (float) coords.getY(), 
                        marker.getLabelTextAnchor());
                g2.setPaint(marker.getLabelBackgroundColor());
                g2.fill(r);
                g2.setPaint(marker.getLabelPaint());
                TextUtils.drawAlignedString(label, g2,
                        (float) coords.getX(), (float) coords.getY(),
                        marker.getLabelTextAnchor());
            }
            g2.setComposite(savedComposite);
=====================================================================
Found a 30 line (101 tokens) duplication in the following files: 
Starting at line 113 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/main/java/org/jfree/chart/renderer/category/GroupedStackedBarRenderer.java
Starting at line 171 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/main/java/org/jfree/chart/renderer/category/StackedBarRenderer.java

    }

    /**
     * Calculates the bar width and stores it in the renderer state.  We
     * override the method in the base class to take account of the
     * series-to-group mapping.
     *
     * @param plot  the plot.
     * @param dataArea  the data area.
     * @param rendererIndex  the renderer index.
     * @param state  the renderer state.
     */
    @Override
    protected void calculateBarWidth(CategoryPlot plot, Rectangle2D dataArea,
            int rendererIndex, CategoryItemRendererState state) {

        // calculate the bar width
        CategoryAxis xAxis = plot.getDomainAxisForDataset(rendererIndex);
        CategoryDataset data = plot.getDataset(rendererIndex);
        if (data != null) {
            PlotOrientation orientation = plot.getOrientation();
            double space = 0.0;
            if (orientation == PlotOrientation.HORIZONTAL) {
                space = dataArea.getHeight();
            }
            else if (orientation == PlotOrientation.VERTICAL) {
                space = dataArea.getWidth();
            }
            double maxWidth = space * getMaximumBarWidth();
            int groups = this.seriesToGroupMap.getGroupCount();
=====================================================================
Found a 12 line (101 tokens) duplication in the following files: 
Starting at line 59 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/test/java/org/jfree/chart/axis/CategoryLabelPositionsTest.java
Starting at line 148 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/test/java/org/jfree/chart/axis/CategoryLabelPositionsTest.java

    public void testEquals() {
        CategoryLabelPositions p1 = new CategoryLabelPositions(
                new CategoryLabelPosition(RA_TOP, TextBlockAnchor.CENTER),
                new CategoryLabelPosition(RA_TOP, TextBlockAnchor.CENTER),
                new CategoryLabelPosition(RA_TOP, TextBlockAnchor.CENTER),
                new CategoryLabelPosition(RA_TOP, TextBlockAnchor.CENTER));
        CategoryLabelPositions p2 = new CategoryLabelPositions(
                new CategoryLabelPosition(RA_TOP, TextBlockAnchor.CENTER),
                new CategoryLabelPosition(RA_TOP, TextBlockAnchor.CENTER),
                new CategoryLabelPosition(RA_TOP, TextBlockAnchor.CENTER),
                new CategoryLabelPosition(RA_TOP, TextBlockAnchor.CENTER));
        assertEquals(p1, p2);
=====================================================================
Found a 22 line (101 tokens) duplication in the following files: 
Starting at line 340 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/test/java/org/jfree/chart/renderer/category/BoxAndWhiskerRendererTest.java
Starting at line 366 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/test/java/org/jfree/chart/renderer/category/BoxAndWhiskerRendererTest.java

            dataset.add(new BoxAndWhiskerItem(null, 2.0, 0.0, 4.0, 0.5, 4.5, 
                    -0.5, 5.5, null), "S1", "C1");
            CategoryPlot<String, String> plot = new CategoryPlot<>(dataset,
                    new CategoryAxis("Category"), new NumberAxis("Value"),
                    new BoxAndWhiskerRenderer());
            ChartRenderingInfo info = new ChartRenderingInfo();
            JFreeChart chart = new JFreeChart(plot);
            /* BufferedImage image = */ chart.createBufferedImage(300, 200,
                    info);
            success = true;
        }
        catch (Exception e) {
            success = false;
        }
        assertTrue(success);
    }

    /**
     * Draws a chart where the dataset contains a null median value.
     */
    @Test
    public void testDrawWithNullMedian() {
=====================================================================
Found a 21 line (101 tokens) duplication in the following files: 
Starting at line 167 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/test/java/org/jfree/data/xy/XIntervalSeriesTest.java
Starting at line 168 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/test/java/org/jfree/data/xy/YIntervalSeriesTest.java

        XIntervalSeries<String> s1 = new XIntervalSeries<>("Series 1");
        s1.add(1.0, 1.0, 1.0, 2.0);
        s1.add(2.0, 2.0, 2.0, 2.0);
        s1.add(3.0, 3.0, 3.0, 3.0);
        assertEquals(3, s1.getItemCount());

        s1.remove(2.0);
        assertEquals(3.0, s1.getX(1));

        s1.remove(1.0);
        assertEquals(3.0, s1.getX(0));
    }

    private static final double EPSILON = 0.0000000001;

    /**
     * When items are added with duplicate x-values, we expect them to remain
     * in the order they were added.
     */
    @Test
    public void testAdditionOfDuplicateXValues() {
=====================================================================
Found a 25 line (100 tokens) duplication in the following files: 
Starting at line 972 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/main/java/org/jfree/chart/axis/LogarithmicAxis.java
Starting at line 1023 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/main/java/org/jfree/chart/axis/NumberAxis.java

                    TextAnchor anchor;
                    TextAnchor rotationAnchor;
                    double angle = 0.0;
                    if (isVerticalTickLabels()) {
                        if (edge == RectangleEdge.LEFT) {
                            anchor = TextAnchor.BOTTOM_CENTER;
                            rotationAnchor = TextAnchor.BOTTOM_CENTER;
                            angle = -Math.PI / 2.0;
                        }
                        else {
                            anchor = TextAnchor.BOTTOM_CENTER;
                            rotationAnchor = TextAnchor.BOTTOM_CENTER;
                            angle = Math.PI / 2.0;
                        }
                    }
                    else {
                        if (edge == RectangleEdge.LEFT) {
                            anchor = TextAnchor.CENTER_RIGHT;
                            rotationAnchor = TextAnchor.CENTER_RIGHT;
                        }
                        else {
                            anchor = TextAnchor.CENTER_LEFT;
                            rotationAnchor = TextAnchor.CENTER_LEFT;
                        }
                    }
=====================================================================
Found a 14 line (100 tokens) duplication in the following files: 
Starting at line 3399 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/main/java/org/jfree/chart/plot/CategoryPlot.java
Starting at line 3070 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/main/java/org/jfree/chart/plot/XYPlot.java

        drawAnnotations(g2, dataArea);

        if (this.shadowGenerator != null && !suppressShadow) {
            BufferedImage shadowImage = this.shadowGenerator.createDropShadow(
                    dataImage);
            g2 = savedG2;
            g2.drawImage(shadowImage, (int) dataArea.getX()
                    + this.shadowGenerator.calculateOffsetX(),
                    (int) dataArea.getY()
                    + this.shadowGenerator.calculateOffsetY(), null);
            g2.drawImage(dataImage, (int) dataArea.getX(),
                    (int) dataArea.getY(), null);
        }
        g2.setClip(savedClip);
=====================================================================
Found a 24 line (100 tokens) duplication in the following files: 
Starting at line 274 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/main/java/org/jfree/chart/plot/CombinedDomainXYPlot.java
Starting at line 204 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/main/java/org/jfree/chart/plot/CombinedRangeXYPlot.java

        fireChangeEvent();
    }

    /**
     * Removes a subplot from the combined chart and sends a
     * {@link PlotChangeEvent} to all registered listeners.
     *
     * @param subplot  the subplot ({@code null} not permitted).
     */
    public void remove(XYPlot subplot) {
        Args.nullNotPermitted(subplot, "subplot");
        int position = -1;
        int size = this.subplots.size();
        int i = 0;
        while (position == -1 && i < size) {
            if (this.subplots.get(i) == subplot) {
                position = i;
            }
            i++;
        }
        if (position != -1) {
            this.subplots.remove(position);
            subplot.setParent(null);
            subplot.removeChangeListener(this);
=====================================================================
Found a 18 line (100 tokens) duplication in the following files: 
Starting at line 348 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/main/java/org/jfree/chart/plot/CombinedDomainXYPlot.java
Starting at line 281 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/main/java/org/jfree/chart/plot/CombinedRangeXYPlot.java

                space = xAxis.reserveSpace(g2, this, plotArea, xEdge, space);
            }
        }

        Rectangle2D adjustedPlotArea = space.shrink(plotArea, null);

        // work out the maximum height or width of the non-shared axes...
        int n = this.subplots.size();
        int totalWeight = 0;
        for (int i = 0; i < n; i++) {
            XYPlot sub = (XYPlot) this.subplots.get(i);
            totalWeight += sub.getWeight();
        }
        this.subplotAreas = new Rectangle2D[n];
        double x = adjustedPlotArea.getX();
        double y = adjustedPlotArea.getY();
        double usableSize = 0.0;
        if (orientation == PlotOrientation.HORIZONTAL) {
=====================================================================
Found a 15 line (100 tokens) duplication in the following files: 
Starting at line 534 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/main/java/org/jfree/chart/renderer/category/BoxAndWhiskerRenderer.java
Starting at line 129 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/main/java/org/jfree/chart/renderer/category/LayeredBarRenderer.java

        CategoryAxis domainAxis = getDomainAxis(plot, rendererIndex);
        CategoryDataset dataset = plot.getDataset(rendererIndex);
        if (dataset != null) {
            int columns = dataset.getColumnCount();
            int rows = dataset.getRowCount();
            double space = 0.0;
            PlotOrientation orientation = plot.getOrientation();
            if (orientation == PlotOrientation.HORIZONTAL) {
                space = dataArea.getHeight();
            }
            else if (orientation == PlotOrientation.VERTICAL) {
                space = dataArea.getWidth();
            }
            double maxWidth = space * getMaximumBarWidth();
            double categoryMargin = 0.0;
=====================================================================
Found a 89 line (100 tokens) duplication in the following files: 
Starting at line 103 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/main/java/org/jfree/chart/renderer/category/StatisticalBarRenderer.java
Starting at line 111 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/main/java/org/jfree/chart/renderer/category/StatisticalLineAndShapeRenderer.java

    }

    /**
     * Returns the paint used for the error indicators.
     *
     * @return The paint used for the error indicators (possibly
     *         {@code null}).
     *
     * @see #setErrorIndicatorPaint(Paint)
     */
    public Paint getErrorIndicatorPaint() {
        return this.errorIndicatorPaint;
    }

    /**
     * Sets the paint used for the error indicators (if {@code null},
     * the item outline paint is used instead) and sends a
     * {@link RendererChangeEvent} to all registered listeners.
     *
     * @param paint  the paint ({@code null} permitted).
     *
     * @see #getErrorIndicatorPaint()
     */
    public void setErrorIndicatorPaint(Paint paint) {
        this.errorIndicatorPaint = paint;
        fireChangeEvent();
    }

    /**
     * Returns the stroke used to draw the error indicators.  If this is
     * {@code null}, the renderer will use the item outline stroke).
     *
     * @return The stroke (possibly {@code null}).
     *
     * @see #setErrorIndicatorStroke(Stroke)
     */
    public Stroke getErrorIndicatorStroke() {
        return this.errorIndicatorStroke;
    }

    /**
     * Sets the stroke used to draw the error indicators, and sends a
     * {@link RendererChangeEvent} to all registered listeners.  If you set
     * this to {@code null}, the renderer will use the item outline
     * stroke.
     *
     * @param stroke  the stroke ({@code null} permitted).
     *
     * @see #getErrorIndicatorStroke()
     */
    public void setErrorIndicatorStroke(Stroke stroke) {
        this.errorIndicatorStroke = stroke;
        fireChangeEvent();
    }

    /**
     * Returns the range of values the renderer requires to display all the
     * items from the specified dataset. This takes into account the range
     * between the min/max values, possibly ignoring invisible series.
     *
     * @param dataset  the dataset ({@code null} permitted).
     *
     * @return The range (or {@code null} if the dataset is
     *         {@code null} or empty).
     */
    @Override
    public Range findRangeBounds(CategoryDataset dataset) {
         return findRangeBounds(dataset, true);
    }

    /**
     * Draws the bar with its standard deviation line range for a single
     * (series, category) data item.
     *
     * @param g2  the graphics device.
     * @param state  the renderer state.
     * @param dataArea  the data area.
     * @param plot  the plot.
     * @param domainAxis  the domain axis.
     * @param rangeAxis  the range axis.
     * @param data  the data.
     * @param row  the row index (zero-based).
     * @param column  the column index (zero-based).
     * @param pass  the pass index.
     */
    @Override
    public void drawItem(Graphics2D g2, CategoryItemRendererState state,
            Rectangle2D dataArea, CategoryPlot plot, CategoryAxis domainAxis,
            ValueAxis rangeAxis, CategoryDataset data, int row, int column,
=====================================================================
Found a 33 line (100 tokens) duplication in the following files: 
Starting at line 221 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/main/java/org/jfree/chart/renderer/xy/DeviationStepRenderer.java
Starting at line 844 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/main/java/org/jfree/chart/renderer/xy/XYLineAndShapeRenderer.java

    }

    /**
     * Draws the item (first pass). This method draws the lines
     * connecting the items. Instead of drawing separate lines,
     * a {@code GeneralPath} is constructed and drawn at the end of
     * the series painting.
     *
     * @param g2  the graphics device.
     * @param state  the renderer state.
     * @param plot  the plot (can be used to obtain standard color information
     *              etc).
     * @param dataset  the dataset.
     * @param pass  the pass.
     * @param series  the series index (zero-based).
     * @param item  the item index (zero-based).
     * @param domainAxis  the domain axis.
     * @param rangeAxis  the range axis.
     * @param dataArea  the area within which the data is being drawn.
     */
    protected void drawPrimaryLineAsPath(XYItemRendererState state,
                                         Graphics2D g2, XYPlot plot, XYDataset dataset, int pass,
                                         int series, int item, ValueAxis domainAxis, ValueAxis rangeAxis,
                                         Rectangle2D dataArea) {

        RectangleEdge xAxisLocation = plot.getDomainAxisEdge();
        RectangleEdge yAxisLocation = plot.getRangeAxisEdge();

        // get the data point...
        double x1 = dataset.getXValue(series, item);
        double y1 = dataset.getYValue(series, item);
        double transX1 = domainAxis.valueToJava2D(x1, dataArea, xAxisLocation);
        double transY1 = rangeAxis.valueToJava2D(y1, dataArea, yAxisLocation);
=====================================================================
Found a 16 line (100 tokens) duplication in the following files: 
Starting at line 269 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/main/java/org/jfree/chart/renderer/xy/StackedXYAreaRenderer2.java
Starting at line 351 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/main/java/org/jfree/chart/renderer/xy/StackedXYAreaRenderer2.java

                double yleft = (y0 + y1) / 2.0 + stackLeft[1];
                float transYLeft
                    = (float) rangeAxis.valueToJava2D(yleft, dataArea, edge1);
                if (orientation == PlotOrientation.VERTICAL) {
                    left.moveTo(transX1, transY1);
                    left.lineTo(transX1, transStack1);
                    left.lineTo(transXLeft, transStackLeft);
                    left.lineTo(transXLeft, transYLeft);
                } else {
                    left.moveTo(transY1, transX1);
                    left.lineTo(transStack1, transX1);
                    left.lineTo(transStackLeft, transXLeft);
                    left.lineTo(transYLeft, transXLeft);
                }
                left.closePath();
            } else {
=====================================================================
Found a 16 line (100 tokens) duplication in the following files: 
Starting at line 301 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/main/java/org/jfree/chart/renderer/xy/StackedXYAreaRenderer2.java
Starting at line 383 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/main/java/org/jfree/chart/renderer/xy/StackedXYAreaRenderer2.java

                double yright = (y1 + y2) / 2.0 + stackRight[1];
                float transYRight
                    = (float) rangeAxis.valueToJava2D(yright, dataArea, edge1);
                if (orientation == PlotOrientation.VERTICAL) {
                    right.moveTo(transX1, transStack1);
                    right.lineTo(transX1, transY1);
                    right.lineTo(transXRight, transYRight);
                    right.lineTo(transXRight, transStackRight);
                } else {
                    right.moveTo(transStack1, transX1);
                    right.lineTo(transY1, transX1);
                    right.lineTo(transYRight, transXRight);
                    right.lineTo(transStackRight, transXRight);
                }
                right.closePath();
            }
=====================================================================
Found a 31 line (100 tokens) duplication in the following files: 
Starting at line 70 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/main/java/org/jfree/data/statistics/Regression.java
Starting at line 114 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/main/java/org/jfree/data/statistics/Regression.java

            sumX += x;
            sumY += y;
            double xx = x * x;
            sumXX += xx;
            double xy = x * y;
            sumXY += xy;
        }
        double sxx = sumXX - (sumX * sumX) / n;
        double sxy = sumXY - (sumX * sumY) / n;
        double xbar = sumX / n;
        double ybar = sumY / n;

        double[] result = new double[2];
        result[1] = sxy / sxx;
        result[0] = ybar - result[1] * xbar;

        return result;

    }

    /**
     * Returns the parameters 'a' and 'b' for an equation y = a + bx, fitted to
     * the data using ordinary least squares regression. The result is returned
     * as a double[], where result[0] --&gt; a, and result[1] --&gt; b.
     *
     * @param data  the data.
     * @param series  the series (zero-based index).
     *
     * @return The parameters.
     */
    public static double[] getOLSRegression(XYDataset data, int series) {
=====================================================================
Found a 18 line (100 tokens) duplication in the following files: 
Starting at line 528 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/main/java/org/jfree/data/time/TimeSeriesCollection.java
Starting at line 564 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/main/java/org/jfree/data/time/TimeSeriesCollection.java

            int count = series.getItemCount();
            if (count > 0) {
                RegularTimePeriod start = series.getTimePeriod(0);
                RegularTimePeriod end = series.getTimePeriod(count - 1);
                Range temp;
                if (!includeInterval) {
                    temp = new Range(getX(start), getX(end));
                }
                else {
                    temp = new Range(
                            start.getFirstMillisecond(this.workingCalendar),
                            end.getLastMillisecond(this.workingCalendar));
                }
                result = Range.combine(result, temp);
            }
        }
        return result;
    }
=====================================================================
Found a 10 line (100 tokens) duplication in the following files: 
Starting at line 58 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/test/java/org/jfree/chart/entity/CategoryItemEntityTest.java
Starting at line 92 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/test/java/org/jfree/chart/entity/CategoryItemEntityTest.java
Starting at line 111 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/test/java/org/jfree/chart/entity/CategoryItemEntityTest.java

    public void testEquals() {
        DefaultCategoryDataset<String, String> d = new DefaultCategoryDataset<>();
        d.addValue(1.0, "R1", "C1");
        d.addValue(2.0, "R1", "C2");
        d.addValue(3.0, "R2", "C1");
        d.addValue(4.0, "R2", "C2");
        CategoryItemEntity<String, String> e1 = new CategoryItemEntity<>(
                new Rectangle2D.Double(1.0, 2.0, 3.0, 4.0), "ToolTip", "URL", d, 
                "R2", "C2");
        CategoryItemEntity<String, String> e2 = new CategoryItemEntity<>(
=====================================================================
Found a 23 line (100 tokens) duplication in the following files: 
Starting at line 181 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/test/java/org/jfree/chart/plot/CategoryPlotTest.java
Starting at line 161 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/test/java/org/jfree/chart/plot/XYPlotTest.java

        plot2.setRangeAxisLocation(AxisLocation.TOP_OR_RIGHT);
        assertEquals(plot1, plot2);

        // rangeAxisLocations...
        plot1.setRangeAxisLocation(11, AxisLocation.TOP_OR_RIGHT);
        assertNotEquals(plot1, plot2);
        plot2.setRangeAxisLocation(11, AxisLocation.TOP_OR_RIGHT);
        assertEquals(plot1, plot2);

        // datasetToDomainAxisMap...
        plot1.mapDatasetToDomainAxis(11, 11);
        assertNotEquals(plot1, plot2);
        plot2.mapDatasetToDomainAxis(11, 11);
        assertEquals(plot1, plot2);

        // datasetToRangeAxisMap...
        plot1.mapDatasetToRangeAxis(11, 11);
        assertNotEquals(plot1, plot2);
        plot2.mapDatasetToRangeAxis(11, 11);
        assertEquals(plot1, plot2);

        // renderer - no longer a separate field but test anyway...
        plot1.setRenderer(new AreaRenderer());
=====================================================================
Found a 7 line (100 tokens) duplication in the following files: 
Starting at line 65 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/test/java/org/jfree/data/gantt/SlidingGanttCategoryDatasetTest.java
Starting at line 63 of /home/selrhilani/Documents/UDEM/IFT3913-TP2/src/python/metrics/duplicate_metrics/../../../../jfreechart/src/test/java/org/jfree/data/gantt/XYTaskDatasetTest.java

                u1, 0, 5);
        TaskSeries<String> s2 = new TaskSeries<>("Series");
        s2.add(new Task("Task 1", new Date(0L), new Date(1L)));
        s2.add(new Task("Task 2", new Date(10L), new Date(11L)));
        s2.add(new Task("Task 3", new Date(20L), new Date(21L)));
        TaskSeriesCollection<String, String> u2 = new TaskSeriesCollection<>();
        u2.add(s2);
